软件 学报 
 JOURNALOFSOFTWARE 
 1999 年 第 10 卷 第 7 期 　 No.7 Vol.101999 
 
 
 
 多重 极小 一般 普化 
 叶 　 风 　 徐晓飞 
 　 　 摘要 　 文章 提出 一种 广义 θ - 包含 意义 下 的 广义 最小 一般 普化 , 称为 多重 极小 一般 普化 . 这一 操作 能够 有效 地 减少 普化 程度 , 从而 使 过度 普化 问题 较 好 地 得以 解决 . 为了 有效 地 计算 极小 一般 多重 普化 , 文章 研究 了 示例 集上 的 普化 范式 与 极小 一般 普化 的 关系 , 提出 了 一种 基于 概念 聚类 的 归纳 学习 算法 ( clustering - basedmultipleminimumgeneralgeneralization , 简称 CMGG ) . 该 算法 能够 有效 地 产生 多重 极小 一般 普化 , 并 准确 地 反映 出 学习 示例 间 的 内在联系 . 
 　 　 关键词 　 归纳 学习 , 归纳 逻辑 程序设计 , 多重 极小 一般 普化 , 最小 一般 普化 . 
 　 　 中图法 分类号 　 TP181 
 MultipleMinimumGeneralGeneralization 
 YEFengXUXiao - fei 
 ( DepartmentofComputerScienceandEngineeringHarbinInstituteofTechnologyHarbin150001 ) 
 　 　 Abstract 　 Inthispaper , theauthorspresentakindofgeneralizedleastgeneralgeneralization , calledMGG ( multipleminimumgeneralgeneralization ) , undergeneralized θ - subsumption . MGGdoeseffectivelyreducethegeneralizationofinductivehypothesestoextent , suchthattheproblemofover - generalizationissatisfactorilyovercome . ForcomputingMGGefficiently , therelationbetweennormalgeneralizationandMGGisstudiedandanalgorithmCMGG ( clustering - basedmultipleminimumgeneralgeneralization ) basedonconceptclusteringisproposed , whichcaneffectivelyfigureoutMGGandreflectaccuratelytheinternalrelationofthesetoflearningexamples . 
 　 　 Keywords 　 Inductivelearning , inductivelogicprogramming , multipleminimumgeneralgeneralization , leastgeneralgeneralization . 
 　 　 在 归纳 逻辑 程序设计 （ inductivelogicprogramming , 简称 ILP ） 这一 机器 学习 的 热点 研究 领域 中 , 普化 是 进行 归纳 学习 的 主要 操作 [ 1 ] , 而 最小 一般 普化 ( leastgeneralgeneralization , 简称 LGG ) 则 是 一种 常用 的 普化 方式 , 是 在 包含 ( θ - subsumption ) 意义 下 的 子句 最小 一般化 方法 [ 2 ] . 学习 算法 利用 LGG 产生 示例 的 普化 , 并 将 其 作为 归纳 结论 . LGG 是 一种 有效 的 归纳 方法 . 在 数据挖掘 与 知识 发现 等 领域 中 , LGG 都 有 重要 应用 [ 1 , 3 ] . 
 　 　 LGG 方法 存在 的 主要 问题 是 归纳 结论 的 过度 普化 ( overgeneralization ) , 即 所 产生 的 归纳 结论 覆盖 过多 的 未知 事实 . 归纳 结论 的 覆盖面 通常 应 限制 在 一定 范围 内 （ 如 已知 事实 ） , 这 就是 归纳 学习 中 普遍存在 的 最小 性 要求 （ minimalitycriteria ） [ 4 ] . 归纳 的 最小 性 要求 使 归纳 结论 最 接近 示例 所 蕴涵 的 逻辑 信息 , 使 归纳 过程 不致 过多地 引入 归纳 偏向 , 这 尤其 对 正例 学习 是 必需 的 . 然而 在 逻辑 蕴含 意义 下 , 归纳 普化 是 非常 困难 的 问题 , LGG 方法 在 这 一 意义 下 是 不 完全 的 . 现已 证明 , 即使 在 θ - 包含 意义 下 , 若 不 限制 归纳 结论 的 搜索 空间 , 不 存在 能 产生 真普化 、 有限 且 完备 的 普化 算子 [ 5 ] . 因此 , 过度 普化 问题 不 存在 彻底解决 方案 . 普化 必须 在 一定 限制 下 进行 , 如 , 放弃 能 产生 归纳 “ 跳跃 ” 的 具有 最小 真普化 性质 的 归纳 算子 等 . 现实 可行 的 解决方案 是 获取 能够 有效 地 降低 普化 程度 的 归纳 算子 . Arimura 等 人 提出 的 单位 子句 上 的 K - 最小 多重 普化 算子 [ 6 ] , 在 特定 的 范围 内 , 以多 单位 子句 的 形式 有效 地 产生 简单 示例 集上 的 具有 较 低 普化 程度 的 归纳 结论 . 
 　 　 本文 针对 上述 问题 提出 广义 θ - 包含 概念 , 并 在 这 一 基础 上 提出 子句 集上 的 多重 极小 一般 普化 ( multipleandminimumgeneralgeneralization , 简称 MGG ) 的 理论 与 方法 , 有效 地 缓解 了 过度 普化 问题 . 本文 的 结论 是 对 文献 [ 6 ] 的 结果 的 进一步 推广 . 为 实现 MGG 方法 , 本文 引入 一种 确定 子句 间 相关 程度 的 启发 函数 , 据此 给出 一种 基于 概念 聚类 的 算法 ( clustering - basedmultipleminimumgeneralgeneralization , 简称 CMGG ) , 使 MGG 方法 得以 有效 实现 . 实验 表明 , MGG 方法 是 解决 LGG 普化 问题 的 有效 方案 . 
 1 相关 概念 
 1.1 项 、 子句 与 语言 
 　 　 项是 构成 原子 的 基本成分 . 对项 的 结构 及其 性质 的 研究 是 MGG 方法 的 基础 . 令 A 为 有 穷集 , ｜ A ｜ 表示 A 的 基数 ； 有 穷集 Σ 表示 函数 符号 集 , 常数 作为 零元 函数 也 于 其中 ； X 为 与 Σ 不交 的 变量 集 . 
 　 　 定义 1 . t 称为 项 , 如果 ： 
 　 　 ( 1 ) t ∈ Σ , t 为 零元 函数 或 t ∈ X ； 
 　 　 ( 2 ) 若 t1 , ... , tn 为项 , f ( n ) ∈ Σ , 则 f ( t1 , ... , tn ) 为项 . 
 　 　 项 称为 基项 , 若 该项 不含 变元 . T 表示 项集 , GT 表示 基项 集 . 项上 的 二元关系 ≤ 定义 为 ： t , t ′ ∈ T , t ≤ t ′ 当且 仅 当 存在 替换 θ 使得 t = t ′ θ . t 为 t ′ 的 一个 例子 , t ′ 为 t 的 普化 , 即 t ′ 比 t 更为 一般 . 由项 s 生成 的 关于 项 的 语言 记为 Lt ( s ) , Lt ( s ) = { ω ｜ ω ∈ GT , ω ≤ s } . 由 Lt 的 定义 知 , s ≤ s ′ 当且 仅 当 Lt ( s ) ≤ Lt ( s ′ ) . 如果 V 是 有 穷 项集 , VLt ( v ) , 则 称 v 是 V 的 普化 . 如果 对 任意 V 的 普化 v ′ 都 有 v ≤ v ′ , 则 称 v 是 V 的 最小 一般 普化 LGG , 记为 LGG ( V ) . 
 　 　 子句 及其 语言 有 类似 项 的 定义 . 令 P 为 谓词 符号 集 , A ( t1 , ... , tn ) 称为 原子公式 , 如果 t1 , ... , tn 为项 , A ∈ P 为 n 元 谓词 . 文字 是 原子公式 或 其 否定 . 子句 为 文字 的 有 穷 集合 , 子句 也 表示 其中 文字 的 析取 , 其中 变元 为 全称 约束 . 子句 集上 的 二元关系 ≥ θ ( θ - 包含 ) 定义 如下 . 
 　 　 定义 2 . C , D 为 子句 , C θ - 包含 D , 记为 C ≥ θ D , 当且 仅 当 存在 替换 θ 使得 C θ D . 
 　 　 C 称为 D 的 普化 , 相应 地 , D 为 C 的 特化 , 亦 称为 C 的 一个 例子 . C 称为 D 的 真普化 , 记为 C > D , 如果 C ≥ θ D 且 D θ C . 由 子句 E 生成 的 语言 记为 Lc ( E ) , Lc ( E ) = { F ｜ E ≥ θ F } . 由 子句 集 S 生成 的 语言 仍记 为 Lc ( S ) , Lc ( S ) = Lc ( E ) . 如果 U 是 有 穷 子句 集 , ULc ( u ) , 则 称 u 是 U 的 普化 ； 如果 对 任意 U 的 普化 u ′ , 都 有 u ′ ≥ θ u , 则 称 u 为 U 的 最小 一般 普化 , 记为 LGG ( U ) . 本文 在 可 区分 的 场合 , 对 子句 和 项 使用 公共 术语 . 类似 地 , C ≥ θ D 当且 仅 当 LGG ( { C } ) ≥ θ LGG ( { D } ) , 常 把 这种 情形 称为 C 覆盖 D . 
 1.2 最小 一般 普化 的 计算 
 　 　 θ - 包含 关系 下 子句 的 最小 一般 普化 LGG 是 ILP 中 最 常用 的 普化 方法 , 算法 由 Plotkin 给出 [ 2 ] , 计算 按 下述 递归 方式 进行 . 
 　 　 项间 的 LGG 计算 ： 
 　 　 ( 1 ) LGG ( { s , t } ) = X , 如果 s = f ( s1 , ... , sn ) , t = g ( t1 , ... , tm ) , f ≠ g , X 是 现行 计算 中未 出现 的 新 变量 , 在 后续 计算 中 , 项对 { s , t } 的 LGG 均 以 X 代之 ； 
 　 　 ( 2 ) LGG ( { s , t } ) = f ( LGG ( { s1 , t1 } ) , ... , LGG ( { sn , tn } ) ) , 如果 s = f ( s1 , ... , sn ) , t = f ( t1 , ... , tn ) . 
 　 　 文字 间 的 LGG 计算 ： 
 　 　 ( 3 ) LGG ( { p ( s1 , ... , sn ) , p ( t1 , ... , tn ) } ) = p ( LGG { s1 , t1 } ) , ... , LGG ( { sn , tn } ) ) , p 为 n 元 谓词 ； 
 　 　 ( 4 ) LGG ( { p ( s1 , ... , sn ) , q ( t1 , ... , tm ) } ) = 无 定义 , 如果 p , q 为 不同 符号 文字 . 
 　 　 子句 间 的 LGG 计算 ： 
 　 　 ( 5 ) LGG ( { C } ) = C ； 
 　 　 ( 6 ) LGG ( { C1 , C2 } ) = { l ｜ l1 ( C1 , l2 ∈ C2 , l = LGG ( { l1 , l2 } , LGG ( { l1 , l2 } 有 定义 ) } ； 
 　 　 ( 7 ) LGG ( { C1 , ... , Cn } ) = LGG ( { C1 , LGG ( C2 , ... , Cn ) } ) . 
 　 　 例 1 : C1 = { p ( a ) ← q ( a ) , q ( f ( a ) ) } , C2 = { p ( b ) ← q ( f ( b ) ) } . 
 　 　 LGG ( { C1 , C2 } ) = { p ( X ) ← q ( Y ) , q ( f ( X ) ) } ； C1 与 C2 另 有 一 LGG 解 C ′ = { p ( X ) ← q ( f ( X ) ) } , 但 在 θ - 包含 关系 下 , C 与 C ′ 等价 , 因为 C ≥ θ C ′ 且 C ′ ≥ θ C . 
 2 　 多重 普化 
 　 　 最小 一般 普化 是 在 θ - 包含 关系 下定义 的 , 而 不是 在 逻辑 蕴含 意义 下定义 的 , 这 是因为 ， 在 计算 上 , 在 逻辑 蕴涵 意义 下 的 最小 一般 普化 计算 存在 着 很大 的 困难 , 而 θ - 包含 下 的 最小 一般 普化 计算 较 逻辑 蕴涵 要 容易 得 多 . 但是 , LGG 仍 存在 着 过度 普化 问题 . 
 　 　 例 2 : 表 连接 的 逻辑程序 表述 是 典型 的 ILP 学习 问题 . 现有 示例 集 E = { { app ( [ ] , [ ] , [ ] ) } , { app ( [ b ] , [ a ] , [ b , a ] ) } , { app ( [ a ] , [ ] , [ a ] ) } , { app ( [ ] , [ a ] , [ a ] ) } , { app ( [ a , b ] , [ c , d ] , [ a , b , c , d ] ) } } . 按 上述 LGG 算法 , 得到 LGG ( S ) = { app ( X , Y , Z ) } . 然而 , 若 以 { app ( X , Y , Z ) } 为 归纳 结论 , 则 几乎 无 意义 , 因为 app ( X , Y , Z ) 过于 一般 , 可以 覆盖 关于 app 的 一切 正反 例 . 
 　 　 如果 将 S 进行 适当 分组 , 再 进行 LGG 普化 , 则 得到 ： 
 　 　 LGG ( { { app ( [ ] , [ ] , [ ] ) } , { app ( [ ] , [ a ] , [ a ] ) } } ) = { app ( [ ] , X , X ) } ; 
 　 　 LGG ( { { app ( [ b ] , [ a ] , [ b , a ] ) } , { app ( [ a ] , [ ] , [ a ] ) } , { app ( [ a , b ] , [ c , d ] , [ a , b , c , d ] ) } } ) = { app ( [ A ｜ X ] , Y , [ A ｜ X ] ) } . 
 　 　 将 两个 普化 结论 合 起来 便 可 覆盖 S , 这一 归纳 结论 已 接近 正确 的 表 连接 表述 , 即 是 本文 的 二重 极小 一般 普化例 . 
 　 　 上 例 引出 进行 多重 普化 的 必要性 . 较之 单普化 ( LGG ) , 多重 普化 将 显著 地 降低 普化 程度 , 有利于 得到 满意 的 归纳 结论 . 以下内容 是 有关 多重 普化 的 形式 讨论 , 首先 将 θ - 包含 概念 推广 到 子句 集 . 令 S , S ′ 为 子句 集 . 
 　 　 定义 3 . SG θ - 包含 S ′ , 记为 S ≥ G θ S ′ , 当且 仅 当 对 任意 D ∈ S ′ , 都 存在 C ∈ S 及 替换 θ , 使得 C θ D , 其中 S 和 S ′ 都 是 子句 集 . 
 　 　 性质 1 . 若 S , S ′ 为 单子 集 , 则 S ≥ G θ S ′ 当且 仅 当 S ′ ≥ θ S ′ . 
 　 　 性质 2 . 若 S ≥ G θ S ′ , 则 SS ′ . 
 　 　 因此 , S 为 S ′ 的 普化 . 本文 将 S 称为 k 子句 集 , 如果 S 是 由 至多 k 个子 句 构成 的 集合 . 
 　 　 定义 4 . k 子句 集 S 称为 S ′ 的 k 重 极小 一般 普化 ( k - minimumgeneralgeneralization , 简称 k - MGG ) , 记 为 ﹌ - MGG ( S ′ ) , 当且 仅 当 下列 条件 成立 ： 
 　 　 ( 1 ) S ≥ G θ S ′ ; 
 　 　 ( 2 ) 对 任意 k 子句 集 T , 如果 T ≥ G θ S ′ 且 S ≥ G θ T , 则 T ≥ G θ S . 
 　 　 性质 3 . 若 S 为 k 子句 集 , 则 k - MGG ( S ) = S . 
 　 　 因此 , 在 多重 普化 中 只要 不 限制 普 化子 句 的 基数 , 普化 程度 在 ≥ G θ 关系 下 就 可 降到 最低 , 即 自身 . 多重 普化 的 优越性 在于 此 . 当然 , k - MGG ( S ) = S 这样 的 解是 平凡 的 . 实用 中 , 学习 产生 的 归纳 结论 既 要 覆盖 现有 事实 , 又 要 具有 一定 的 信息压缩 能力 . 因而 k 要取 在 一定 范围 之内 . 
 　 　 性质 4 . k 重 极小 一般 普化 不 唯一 . 
 　 　 例 3 : S = { { p ( a , a ) } , { p ( a , b ) } , { p ( b , b ) } } , 则 S 的 二重 极小 一般 普 化解 有 3 个 ： 
 　 　 ( 1 ) S1 = { p ( X , X ) , p ( a , b ) } ; 
 　 　 ( 2 ) S2 = { p ( a , a ) , p ( Y , b ) } ; 
 　 　 ( 3 ) S3 = { p ( a , Z ) , p ( b , b ) } . 
 　 　 因此 , 子句 集上 通常 没有 多重 最小 一般 普 化解 . 
 　 　 CS 表示 子句 的 全集 , 等价关系 ≡ 定义 为 C ≡ D , 当且 仅 当 C ≥ G θ D 且 D ≥ G θ C . CS / ≡ 为 由 关系 ≡ 归纳 的 商集 , [ C ] ∈ CS / ≡ 为 子句 C 的 等价 类 , 则 ≥ G θ 是 CS 上 的 偏序 关系 . ILP 中 的 归纳 操作 即 为 确定 子句 间 ≥ G θ 关系 的 存在 与否 . 
 　 　 定理 1 . ≥ G θ 为 CS / ≡ 上 的 偏序 关系 . 
 　 　 证明 : ( 1 ) 对 任意 [ C ] ∈ CS / ≡ , 取 替换 θ = { } , 则 C θ C , 于是 [ C ] ≥ G θ [ C ] ； 
 　 　 ( 2 ) [ C ] , [ D ] ∈ CS / ≡ , 若 [ C ] ≥ G θ [ D ] 且 [ D ] ≥ G θ [ C ] , 由 ≡ 的 定义 , [ C ] ≡ [ D ] ； 
 　 　 ( 3 ) [ C ] , [ D ] , [ E ] ∈ CS / ≡ , 若 [ C ] ≥ G θ [ D ] 且 [ D ] ≥ G θ [ E ] , 则 对 e ∈ E , 存在 d ∈ D 及 θ , 使得 d θ e , 并且 对 d ′ ∈ D , 存在 c ∈ C 及 θ ′ , 使得 c θ ′ d ′ . 不妨 取 d = d ′ , 则 ( c θ ′ ) θ e . 于是 , [ C ] ≥ G θ [ E ] . 因此 , ( CS / ≡ , ≥ G θ ) 是 偏序 集 . 　 　 □ 
 　 　 在 偏序 ≥ G θ 下 , S , k - MGG ( S ) 与 LGG ( S ) 呈现 下述 关系 . 
 　 　 定理 2 . LGG ( S ) ≥ G θ k - MGG ( S ) ≥ G θ S . 
 　 　 证明 : 只 需 证明 前半部 分 , 后 半 部分 由 k - MGG 的 定义 直接 得到 . 若不然 , 存在 子句 C ∈ k - MGG ( S ) , 使得 对 任意 替换 θ , LGG ( S ) θ C . 对 k - MGG ( S ) 中 所有 这样 的 C 作 下述 替换 ： ( k - MGG ( S ) - { C } ) ∪ { C ′ } , 其中 C ′ = C ∪ LGG ( S ) , 替换 后 形成 k 子句 集 T . 注意 到 C ≥ G θ C ′ 且 C ′ G θ C , C 为 C ′ 的 真普化 . 于是 , LGG ( S ) ≥ G θ k - MGG ( S ) > G θ T . 此外 , 对 C ∈ k - MGG ( S ) 及 替换 θ , 使得 C θ e , 相应 地 , C ′ ∈ T , C ′ = C 或 C ′ = C ∪ LGG ( S ) , 前者 C ′ θ e ； 而 后者 , 只 需注意 LGG 的 定义 , 存在 替换 θ ′ 使得 LGG ( S ) θ ′ e , 于是 , C ′ θ θ ′ e . 因此 , T 为 S 的 普化 , T ≥ G θ S . 但 这 与 k - MGG ( S ) 的 极小 性 矛盾 . □ 
 　 　 因此 , 关系 ≥ G θ 比 ≥ θ 更强 , 多重 极小 一般 普化 能比 最小 一般 普化 更好 地 降低 结论 的 一般性 程度 , 多重 普化 的 合理性 也 在 此 得以 体现 . 
 　 　 性质 5 . LGG ( S ) = 1 - MGG ( S ) . 
 　 　 k - MGG 因此 也 称为 广义 最小 一般 普化 . 
 3 普化 范式 与 多重 极小 一般 普化 
 　 　 本 节 首先 研究 子句 集上 的 一个 重要 性质 — — 紧致性 , 这一 性质 是 所谓 普化 范式 的 基础 , 而 普化 范式 与 多重 极小 一般 普化 又 有 密切关系 . 利用 这种 关系 可 建立 基于 多重 极小 一般 普化 的 学习 算法 . 
 　 　 定义 5 . 称 CS 关于 集合 包含 具有 紧致性 , 当且 仅 当 若 Lc ( D ) ( g ) , 则 存在 g ∈ G 使得 Lc ( D ) Lc ( g ) . 其中 D ∈ CS , GCS . 
 　 　 CS 上 的 紧致性 是 计算 k - MGG 的 基础 . 
 　 　 定义 6 . 项 t 的 层数 递归 定义 如下 ： 
 　 　 ( 1 ) t 为 1 层 的 , 如果 t 为 常量 或 变量 ； 
 　 　 ( 2 ) t 为 n + 1 层 的 , 如果 t = f ( t1 , ... , tn ) , n = Max ( { t1 的 层数 , ... , tn 的 层数 } ) . 
 　 　 引理 1 . 若 ｜ Σ ｜ > k > 0 , 则 CS 关于 集合 包含 具有 紧致性 . 其中 Σ 是 构造 CS 的 函数 符号 集 . 
 　 　 证明 : Lc ( D ) ( g ) . 令 ｜ Σ ｜ = m , Σ = { f1 , ... , fm } , D 是 子句 , G = { g1 , ... , gk } CS . 施 归纳 于 D 中项 的 层数 . 归纳 基始 ： D 中项 的 最大 层数 为 1 , 则 D 中项 为 常量 或 变量 . 
 　 　 ( 1 ) 若 D 中项 均 为 常量 , 则 Lc ( D ) = { D } ( g ) . 当然 , 存在 g ∈ G , 使得 D ∈ Lc ( g ) ； 
 　 　 ( 2 ) 否则 , D 中项 有 一个 为 变量 , 不妨 设 只有 一个 变量 且 为 X , 则 Lc ( D ) = Lc ( { { D { X / f1 } } , ... , { D { X / fm } } ) , 其中 { X / fi } 为 替换 . 即将 Σ 中 各 函数 （ 包括 常量 ） 以 最 一般 的 形式 代入 . 由于 各 fi 不同 名 , 可 将 fi 看成 常量 . 类似 于 ( 1 ) , 对 各 D { X / fi } 都 存在 一个 gi ∈ G 及 替换 θ i , 使得 gi θ iD { X / fi } . 因为 m > k , 由 抽屉 原理 , 必有 一个 g ∈ G 覆盖 D 的 两个 例化 , 分别 为 D { X / fi } 与 D { X / fj } , D { X / fi } ∈ Lc ( g ) , D { X / fj } ∈ Lc ( g ) . 由于 fi ≠ fj , 故 g 中 对应 的 能 覆盖 fi 与 fj 的 项 必为 变量 . 于是 , 通过 对 这个 变量 的 各种 可能 替换 , g 能 覆盖 所有 D 的 例化 , 即 D { X / fi } ∈ Lc ( g ) . 因而 Lc ( D ) = { D { X / f1 } ) , ... , ( D { X / fm } ) Lc ( g ) . 
 　 　 归纳 假设 ： 当 D 中项 的 层数 至多 为 n 时 , 结论 成立 . 下面 证明 当 D 中项 的 层数 至多 为 n + 1 时 , 结论 仍 成立 . 不妨 考虑 D 中 只 出现 一个 层数 为 n + 1 的 项 , 表示 t 由 层数 为 n 的 项 t ′ 构造 而 得 , 方法 是 将 t ′ 中 位置 为 i 处 的 变量 代之以 项 f ( t1 , ... , tn ) , 其中 f ∈ Σ , t1 , ... , tn 为 变量 或 常量 . 
 　 　 ( 3 ) 若 t1 , ... , tn 均 为 常量 , 则 将 f ′ = f ( t1 , ... , tn ) 作为 一个 新 的 常量 加入 Σ 中 （ 这种 做法 不 改变 Lc ( D ) 等 的 内容 ） , 同时 将 t 改为 . 于是 , D 中项 的 最大 层数 为 n 且 ｜ Σ ｜ = m + 1 > k , 由 归纳 假设 , 结论 成立 ； 
 　 　 ( 4 ) 否则 t1 , ... , tn 之一 为 变量 , 不妨 设 t1 为 唯一 变量 . 将 t1 分别 替换成 fi , k ≥ i ≥ 1 , 形成 相应 的 Di , 并 将 k 个 f （ fi , t2 , ... , tn ) 作为 新 的 常量 加入 Σ 中 . 因而 , Di 中项 的 最大 层数 为 n 且 ｜ Σ ｜ = m + k > k . Lc ( D ) = ㎜ c ( { D1 } , ... , { Dm } ) = Lc { D1 } ∪ ... ∪ Lc { Dm } . i , 1 ≤ i ≤ m , Lc { Di } ( g ) , 由 归纳 假设 , 存在 g ∈ G , 使得 Lc { Di } Lc ( g ) . 应用 抽屉 原理 并 以 类似 ( 2 ) 的 方法 , 得到 结论 . □ 
 　 　 下面 我们 均 假定 ｜ Σ ｜ > k , 因为 这一 假定 符合 ILP 学习 的 实际 情况 . 
 　 　 定义 7 . 子句 集 S , T . S 称为 T 的 普化 范式 , 当且 仅 当 对 C ∈ S , C = LGG ( T - Lc ( S - { C } ) ) . 
 　 　 普化 范式 一方面 说明 了 普化 结论 的 极小 性 , 另一方面 指出 了 普化 结论 中 的 各 子句 对 覆盖 示例 集 的 独立 贡献 . 
 　 　 定理 3 . 设 S , T 是 子句 集 , ｜ S ｜ = k , TLc ( S ) , 则 S 是 T 的 k 重 极小 一般 普化 当且 仅 当 S 是 T 的 普化 范式 . 
 　 　 证明 : 必要性 . S 是 T 的 普化 范式 . 若不然 , 存在 C ∈ S , 使得 C ≠ LGG ( T - Lc ( S - { C } ) ) . 令 C0 = LGG ( T - Lc ( S - { C } ) ) , 则 由 C0 的 最小 性 , Lc ( C0 ) ∩ TLc ( C ) ∩ T 或 Lc ( C ) ∩ TLc ( C0 ) ∩ T . 于是 , 前者 导致 TLc ( S ) , 与 TLc ( S ) 矛盾 ； 而 后者 导致 TLc ( S ) , 与 S 的 极小 性 矛盾 . 
 　 　 充分性 . S 是 T 的 k 重 极小 一般 普化 . 若不然 , 另有 k 子句 集 S ′ , 使得 TLc ( S ′ ) , S ≥ G θ S ′ , S ′ G θ S , 即 S > S ′ . 于是 , TLc ( S ′ ) Lc ( S ) . 
 　 　 ( 1 ) 若 ｜ S ′ ｜ < ｜ S ｜ , 由 引理 1 , 对 , 存在 C ∈ S , 使得 Lc ( C ′ ) Lc ( C ) . 取 子句 集 S ″ = { C ｜ C ∈ S , 存在 C ′ ∈ S ′ 使得 Lc ( C ′ ) Lc ( C ) } , ｜ S ″ ｜ = ｜ S ′ ｜ . 由此 , T ( S ″ ) , S ″ 覆盖 T 且 为 S 的 真 子集 . 任取 C ∈ ( S - S ″ ) , 则 有 T - Lc ( S - { C } ) = . 于是 , LGG ( T - Lc ( S - { C } ) ) ≠ C , 即 S 不是 T 的 普化 范式 ； 
 　 　 ( 2 ) 若 ｜ S ′ ｜ = ｜ S ｜ , 由 引理 1 , 对 , 存在 C ∈ S , 使得 Lc ( C ′ ) Lc ( C ) . 再 由 假设 S > S ′ 知 , 必 存在 C ∈ S , C ′ ∈ S ′ , 使得 Lc ( C ′ ) Lc ( C ) . 然而 , Lc ( S ′ - { C ′ } ) Lc ( S - { C } ) . 因此 , T - Lc ( S - { C } ) T - Lc ( S ′ - { C ′ } ) , 此外 , 因为 TLc ( S ) , T - Lc ( S - { C } ) Lc ( C ) . 同理 , T - Lc ( S ′ - { C ′ } ) Lc ( C ′ ) . 于是 , T - Lc ( S - { C } ) T - Lc ( S ′ - { C ′ } ) Lc ( C ′ ) Lc ( C ) . 由此 , C ≠ LGG ( T - Lc ( S - { C } ) ) , 这 与 S 为 普化 范式 矛盾 . 　 　 □ 
 　 　 上述 定理 指出 , 要 获得 k 重 极小 一般 普化 , 只 需 将 示例 集 T 作 适当 的 k 类 划分 , 形成 k 个 子集 , 再 对 每个 子集 作 LGG , k 个 LGG 形成 覆盖 T 的 普化 范式 , 也 是 T 的 k 重 极小 一般 普化 . 因此 , k 重 极小 一般 普化 问题 转化 为 对 示例 集 的 合理 k 类 划分 问题 . 
 4 多重 极小 一般 普化 算法 
 　 　 由 第 3 节 讨论 可知 , 产生 k 重 极小 一般 普化 的 关键 是 进行 合理 的 k 类 划分 . 然而 , 就 归纳 学习 而言 , 我们 仅 知道 学习 示例 , 而 对 目标 概念 的 深层 知识 并不知道 , 因而 难于 得到 划分 的 标准 . 在 这种 情况 下 , 必须 给出 归纳 结论 的 适当 语义 . 归纳 结论 的 一个 明显 表现 是 其 反映 示例 的 聚类 特征 , 每一聚类 表示 目标 概念 的 一个 子 概念 , 相应 于 示例 划分 中 的 一个 子集 . 由此 , 我们 可以 作出 这样 的 假定 ： 即 归纳 结论 具有 聚类 意义 下 的 语义 . 据此 , 本文 基于 多重 极小 一般 普化 的 学习 算法 的 基本思路 是 ： 首先 对 示例 集 E 进行 适当 的 聚类 （ k 类 ） , 聚类 结果 形成 E 的 一个 k 类 划分 , 然后 对 E 划分 中 的 各 子集 作 LGG , 并 形成 k 子句 集 作为 k 重 极小 一般 普化 的 近似 . 
 　 　 为 进行 概念 聚类 , 必须 定义 一种 相似性 测度 , 这种 测度 应 能 准确 反映 示例 间 的 相似性 或 差异性 . 为此 , 考察 一下 LGG 计算 的 定义 , 不难 发现 , LGG ( E ) 实际 捕捉 了 示例 间 的 公共 结构 与 特征 , 反映 了 示例 间 的 共性 . 因此 , 可 将 LGG 作为 元素 间 相似性 的 基准 . 相似性 的 对立面 是 差异性 . 对于 给定 的 两个 子句 C 与 D , 它们 的 差异 主要 来自 以下 几个 方面 ： 同名 文字 间 对应 位置 上项 的 差异 、 子句 中 文字 数量 的 差异 、 不同 名 文字 数量 的 差异 以及 子句 中 变量 间 限制 的 差异 等 ( 在 此 , 变量 限制 是 指 一个 变量 在 子句 中 出现 两次 以上 . 如 在 子句 P ( X ) ← Q ( X ) 中 , 变量 X 是 限制 的 , 而 X 在 子句 P ( X ) ← Q ( Y ) 中是 不 限制 的 . 这 有别于 变量 的 全称 约束 ) . 根据 以上 4 种 差异 , 定义 子句 间 差异 的 函数 Dif . 
 　 　 首先 定义 变量 在 子句 （ 项 ） 中所处 深度 的 概念 , 变量 深度 的 不同 决定 了 这 一 变量 对 子句 的 影响 不同 . 一般 地 , 变量 所 处 位置 越小 , 其 影响 越大 . 
 　 　 定义 8 . X 为 一 变量名 , tc 为 子句 或项 . X 在 tc 中 的 深度 d ( X , tc ) 递归 定义 为 ： 
 　 　 ( 1 ) d ( X , tc ) = 0 , 如果 tc 是 与 X 同名 的 变量 ； 
 　 　 ( 2 ) d ( X , tc ) = ∞ , 如果 tc 是 与 X 不同 名 的 变量 ； 
 　 　 ( 3 ) d ( X , tc ) = 1 + min { d ( X , ti ) ｜ tc = f ( t1 , ... , tn ) , 1 ≤ i ≤ n } ； 
 　 　 ( 4 ) d ( X , tc ) = 1 + min { d ( X , ti ) ｜ tc = ( ) P ( t1 , ... , tn ) , 1 ≤ i ≤ n , tc 为 文字 } ； 
 　 　 ( 5 ) d ( X , { } ) = ∞ ； 
 　 　 ( 6 ) d ( X , tc ) = 1 + min { d ( X , li ) ｜ tc = { l1 , ... , ln } , 1 ≤ i ≤ n , tc 为 子句 } . 
 　 　 例如 , 变量 X 在 C = { Even ( s ( X ) ) ← Odd ( X ) } 中 的 深度 为 1 , 而 X 在 C ′ = { Even ( s ( s ( X ) ) ) ← Odd ( s ( X ) ) } 的 深度 为 2 . 明显 地 , 在 θ - 包含 意义 下 , X 在 C 中起 的 作用 要 大于 X 在 C ′ 中起 的 作用 . 
 　 　 定义 9 . C , D 为 子句 , C 与 D 的 差别 函数 Dif 定义 为 
 　 　 　 　 　 　 　 
 　 　 　 　 　 　 　 　 　 　 　 　 + k ′ ( ｜ C - LGG ( { C , D } ) θ 1 ｜ + ｜ D - LGG ( { C , D } ) θ 2 ｜ ) . 
 其中 θ 1 与 θ 2 为 替换 , 使得 LGG ( { C , D } ) θ 1C 和 LGG ( { C , D } ) θ 2D , X / t 表示 替换 θ 中 的 一个 代换 项 , ｜ E ｜ 表示 子句 E 中 文字 个数 , k 与 k ′ 是 两个 可调 参数 , 用于 确定 两类 差异 的 权重 . 
 　 　 在 Dif 定义 中 , 第 1 项 表达 了 C 和 D 各自 与 公共 结构 LGG ( { C , D } ) 间项 的 差异 , 也 隐含 了 限制 变元间 的 差异 , 这种 差异 主要 体现 在 替换 θ 1 与 θ 2 的 各个 代换 项上 ； 第 2 项 ( ｜ C - LGG ( { C , D } ) θ 1 ｜ + ｜ D - LGG ( { C , D } ) θ 2 ｜ ) 表达 了 C 和 D 各自 与 公共 结构 LGG ( { C , D } ) 间 文字 数量 的 差异 与 不同 名 文字 数量 的 差异 . 
 　 　 性质 6 . ( 1 ) Dif ( C , C ) = 0 ； ( 2 ) Dif ( C , D ) = ∞ , 如果 LGG ( { C , D } ) = { } . 
 　 　 下面 利用 Dif 给出 基于 概念 聚类 的 多重 极小 一般 普化 算法 CMGG . 
 　 　 ( 1 ) 输入 子句 集 T = { C1 , ... , Cn } , k 
 　 　 ( 2 ) 循环 直至 ｜ T ｜ ≤ kdo 
 　 　 ( 3 ) 　 　 取 C , D ∈ T , C ≠ D , 使得 Dif ( C , D ) = min { Dif ( A , B ) ｜ A ∈ T , B ∈ T , A ≠ B } ; 
 　 　 ( 4 ) 　 　 对 所有 A ∈ T , 如果 LGG ( { C , D } ) ≥ θ A , 则 T = T - { A } ; 
 　 　 ( 5 ) 　 　 T = T ∪ LGG ( { C , D } ) ; 
 　 　 ( 6 ) 输出 T . ∥ k 重 极小 一般 普化 结论 . 
 　 　 性质 7 . 算法 CMGG 输出 输入 子句 集上 的 多重 极小 一般 普化 结论 . 
 　 　 算法 CMGG 以 最 邻近 规则 进行 聚类 . 下例 说明 算法 的 执行 过程 , 取 k = k ′ = 1 . 
 　 　 例 4 : T = { { app ( [ ] , [ ] , [ ] ) } , { app ( [ b ] , [ a ] , [ b , a ] ) } , { app ( [ a ] , [ ] , [ a ] ) } , { app ( [ ] , [ a ] , [ a ] ) } , { app ( [ a , b ] , [ c , d ] , [ a , b , c , d ] ) } } . 考虑 E 的 二重 极小 一般 普化 . 
 　 　 ( 1 ) 首次 循环 , { app ( [ ] , [ ] , [ ] ) } 与 { app ( [ ] , [ a ] , [ a ] ) } 为 最近 邻 , Dif ( app ( [ ] , [ ] , [ ] ) , app ( [ ] , [ a ] , [ a ] ) ) = 2 , 形成 T = { { app ( [ b ] , [ a ] , [ b , a ] ) } , { app ( [ a ] , [ ] , [ a ] ) } , { app ( [ a , b ] , [ c , d ] , [ a , b , c , d ] ) } , { app ( [ ] , X , X ) } } ; 
 　 　 ( 2 ) 二次 循环 , { app ( [ b ] , [ a ] , [ b , a ] ) } 与 { app ( [ a , b ] , [ c , d ] , [ a , b , c , d ] ) } 为 最近 邻 , Dif ( app ( [ b ] , [ a ] , [ b , a ] ) , app ( [ a , b ] , [ c , d ] , [ a , b , c , d ] ) ) = 5 , 形成 T = { { app ( [ A ｜ B ] , C , [ A ｜ D ] ) } , { app ( [ ] , X , X ) } } . 
 　 　 算法 有效 地 得到 T 的 二重 极小 一般 普化 { { app ( [ A ｜ B ] , C , [ A ｜ D ] ) } , { app ( [ ] , X , X ) } } . 注意 到 在 首次 循环 , { app ( [ ] , [ ] , [ ] ) } 与 { app ( [ a ] , [ ] , [ a ] ) } 也 是 一对 最近 邻 , 它们 的 LGG 是 { app ( X , [ ] , X ) } , 这样 可 形成 另 一种 二重 极小 一般 普化 . 
 　 　 算法 CMGG 在 以 最 邻近 规则 进行 聚类 时 , 有时 也 难免 生成 过于 普化 的 结论 . 如果 在 算法 的 第 ( 3 ) 步 再 考虑 LGG 相对 于 示例 集 的 覆盖面 因素 , 这一 问题 就 能 得到 较 好 的 处理 . 将 算法 的 第 ( 3 ) 步 改为 ： 取 C , D ∈ T , C ≠ D , 使得 Dif ( C , D ) + Cov ( LGG ( { C , D } ) ) = min , 其中 Cov ( LGG ( { C , D } ) ) = ｜ { e ｜ e ∈ T , e ∈ Lc ( LGG ( { C , D } ) ) } ｜ , 即 综合 考虑 子句 差别 与 LGG 结论 的 普化 程度 . 
 　 　 例 4 得到 的 归纳 结论 { app ( [ A ｜ B ] , C , [ A ｜ D ] ) , app ( [ ] , X , X ) } 已经 非常 接近 正确 的 表 连接 表述 . 注意 到 算法 CMGG 得到 的 每 一部分 归纳 结论 实质 都 表征 了 一类 示例 的 结构特征 , 如 app ( [ ] , X , X ) 表示 app 第 1 元为 常量 [ ] , 第 2 元 与 第 3 元 相同 的 示例 , app ( [ A ｜ B ] , C , [ A ｜ D ] ) 表示 app 第 1 元 与 第 3 元 的 头 元素 相同 的 示例 . 利用 这些 结构特征 能够 有效 地 产生 相当 一些 类 问题 的 正确 归纳 结论 , 特别 是 单位 子句 程序 类 等 . 利用 例 4 产生 的 结构 ， 我们 能够 容易 地 构造 出 这 一 问题 的 最终 表述 ： { app ( [ ] , X , X ) , app ( [ A ｜ B ] , C , [ A ｜ D ] ) ← app ( B , C , D ) } . 
 　 　 例 5 : 关于 自然数 乘法 的 示例 集 E = { { mul ( 0 , 1 , 0 ) } , { mul ( 0 , 2 , 0 ) } , { mul ( 1 , 1 , 1 ) } , { mul ( 1 , 2 , 2 ) } , { mul ( 1 , 4 , 4 ) } , { mul ( 2 , 2 , 4 ) ← dec ( 2 , 1 ) , mul ( 1 , 2 , ) , plus ( 2 , 2 , 4 ) } , { mul ( 3 , 1 , 3 ) ← dec ( 3 , 2 ) , mul ( 2 , 1 , 2 ) , plus ( 2 , 1 , 3 ) } } . 取 k = 3 . 
 　 　 ( 1 ) 算法 形成 { { mul ( 0 , 1 , 0 ) } , { mul ( 0 , 2 , 0 ) } } 的 聚类 mul ( 0 , A , 0 ) ； 
 　 　 ( 2 ) 算法 形成 { { mul ( 1 , 1 , 1 ) } , { mul ( 1 , 2 , 2 ) } , { mul ( 1 , 4 , 4 ) } } 的 聚类 mul ( 1 , B , B ) . 
 　 　 若 不 考虑 LGG ( C , D ) 结论 的 普化 程度 因素 , 下 一次 将 对 mul ( 0 , A , 0 ) 与 mul ( 0 , B , B ) 进行 聚类 , 产生 mul ( X , Y , Z ) , 结果 与 LGG 方式 一样 . 而 在 考虑 LGG ( C , D ) 结论 的 普化 程度 因素 后 , 有 
 　 　 ( 3 ) 算法 对 { { mul ( 2 , 2 , 4 ) ← dec ( 2 , 1 ) , mul ( 1 , 2 ) , plus ( 2 , 2 , 4 ) } , { mul ( 3 , 1 , 3 ) ← dec ( 3 , 2 ) , mul ( 2 , 1 , 2 ) , plus ( 2 , 1 , 3 ) } } 进行 聚类 , 形成 mul ( C , D , E ) ← dec ( D , F ) , mul ( F , D , G ) , plus ( G , D , E ) . 
 　 　 本例 中 E 取 的 是 自然数 乘法 的 逻辑程序 { mul ( 0 , A , 0 ) . mul ( 0 , B , B ) . mul ( C , D , E ) ← dec ( D , F ) , mul ( F , D , G ) , plus ( G , D , E ) . } 的 基例 化子 集 . 目的 是 考察 算法 CMGG 的 普化 性能 . E 所取 示例 是 一种 “ 代表 集 ” [ 7 ] , 示例 集 给出 了 进行 归纳 所 必须 的 示例 , 在 “ 代表 集 ” 上 进行 多重 极小 一般 普化 ， 可 取得 满意 结果 . 本文 提出 的 算法 还 对 一批 典型 示例 进行 了 多重 普化 学习 , 如 自然数 plus ( + ) , lesseg ( ≤ ) 等 , 均 获 满意 结果 . 
 5 结论 
 　 　 子句 集上 的 多重 极小 一般 普化 是 对 最小 一般 普化 归纳 的 直接 推广 . 本文 首先 证明 了 多重 普化 能够 有效 降低 归纳 结论 的 一般性 程度 , 从而 使 多重 极小 一般 普化 成为 一种 适合 的 归纳 方法 . 然后 , 证明 了 子句 集上 的 k 重 极小 一般 普化 等价 于 该集 上 的 k 普化 范式 . 由此 , 通过 引入 关于 子句 间 差异 的 启发 函数 Dif , 提出 了 一种 基于 概念 聚类 方法 的 多重 极小 一般 普化 算法 CMGG . 实验 表明 , 该 算法 准确 地 形成 了 令人满意 的 多重 极小 一般 普化 归纳 结论 . 
 　 　 本文 研究 得到 国家 863 高科技 项目 基金 资助 . 作者 叶风 , 1960 年生 , 博士生 , 主要 研究 领域 为 机器 学习 , 人工智能 逻辑 基础 , 专家系统 . 徐晓飞 , 1962 年生 , 博士 , 教授 , 博士生 导师 , 主要 研究 领域 为 计算机 集成 制造 , 分布式 数据库 . 
 　 　 本文 通讯联系 人 : 叶风 , 哈尔滨 150001 , 哈尔滨工业大学 计算机科学 与 工程系 专家系统 研究室 
 　 　 作者 单位 ： 哈尔滨工业大学 计算机科学 与 工程系 　 哈尔滨 　 150001 
 　 　 　 　 　 　 　 E - mail : yf @ mlg . hit . edu . cn 
 参考文献 
 　 1 　 MuggletonS , RaedtLD . Inductivelogicprogramming : theoryandmethod . JournalofLogicProgramming , 1994 , 19 ( 20 ) : 629 ～ 679 
 　 2 　 PlotkinGG . Anoteoninductivegeneralization . In : MeltzerB , MichieDeds . MachineIntelligence . EdinburghUniversityPress , 1970 , ( 5 ) : 153 ～ 163 
 　 3 　 DzeroskiS . Inductivelogicprogrammingandknowledgediscoveryindatabases . In : FayyadUM , ShapiroG , SmythPetaleds . AdvancesinKnowledgeDiscoveryandDataMining . Cambridge , CA : AAAIPress , 1996.117 ～ 152 
 　 4 　 WrobelS . Firstordertheoryrefinement . In : DeReadtLed . AdvancesinInductiveLogicProgramming . Amsterdam : IOSPress , 1996.14 ～ 33 
 　 5 　 PatrickRJ , Nienhuys - ChengS . Existenceandnonexistenceofcompleterefinementoperators . In : BergadanoF , RaedtLDeds . Proceedingsofthe7thEuropeanConferenceonMachineLearning . LectureNotesinArtificialIntelligence . Berlin : SpringerVerlag , 1994.307 ～ 322 
 　 6 　 ArimuraH , ShinoharaT , OtsukiSetal . Ageneralizationoftheleastgeneralgeneralization . In : FurukwaK , MichieD , MuggletonSeds . MachineIntelligence . Oxford : ClarendonPress , 1994 , ( 13 ) : 59 ～ 85 
 　 7 　 LingCX . Logicprogramsynthesisfromgoodexamples . In : MuggletonSed . InductiveLogicProgramming . London : AcademicPress , 1992.113 ～ 127 
 1998 - 05 - 29 收到 原稿 
 1998 - 08 - 25 收到 修改稿 
