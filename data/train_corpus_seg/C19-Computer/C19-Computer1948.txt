微型机 与 应用 
 MICROCOMPUTER & ITSAPPLICATIONS 
 1999 年 第 18 卷 第 1 期 Vol.18 No.11999 
 
 
 
 一种 在 关系数据库 中图 的 表示 及 遍历 方法 
 邵 远升 
 　 　 摘 　 要 ： 针对 在 数据库 应用程序 中 经常 遇到 的 一类 查询 ， 提出 了 1 种 在 关系数据库 中 对 图 进行 表示 和 遍历 的 方法 ， 并 使用 MSSQLServer6.5 的 T - SQL 语言 实现 了 遍历 过程 。 
 　 　 关键词 ： 关系数据库 　 图 的 遍历 　 SQL 语言 
 　 　 目前 ， 大多数 应用程序 都 涉及 数据库 的 应用 ， 在 对 数据库 进行 查询 时 经常 会 遇到 一类 较为 复杂 的 问题 。 例如 ， 已知 各 城市 之间 的 航班 ， 现要 查出 从 某 一 城市 到达 另 一 城市 的 所有 路径 。 这 类 查询 从 本质 上 来看 涉及 求解 图 的 连通性 和 求 关键 线路 等 问题 ， 其 基础 是 对 图 的 遍历 。 对图 的 遍历 一般 要 应用 高级 语言 的 指针 和 特殊 的 数据结构 来 实现 。 这 在 大多数 数据库 应用程序 开发工具 中 实现 起来 比较 困难 。 本文 针对 这一 问题 提出 了 1 种 在 关系数据库 中 表示 图 的 方法 ， 以及 利用 标准 的 SQL 语言 对 其 进行 遍历 的 算法 ， 并 通过 一 实例 说明 。 
 1 　 图 的 表示 及 遍历 
 　 　 1 . 图 的 表示 
 　 　 本文 以 有向图 为例 ， 无向 图则 可以 表示 为 双向 的 有向图 。 传统 上 对 图 的 表示 一般 采用 数组 或 邻接 表等 多种 方式 ， 但 在 关系数据库 中 只能 以 二维 表 的 形式 来 存储 数据 。 因此 本文 提出 的 方法 是 将 图 表示 为 2 个 二维 表 ， 1 个 是 节点 表 ( node ) ， 包括 节点 名 nodename 、 节点 信息 nodeinfo 和 是否 为根 节点 ynroot ( 根 节点 为 1 ， 其他 为 0 ， 无向 图 全为 1 ) 3 个 字 段 ； 另 1 个 是 与 弧 有关 的 弧表 ( arc ) ， 包括 起始 节点 startnode 、 终止 节点 endnode 和 与 弧 有关 的 信息 arcinfo3 个 字 段 。 表 结构 如表 1 、 表 2 所示 。 
 表 1 　 node 表 结构 
 
 nodenamenodeinfoynroot 
 charcharint 
 
 表 2 　 arc 表 结构 
 
 startnodeendnodearcinfo 
 charcharchar 
 
 　 　 2 . 图 的 遍历 
 　 　 以 深度 优先 搜索算法 为例 ， 给出 算法 流程图 ， 如图 1 所示 。 其中 用到 2 个 临时 表 stack 和 list , stack 作为 堆栈 使用 ， 临时 存放 返回 点 ， list 记录 已 访问 过 的 节点 。 stack 表中 包含 nodename 和 glevel2 个 字 段 ， list 表中 包含 nodename 和 sequence2 个 字 段 。 
 
 图 1 　 算法 流程图 
 2 　 实例 
 　 　 以图 2 中 的 有向图 为例 ， 该图 在 数据库 中 存储 为表 3 和表 4 。 
 
 图 2 　 有向图 
 表 3 　 node 表 
 
 nodenameynroot 
 a1 
 b0 
 c0 
 d0 
 e0 
 f0 
 g0 
 h0 
 
 表 4 　 Arc 表 
 
 startnodeendnode 
 ab 
 ac 
 bd 
 dg 
 dh 
 cf 
 eb 
 he 
 
 　 　 本文 采用 MSSQLServer6.5 的 T - SQL 语言 编写 过程 对图 2 进行 遍历 。 具体 程序 如下 ： 
 setnocounton 
 declare @ iint , @ jint , @ nodenamechar ( 1 ) 
 createtable # stack ( nodechar ( 1 ) , glevelint ) 
 createtable # list ( nodechar ( 1 ) , sequenceint ) 
 insertinto # stackselect * fromnodewhereynroot = 1 
 select @ i = 1 
 select @ j = 1 
 while @ i > 0 
 begin 
 　 　 ifexists ( select * from # stackwhereglevel = @ i ) 
 　 　 　 begin 
 　 　 　 select @ nodename = node 
 　 　 　 from # stackwhereglevel = @ i 
 　 　 　 deletefrom # stackwhereglevel = @ iandnode = @ nodename 
 　 　 　 ifexists ( select * from # listwherenode = @ nodename ) 
 　 　 　 　 continue 
 　 　 　 　 　 insert # listvalues ( @ nodename , @ j ) 
 　 　 　 select @ j = @ j + 1 
 　 　 　 insert # stack 
 　 　 　 selectendnode , @ i + 1 
 　 　 　 fromarcwherestartnode = @ nodename 
 　 　 　 if @ @ rowcount > 0 
 　 　 　 　 select @ i = @ i + 1 
 　 　 　 end 
 　 　 　 else 
 　 　 　 　 select @ i = @ i - 1 
 end 
 select * from # list 
 　 　 遍历 结果 如图 3 ： 
 　 　 node 　 sequence 
 　 　 — — 　 — — — 
 　 　 a 　 　 1 
 　 　 b 　 　 2 
 　 　 d 　 　 3 
 　 　 g 　 　 4 
 　 　 h 　 　 5 
 　 　 e 　 　 6 
 　 　 c 　 　 7 
 　 　 f 　 　 8 
 图 3 　 遍历 结果 
 　 　 综上所述 ， 本 方法 使用 简单 的 数据结构 和 标准 的 SQL 语言 实现 了 对 图 的 遍历 ， 对于 解决 实际 中 遇到 的 复杂 查询 问题 有 一定 的 参考价值 。 
 作者 单位 ： 天津大学 管理 学院 947 # ( 300072 ) 
 参考文献 
 　 1 　 严蔚敏 ， 吴 伟民 . 数据结构 . 北京 ： 清华大学出版社 ， 1992 
 　 2 　 MicrosoftCorporation . MicrosoftSQLSERVERDatabaseDeveloper ' sCompanion . 
 ( 收稿 日期 ： 1998 - 07 - 25 ) 
