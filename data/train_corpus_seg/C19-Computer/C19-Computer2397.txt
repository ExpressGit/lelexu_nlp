计算机 研究 与 发展 
 JOURNALOFCOMPUTERRESEARCHANDDEVELOPMENT 
 1999 年 　 第 36 卷 　 第 10 期 　 Vol.36 　 No.10 　 1999 
 
 
 
 单向 链路 邻接 发现 和 路径 生成 的 研究 
 潘 建平 　 顾 冠群 
 　 　 摘 　 要 　 单向 链路 和 不 对称 应用 需求 的 出现 使得 传统 的 网络 路由 算法 和 协议 不再 适用 . 隧道 封装 和 路由 修改 是 解决 近期 双向 连通 网络 添加 单向 链路 所 面临 问题 的 常用 方法 ， 但 仍 无法 适合 完全 单向 链路 网络 的 远期 目标 . 文中 首先 给出 网络 和 路由 的 定义 和 表示 ； 再 提出 基于 有 界 扩散 的 邻接 发现 算法 ， 并 证明 某 一回 路 穿越 特定 链路 次数 的 上界 ； 然后 提出 基于 邻接矩阵 的 路径 生成 算法 ， 并 给出 实例 分析 以 验证 上述 算法 的 正确性 . 
 　 　 关键词 　 计算机网络 ， 网络协议 ， 路由 算法 
 　 　 中图法 分类号 　 TP393 
 RESEARCHONNEIGHBORDISCOVERYAND 
 PATHGENERATIONFORUNIDIRECTIONALLINKS 
 PANJian - PingandGUGuan - Qun 
 ( DepartmentofComputerScience , SoutheastUniversity , Nanjing210096 ) 
 　 　 Abstract 　 Withtheemergenceofunidirectionallinksandasymmetricapplicationsrequirements , traditionalroutingalgorithmsandprotocolsforbi - directionalandsymmetriclinksarefacingsomeseverechallenges . Tunnelencapsulationandroutemodificationaretwocommonsolutionstotheshort - termscenariowheresomeunidirectionallinksareaddedintotheconnectedbi - directionalnetworks , buttheyalsofailtomeetthelong - termscenariowhereonlyunidirectionallinksareavailable . Followingthedefinitionofgraphtopologyandnetworkrouting , aboundedneighbordiscoveryalgorithmisproposed , andtheupperboundontripsofanyloopcrossingonespecifiedlinksisproved . Apathgenerationalgorithmbasedontheneighbor / pathmatrixisalsopresentedandvalidatedbysomeexamples . 
 　 　 Keywords 　 computernetwork , networkprotocol , routingalgorithm 
 1 　 研究 背景 
 　 　 传统 的 路由 算法 和 协议 总是 显式 或 隐式 地 要求 下层 物理 链路 具有 双向 传输 能力 ， 通常 称为 双向 链路 ( bi - directionallink , BDL ) 路由 . 基于 距离 向量 的 RIP [ 1 ] 路由 协议 ， 若 结点 a 与 b 相邻 ， 且 b 到 c 的 距离 为 x ， a 就 认为 a 到 c 的 距离 为 x + 1 . 基于 链路 状态 的 OSPF [ 2 ] 协议 ， 则 需要 邻接 结点 对称 地 进行 应答 以 保证 路由 信息 可靠 传输 . 
 　 　 新 的 应用 需求 和 传输服务 使得 上述 假设 的 合理性 在 某些 场合 不再 适用 . 对 Web 浏览 或 文件传输 等 应用 ， 大量 的 数据 从 服务器 下载 到 客户端 ， 反向 仅 有 少量 数据 应答 ， 用户 回路 的 应用 需求 并非 总是 对称 的 . 卫星 信道 具有 大 带宽 覆盖 广 的 特点 ， 但 地面 发射 设备 的 代价 要 远大于 接收 设备 ， 对 移动 或 个体 用户 ， 仅 携带 接收 设备 更 合适 . xDSL 和 CableModem 通常 提供 非对称 传输 信道 以 提高 利用效率 . 传统 路由 算法 和 协议 在 单向 链路 ( uni - directionallink , UDL ) 就 无法 正常 工作 ， 如 RIP 的 距离 计算 和 OSPF 的 可靠 应答 . 此外 单向 链路 还会 对 多点 投递 [ 3 ] 、 资源管理 甚至 运输 协议 造成 影响 . 这里 着重 研究 网络 路由 的 问题 . 
 　 　 近期 出现 的 网络拓扑 是 在 连通 BDL 网络 添加 一些 UDL 链路 [ 4 , 5 ] ， 解决 方法 有 隧道 封装 [ 6 ] 和 路由 修改 [ 7 ] 两种 . 前者 建立 UDL 虚拟 的 反向 回路 来 构造 BDL ， 以 避免 沿途 路由 的 修改 ， 但 缺乏 灵活性 和 可扩展性 ； 后者 主要 针对 RIP 协议 ， 但 需要 修改 传统 的 路由 算法 和 协议 . 远期 需要 解决 的 网络拓扑 [ 8 ] 是 全 UDL 连通 网络 ( 一条 BDL 等同 两条 相向 UDL ) ， 显然 ， 现有 或 改进 的 路由 算法 和 协议 都 不能 适合 这种 场合 [ 8 , 9 ] . 我们 先对 网络 路由 进行 严格 定义 和 描述 ， 再 研究 其中 关键 的 连接 发现 和 路径 生成 两个 问题 ， 并 得到 了 一些 有 意义 的 结论 . 
 2 　 问题 表示 
 　 　 图 1 是 UDL 构成 的 连通 网络 ， 可 表示 成图 G = ( V , E ) ， 其中 结点 集合 V = { a , b , c , d , e , f } ， 有 向 边 的 集合 E = { 〈 a , b 〉 , 〈 c , b 〉 , 〈 d , a 〉 , 〈 b , e 〉 , 〈 f , c 〉 , 〈 e , d 〉 , 〈 e , f 〉 } ， 〈 u , v 〉 表示 从 结点 u 到 v 的 有 向 边 . 此外 C : E → Rm 是从 E 到 m 维 实数 域 R 的 映射 ， 表示 每个 链路 所 对应 的 度量 ( 有 m 个 因素 ) . u1 和 un 路径 ( 〈 u1 , u2 〉 , 〈 u2 , u3 〉 , … , 〈 un - 1 , un 〉 ) ( 简记 为 ( u1 , u2 , … , un ) ) 的 集合 记作 R1n . ‖ R1n ‖ 是 路径 个数 . 
 
 
 图 1 　 一个 UDL 网络 
 　 　 路由 问题 可 表示 为 给定 图 G = ( V , E ) 及其 映射 C ， 任取 v1 , v2 ∈ V ， 获得 Rv1v2 和 Rv2v1 ， 依据 C 的 度量 约束 ， 挑选 某个 ( 或 某些 ) 特定 的 rv1v2 和 rv2v1 构成 回路 . 上述 描述 蕴含 每个 结点 都 有 图 的 完整 拓扑 ， 若无此 约束 ， 仅能 得到 Rv1v2 和 Rv2v1 的 子集 . 此外 回路 v1v2v1 和 v2v1v2 并 没有 必要 对称 ， 回路 v1v2v1 的 集合 记作 Lv1v2v1 = Rv1v2 × Rv2v1 . 
 　 　 对 多点 投递 源 f 和 宿 集合 S = ( s1 , s2 , … ) ， RfS 定义 为 超集 { Rfs1 , Rfs2 , … } ， RSf 则 为 { Rs1f , Rs2f , … } . 依据 C 的 度量 约束 ， 多点 路由 挑选 一组 特定 的 { { rfs1 , rs1f } , { rfs2 , rs2f } , … } 构成 f 与 任一 si 的 回路 . 多点 投递 仅 定义 fsif 的 回路 ， 因为 仅 有 从源 到 宿 的 数据流 . 在 大多数 情况 RfS 构成 一棵 以 f 为根 、 si 为叶 或 中间 结点 的 有 向 扩散 树 . 
 3 　 邻接 发现 
 　 　 邻接 发现 对 BDL 是 显而易见 的 ( 〈 a , b 〉 〈 b , a 〉 ) ， 但 对 UDL 却是 很大 的 困难 ( 蕴含 条件 不再 成立 ) . 特别 是 邻接 信息 和 路径 生成 会 重复 穿越 某一 特定 单向 链路 ( 如图 1 ， 若 从 a 到达 f 再 返回 到 a ， 即 afa = ( a , b , e , f , c , b , e , d , a ) ， 就 需 穿越 链路 〈 b , e 〉 两次 ) ； 而 BDL 决不 重复 以 同一 方向 穿越 某一 链路 . 所幸 的 是 我们 能 证明 重复 穿越 具有 上界 . 
 3.1 　 穿越 上 界 
 　 　 给定 UDL 图 G = ( V , E ) ， 及 回路 uvu = ( 〈 u , u2 〉 , … , 〈 , v 〉 , 〈 v , 〉 … , 〈 un - 1 , un 〉 ) ， 需要 证明 的 是 若 任取 〈 x , y 〉 { 〈 u , u2 〉 , … , 〈 , v 〉 , 〈 v , 〉 … , 〈 un - 1 , un 〉 } ， 〈 x , y 〉 在 ( 〈 u , u2 〉 , … , 〈 , v 〉 , 〈 v , 〉 … , 〈 un - 1 , un 〉 ) 出现 次数 为 m ， 存在 与 图 G 和 回路 L 无关 的 整数 M ， 使 m ≤ M ( 如 等 号 成立 ， 则 M 为 上 确界 ) . 
 　 　 定义 1 . ( 冗余 路径 ) 　 对于 uv = ( 〈 u , u2 〉 , 〈 u2 , u3 〉 , … , 〈 un - 1 , v 〉 ) ∈ Ruv ， 如果 有 { 〈 u , u2 〉 , 〈 u2 , u3 〉 , … , 〈 un - 1 , v 〉 } - { 〈 x , y 〉 } ∈ Ruv ， 则 uv 是 冗余 路径 ； 反之 则 为 无 冗余 路径 . 类似 定义 冗余 回路 . 
 　 　 引理 1 . 若 〈 u , y 〉 ∈ { 〈 u , y 〉 , 〈 u2 , u3 〉 , … , 〈 un - 1 , v 〉 } ， 则 〈 u , y 〉 可仅 在 uv 出现 1 次 . 
 　 　 证明 . 不失 一般性 ， 〈 u , y 〉 在 uv = ( 〈 u , y 〉 , … , 〈 u , y 〉 i , … , 〈 un - 1 , v 〉 ) 的 最后 一次 出现 为 〈 u , y 〉 i . 则 ( 〈 u , y 〉 i , … , 〈 un - 1 , v 〉 ) ∈ Ruv ， 且 由 冗余 路径 的 定义 等价 于 原有 的 uv . 
 　 　 引理 2 . 若 〈 x , v 〉 ∈ { 〈 u , u2 〉 , 〈 u2 , u3 〉 , … , 〈 x , v 〉 } ， 则 〈 x , v 〉 可仅 在 uv 出现 1 次 . 
 　 　 证明 . 不失 一般性 ， 〈 x , v 〉 在 uv = ( 〈 u , u2 〉 , … , 〈 x , v 〉 j , … , 〈 x , v 〉 ) 的 最前 一次 出现 为 〈 x , v 〉 j . 则 ( 〈 u , u2 〉 , … , 〈 x , v 〉 j ) ∈ Ruv ， 且 由 冗余 路径 的 定义 等价 于 原有 的 uv . 
 　 　 引理 3 . 若 〈 x , y 〉 ∈ { 〈 u , u2 〉 , … , 〈 x , y 〉 , … , 〈 un - 1 , v 〉 } ， 则 〈 x , y 〉 可仅 在 uv 出现 1 次 . 
 　 　 证明 . 不失 一般性 ， 〈 x , y 〉 在 uv = ( 〈 u , u2 〉 , … , 〈 x , y 〉 i , … , 〈 x , y 〉 j , 〈 x ′ , y ′ 〉 j + 1 , … , 〈 un - 1 , v 〉 ) 的 最前 和 最后 一次 出现 分别 为 〈 x , y 〉 i 和 〈 x , y 〉 j . 则 ( 〈 u , u2 〉 , … , 〈 x , y 〉 i , 〈 x ′ , y ′ 〉 j + 1 , … , 〈 un - 1 , v 〉 ) ∈ Ruv ， 并且 根据 冗余 路径 的 定义 等价 于 原有 的 uv . 
 　 　 任一 uvu 由 uv 和 vu 构成 ， 即 〈 u , y 〉 〈 x , v 〉 〈 v , y 〉 〈 x , u 〉 仅 在 uvu 出现 1 次 . 
 　 　 定理 1 . ( 任一 链路 在 某 一回 路 出现 次数 ) 若 〈 x , y 〉 且 { x , y } - { u , v } = { x , y } ( 即 { x , y } 不 包含 u 或 v ) ， 若 〈 x , y 〉 ∈ { 〈 u , u2 〉 , … , 〈 , v 〉 , 〈 v , 〉 , … , 〈 un - 1 , u 〉 } ， 则 〈 x , y 〉 最多 在 uvu 出现 2 次 . 
 　 　 证明 . ( 用 反证法 ) 不妨 假设 〈 x , y 〉 在 uvu 出现 3 次 . 
 　 　 根据 引理 1 ～ 3 ， 〈 s , v 〉 或 〈 v , t 〉 仅 在 uvu 出现 1 次 ， 则 v 将 uvu 分割 成 2 个 部分 ， 分别 为 { 〈 u , u2 〉 , … , 〈 s , v 〉 } 和 { 〈 v , t 〉 , … , 〈 un - 1 , u 〉 } . 如果 假设 〈 x , y 〉 在 uvu 出现 3 次 ， 则 根据 “ 抽屉 原则 ” ， 则 { 〈 u , u2 〉 , … , 〈 s , v 〉 } 或 { 〈 v , t 〉 , … , 〈 un - 1 , u 〉 } 至少 有 一个 含有 2 个 以上 的 〈 x , y 〉 . 不失 一般性 ， 不妨 假设 { 〈 u , u2 〉 , … , 〈 x , y 〉 i , … , 〈 x , y 〉 j , 〈 w , z 〉 j + 1 , … 〈 s , v 〉 } 含有 2 个 〈 x , y 〉 . 根据 冗余 路径 的 定义 ， ( ( 〈 u , u2 〉 , … , 〈 x , y 〉 j , 〈 w , z 〉 j + 1 , … 〈 s , v 〉 ) , ( 〈 v , t 〉 , … , 〈 un - 1 , u 〉 ) ) ∈ Luvu 等价 uvu . 
 　 　 有限 次 使用 上述 法则 ， 可以 保证 任一 〈 x , y 〉 最多 在 uvu 出现 2 次 . 图 1 又 说明 某一 链路 出现 2 次 是 完全必要 的 ( 对于 〈 b , e 〉 在 回路 afa 必须 出现 2 次 ) . 
 　 　 综上所述 ， 任一 UDL 链路 在 某 一回 路 从 出现 的 次数 的 上 确界 为 2 . 
 证毕 . 
 　 　 推论 1 . 若 〈 x , y 〉 且 { x , y } - { u , v } = { x , y } ( 即 { x , y } 不 包含 u 或 v ) ， 若 〈 x , y 〉 在 uvu 出现 2 次 ， 则 可能 出现 的 情况 应该 是 { 〈 u , u2 〉 , … , 〈 x , y 〉 i , … , 〈 , v 〉 , 〈 v , 〉 , … , 〈 x , y 〉 j , … , 〈 un - 1 , u 〉 } . 
 3.2 　 有限 扩散 
 　 　 如图 1 的 a 发现 存在 2 个 网络接口 ， 其中 一个 输出 另 一个 输入 . 初始 时 a 仅 具有 自己 的 接口 信息 ， 并 将 上述 信息 通过 输出 接口 告知 下 一 结点 ( 注意 a 并 不知 b 是 下 一个 结点 ) . b 获得 a 的 接口 信息 后 即 导出 〈 a , b 〉 ， 但 〈 a , b 〉 本身 对 b 的 路由 没有 作用 . b 将 〈 a , b 〉 及其 接口 信息 一起 再 传递 给 下 一 结点 . 类似 地 ， e 在 其 所有 输出 接口 发出 〈 a , b 〉 〈 b , e 〉 及其 接口 信息 . d / f / c 有着 相似 的 过程 . a 从 d 获得 〈 a , b 〉 〈 b , e 〉 〈 e , d 〉 及 〈 d , a 〉 后 可 导出 ab , ae , ad 路径 . 因 上述 信息 和 a 初始 发出 的 信息 ( 蕴含 〈 a , a 〉 ) 不同 ， a 继续 将 链路 和 路径 信息 给 下 一 结点 . b 从 c 获得 〈 a , b 〉 〈 b , e 〉 〈 e , f 〉 〈 f , c 〉 及 〈 c , b 〉 后 可 导出 be , bf , bc ， 与 a 同样 原因 b 将 继续 发出 链路 和 路径 信息 . b 再次 从 a 获得 路由 信息 将 获得 路径 ba ， 结合 a 给出 的 ab ， b 将 获悉 a 和 b 之间 已 形成 回路 ( 此后 也 被 a 获悉 ) . 连接 发现 过程 稳定 后 ， 每个 结点 将 具有 整个 路由 范围 的 拓扑 信息 ， 每个 结点 将 独立 地 进行 路由 计算 与 选择 . 
 　 　 产生 路由 信息 后 ， 结点 间 需要 维持 上述 路由 ， 并 适应 链路 的 动态 特性 ( 如新 的 链路 加入 和 原有 链路 失败 等 ) . 每个 结点 周期性 给 其 下游 结点 Direct - Hello 分组 以 通知 下游 结点 该 结点 及 邻接 链路 的 活性 . 若 下游 结点 在 一段时间 没有 获得 来自 上游 结点 的 Direct - Hello ， 就 认为 该 结点 或 邻接 链路 失败 . 下游 结点 将 扩散 链路 失败 的 消息 给 其 下游 结点 ， 直到 所有 结点 均 获得 此 信息 . 下游 结点 也 通过 周期性 的 Routed - Hello 分组 经过 路由 通知 对应 上游 结点 两者 链路 的 活性 ， 若 上游 结点 在 很长 一段时间 没有 获得 来自 下游 结点 的 Routed - Hello ， 将 认为 两者之间 的 链路 失败 ， 需要 重新 计算 和 选择 路由 ， 并 在 其它 输出 接口 通知 其它 结点 . 如图 1 的 〈 a , b 〉 链路 失败 ， b 没有 收到 Direct - Hello ， 认为 a 或 〈 a , b 〉 失败 ， 将 通知 后继 结点 e ， 类似 f / d / c / a 也 将 获得 上述 信息 . 经过 Routed - Hello ， a 最终 将 获悉 〈 a , b 〉 链路 的 失败 . 除了 b / c / e / f 结点 可能 形成 回路 ， 其它 结点 至少 因为 某个 路径 而 无法 形成 回路 . 新 加入 结点 将 触发 局部 的 邻接 发现 ， 若 某个 结点 得到 新 的 路由 ， 将 传递 给 后继 直到 拓扑 信息 稳定 . 
 4 　 路径 生成 
 4.1 　 路径 矩阵 
 　 　 经过 邻接 发现 以后 ， 每个 结点 能够 获得 整个 网络 的 邻接 信息 ， 以及 相关 的 路由 度量 ， 这里 主要 考虑 邻接 信息 以 生成 路径 . A = ( ai , j ) n , n 是 图 G = ( V , E ) 的 邻接矩阵 ， 当且 仅 当 ai , j = 1 ， 如果 〈 i , j 〉 ∈ E ； 否则 ai , j = 0 ， 其中 n 等于 ‖ V ‖ . ( A ) n , n 和 [ A ] i , j 分别 表示 n × n 的 矩阵 及其 第 ( i , j ) 个 元素 . 经过 邻接 发现 后 ， 每个 结点 都 能 对 〈 i , j 〉 ∈ E 独立 地 进行 判断 . 
 　 　 如果 ai , k = 1 且 ak , j = 1 ， 则 显然 存在 从 i 到 j 的 路径 ( 根据 i 与 k 邻接 且 k 与 j 邻接 ) ， i 到 j 的 距离 为 2 . k 可取 1 ， … ， n 之间 的 任意 一个 结点 标识 ， 则 = bi , j 当且 仅 当 存在 bi , j 个 这样 的 k ， 使得 ai , k = 1 且 ak , j = 1 . 定义 B = A . A = ( bi , j ) n , n = ( ) n , n ， 则 矩阵 B 的 元素 bi , j 表示 从 结点 i 到 结点 j 存在 bi , j 条 距离 为 2 的 路径 . 定义 ∧ ( B ) = ( di , j ) n , n ， 且 di , j = bi , j 若 i = j ； 否则 di , j = 0 ， 即 ∧ ( B ) 为 B 的 对角 矩阵 . 因 ai , i = 0 ， 若 di , i > 0 ， 则 表示 存在 di , i 个 k ， 使 ai , k = 1 且 ak , i = 1 . 定义 2A = B - ∧ ( B ) = A . A - D ( A . A ) ， 若 ［ 2A ］ i , j = 1 则 i 和 j 的 距离 为 2 . 
 　 　 更 高阶 的 kA 除 需要 从 A 和 k - 1A 的 乘积 中 删去 对角线 元素 表示 的 自环外 ， 还应 考虑 由 [ A ] i , m 和 [ k - 1A ] m , j 构成 的 部分 自环 ， 如 [ k - 1A ] m , j 对应 的 路径 已 穿越 过 i . 因此 k - 1A 将 保存 长度 为 k - 1 的 路径 穿越 的 结点 集 k - 1Vi , j . 综上所述 kA 可定义 为 
 
 其中 
 
 　 　 可以 证明 ， [ kA ] i , j 表示 从 结点 i 到 结点 j 存在 [ kA ] i , j 条 距离 为 k 的 无 冗余 路径 ， 且 不 含有 自环 ( 如 abeda ) 和 部分 自环 ( 如 efcbed ) . 
 　 　 定理 2 . ( 简单 路径 ) kA 是 图 G = ( V , E ) 邻接矩阵 A 生成 的 距离 为 k 的 无 冗余 路径 矩阵 . 
 　 　 证明 . ( 使用 对于 k 的 数学 归纳法 ) 
 　 　 ( 1 ) k = 1 ， 结论 显然 成立 . 
 　 　 ( k0 ) 假设 k = k0 时 ， k0A 是 图 G = ( V , E ) 邻接矩阵 A 生成 的 距离 为 k0 的 无 冗余 路径 矩阵 . 
 　 　 ( k0 + 1 ) 当 k = k0 + 1 时 ， 根据 k0 + 1A 定义 ， 考虑 ( i , m , j ) = 1 的 情况 ， k0 + 1A = A . k0A - ∧ ( A . k0A ) , 其中 [ A . k0A ] i , j = 根据 [ k0A ] k , j 是从 结点 k 到 结点 j 存在 [ k0A ] k , j 条 距离 为 k0 的 简单 路径 . 如果 [ A ] i , k = 1 ， 则 从 结点 i 经过 结点 k 到 结点 j 就 有 [ k0A ] k , j 条 距离 为 k0 + 1 的 无 冗余 路径 . k 可取 1 ， … ， n 间 的 任一 结点 标识 ， 就 是从 结点 i 经过 所有 可能 结点 k 到 结点 j 的 距离 为 k0 + 1 的 无 冗余 路径 . k0 + 1A = A . k0A - ∧ ( A . k0A ) 仅 去除 可能 的 自环 ； 若 ( i , m , j ) = 0 则 删去 可能 存在 的 部分 自环 . 综上所述 ， 原 命题 结论 成立 . 
 证毕 . 
 　 　 推论 2 . 若 kA 是 图 G = ( V , E ) 的 无 冗余 路径 矩阵 且 存在 i , j 使得 [ kA ] i , j 〉 0 ， 则 有 k 〈 n . 
 　 　 证明 . 使用 反证法 ， 不妨 假设 k = n 且 存在 i , j 使得 [ kA ] i , j 〉 0 ， 则 有 某条 路径 穿越 n + 1 个 结点 . 
 　 　 但是 图 G 的 结点 数 ‖ V ‖ = n ， 必然 该条 无 冗余 路径 穿越 至少 有 1 个 结点 超过 1 次 ， 矛盾 . 
 4.2 　 回路 生成 
 　 　 通过 路径 矩阵 ， 就 能 获得 集合 Rv1v2 和 Rv2v1 ， 再 根据 Lv1v2v1 = Rv1v2 × Rv2v1 ， 就 可 获得 从 v1 到 v2 回到 v1 的 回路 集合 ， 其中 ‖ Rv1v ‖ = [ A ] v1 , v2 + [ 2A ] v1 , v2 + … + [ nA ] v1 , v2 ， ‖ Rv2v1 ‖ = [ A ] v2 , v1 + [ 2A ] v2 , v1 + … + [ nA ] v2 , v1 ， ‖ Lv1v2v1 ‖ = [ A ] v1 , v2 + [ 2A ] v1 , v2 + … + [ nA ] v1 , v2 ) ( [ A ] v2 , v1 + … + [ nA ] v2 , v1 ) . 也 就是 任意 选择 Rv1v2 和 Rv2v1 各 一条 无 冗余 路径 ， 就 可 构成 一条 从 v1 到 v2 回到 v1 的 回路 ， 需要 指出 的 是 ， 每条 无 冗余 路径 都 不会 两次 穿越 同一 结点 ， 但 两 两 构成 的 回路 就 可能 穿越 某条 特定 链路 2 次 ， 也 就是 可能 穿越 该条 链路 两端 结点 各 两次 . 
 5 　 实例 分析 
 　 　 如图 1 的 UDL 网络 ， 邻接矩阵 和 无 冗余 路径 矩阵 分别 为 
