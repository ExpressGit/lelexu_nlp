计算机 应用 研究 
 APPLICATIONRESERCHOFCOMPUTERS 
 2000Vol.17 　 No.1 　 P.111 - 113 
 
 
 
 
 微机 打印口 中断 方式 编程技术 及 应用 
 郭 福田 　 李从信 　 刘贤梅 
 摘要 根据 C语言 中断 方式 编程 的 方法 ， 结合 打印口 的 中断 功能 ， 讨论 了 如何 通过 中断 方式 对 打印口 编程 ， 并 给出 了 一个 简单 应用 实例 。 
 关键词 打印口 中断 输入输出 ISR 
 1 引言 
 　 　 目前 ， 由于 微机 的 普及 ， 微机 在 数据 采集 及 控制 过程 中 的 应用 越来越 多 ， 而 开发 微机 硬件 接口 是 建立 工业 控制系统 的 主要 工作 。 一种 简单 快捷 的 方法 是 利用 微机 已有 的 接口 ， 如 微机 打印口 ， 可 方便 地 构成 工业 控制 及 数据 采集 系统 [ 1 ] 。 在 工业 控制系统 中 ， 数据 采集 通常 采用 两种 方式 ， 一种 是 查询 方式 ， 另 一种 是 中断 方式 。 对于 实时性 要求 较 高 的 场合 ， 通常 选用 中断 方式 ， 即 有 中断请求 时 ， 暂停 正在 进行 的 程序 ， 转而 执行 想要 做 的 事情 ， 当其 完成 后 ， 程序 又 回到 原 被 中断 处 继续执行 。 下文 讨论 采用 C语言 中断 方式 编程 方法 ， 根据 打印口 接口 原理 ， 以 中断 方式 对 打印口 编程 ， 并 结合 一个 简单 实例 介绍 打印口 中断 方式 编程 的 实现 过程 。 
 2 微机 中断 基础知识 
 　 　 中断 控制 是 计算机技术 的 一个 重要 组成部分 ， 可以 提高 系统 的 实时性 ， 提高 计算机 的 工作效率 。 微机 共 设置 了 256 个 中断 ， 可 分为 三类 ： ( 1 ) 内 中断 ， 即 系统 内部 出错 或者 CPU 遇到 除数 为 零 而 运算 溢出 等 情况 时 ， 需要 立即 处理 的 一类 中断 。 ( 2 ) 外 中断 ( 也 叫 硬 中断 ) ， 是 为 外部设备 向 CPU 申请 中断 服务 而设 的 。 ( 3 ) 软 中断 ， 它 是 有关 硬件 控制 或 完成 某一 常用 子 功能 的 一些 底部 程序 ， 它 一般 是 为 方便 软件 编程人员 而 设计 的 。 无论是 哪 一种 中断 类型 ， 计算机 都 给予 统一 编号 ， 统一 管理 。 计算机 将 每 一个 中断 服务程序 ( interruptserviceroutine ， 下文 简称 ISR ) 入口 地址 按 它们 的 中断 号 顺序 分别 存在 计算机 的 绝对 地址 0x00000 开始 处 。 由于 微机 的 地址 分为 段 地址 和 偏移 地址 两 部分 ， 而段 地址 和 偏移 地址 都 需用 16 位 二进制 表示 ， 所以 每一 中断 程序 的 入口 地址 要 占 4 个 字节 ( 即 中断向量 ) ， 256 个 中断 就要 占用 1024 字节 的 数据 空间 。 此 空间 即 为 中断向量 表 。 当一 中断 发生 时 ， 微机 根据 中断向量 表可 知道 去 哪里 处理 这个 中断 。 中断向量 表中 大部分 内容 在 计算机 启动 时 装入 ， 在 系统 运行 时 可以 对 它 进行 修改 。 中断向量 从 内存 0x00000 开始 ， 即 INT0 占用 0x00000 ， 0x00001 ， 0x00002 ， 0x00003 单元 ， INT1 占用 后 4 个 单元 ， 等等 。 从 INT0x08 开始 的 为 16 个 硬件 中断 ， 与 两个 Intel8259 中断 控制 芯 相连 ， 常记作 IRQ0 ~ IRQ15 ， 即 INT8 对应 于 IRQ0 ， 使用 从 0x0020 开始 的 4 个 单元 ， INT9 对应 于 IRQ1 ， 从 0x0024 开始 ， 等等 。 其中 IRQ7 与 打印机 端口 ( LPT1 ) 相连 。 与 硬件 相关 的 中断向量 表见 图 1 。 
 
 图 1 　 部分 硬件 中断向量 
 　 　 可 利用 debug 检查 IRQ0 到 IRQ7 的 中断向量 表 。 方法 如下 ： 
 - d00000 : 002020 
 B3103B0B732C3B0B - 570070038B3B3B0B 
 ED3B3B0BAC3A3B0B - B7007003F4067000 
 　 　 从 这里 可以 看到 ISR 的 地址 ， 对于 IRQ0 ( INT8 ) 是 0B3B : 10B3 ， 对于 IRQ7 ( INT15 ， 16 进制 表示 为 INT0x0f ) 是 0070 ： 06F4 ， 即当 IRQ7 中断 发生 时 ， 对应 的 中断 为 INT0x0f ， 而且 中断 程序 的 地址 为 0070 ： 06F4 。 
 3 打印口 中断 功能 及 编程技术 
 　 　 下面 先对 打印口 中断 功能 作一 介绍 ， 然后 逐一 介绍 用 C语言 编写 中断 程序 ， 应 注意 的 问题 ： 
 　 　 。 修改 中断向量 表 
 　 　 。 中断 屏蔽 
 　 　 。 IRQ7 产生 控制 
 　 　 。 中断 服务程序 ISR 
 　 　 ( 1 ) 打印口 中断 功能 
 　 　 分析 微机 接口 电路 可知 ， 通过 打印口 的 ACK ( 接收 认可 ) 引脚 可 实现 中断 。 中断 实现 由 打印机接口 卡 和 微机 的 8259 中断 控制器 控制 两级 控制 。 打印机接口 卡 控制 ACK 信号 能否 产生 中断请求 信号 IRQ7 ， 具体 讲 由 控制 口中 第 4 位 决定 ， 当 它 为 1 时 ， 将 使 打印机 的 ACK 反相 驱动 后 ， 成为 中断请求 IRQ7 信号 送入 8259 中断 控制器 [ 2 ] 。 该 位 缺省 为 0 ， 即 通常 不会 产生 IRQ7 。 在 数据 采集 及 控制系统 中 ， 为 提高 系统 的 实时性 ， 常常 需要 采用 中断 方式 ， 这时 ， 可 将 / IRQEnable 设为 1 。 这样 ， 当 ACK 信号 从 1 变为 0 时 ， 将 产生 中断 IRQ7 ， 然后 ， 由 8259 允许 IRQ7 申请 中断 。 例如 ， 在 温度 监视系统 监视 温度 的 过程 中 ， 可以 从 ACK 引脚 输入 一个 中断 信号 。 如 在 图 2 中断 信号 产生 电路 中 ， 当 按钮 S1 按下 时 ， ACK 由 将 1 变为 0 ， 产生 中断 IRQ7 ， 系统 转入 ISR 。 可 在 ISR 中 处理 其它 事情 ， 如 记下 系统 的 时间 和 日期 ， 并 存入 一个 文件 中 ， 完成 这些 工作 后 ， 系统 继续 监视 温度 变化 。 
 　 　 ( 2 ) 修改 中断向量 表 
 　 　 假设 要 使 INT15 中断 发生 时 ， 程序执行 用户 的 irq7 _ int _ serv 中断 程序 。 为 达到 这个 目的 ， 首先 应该 修改 中断向量 表 ， 当然 ， 在 修改 之前 ， 应该 先 保存 原来 的 向量 ， 以便 退出 ISR 时 ， 恢复 原来 的 值 。 
 BorlandC 提供 了 相应 的 功能 ， 如 ： 
 intintlev = 0x0f ; 
 oldfunc = getvect ( intlev ) ; 
 / / 保存 0x0f 的 中断向量 ， 留 恢复 用 
 setvect ( intlev , irq7 _ int _ serv ) ; 
 / / 将 用户 ISR 地址 放入 0x0f 处 
 / / irq7 _ int _ serv 是 用户 ISR 名 
 　 　 将 获得 的 INT0x0f 的 中断向量 存 为 变量 oldfunc ， 然后 设置 INT0x0f 的 入口 地址 为 irq7 _ int _ serv 的 地址 。 一旦 完成 应 恢复 其值 ： 
 setvect ( intlev , oldfunc ) ; 
 　 　 ( 3 ) 中断 屏蔽 
 　 　 中断 可以 被 屏蔽 ， 对 某 一 中断 屏蔽 后 计算机 将 忽略 对 该 中断 的 响应 。 需要 中断 时 可 将 屏蔽 位设 为 Enabled ( 允许 ) ， 即 开放 中断 。 微机 中 端口 0x21 用于 中断 屏蔽 ， 为 开放 某 一个 中断 ， 将 相应 位 清零 ， 但 不要 影响 其它 位 。 如 开放 IRQ7 中断 方法 如下 ： 
 mask = inportb ( 0x21 ) & ~ 0x80 ; 
 / / 取得 原 屏蔽 字 ， 将 第 7 位设 为 0 ， 其它 位 不变 
 outportb ( 0x21 , mask ) ; 
 　 　 这样 ， 当有 来自 IRQ7 的 中断请求 时 ， 程序 将 无条件 地转 到 irq7 _ int _ serv 程序 ( ISR ) 。 在 该 ISR 中 ， 必须 用 下面 命令 结束 中断 ， 即 通知 8259 中断 已 被 处理 了 。 
 outportb ( 0x20 , 0x20 ) ; 
 　 　 在 退出 系统 程序 之前 ， 应该 恢复 系统 的 原始 状态 ， 如 设置 中断 屏蔽 字位 7 为 l 并 恢复 中断 屏蔽 字 ( 禁止 IRQ7 中断 ) ： 
 mask = inportb ( 0x2l ) | 0x80 ; 
 outportb ( 0x21 , mask ) ; 
 setvect ( intlev , oldfunc ) ; 
 　 　 ( 4 ) IRQ7 产生 控制 
 表 l 控制 口中 各位 功能 
 位 76543210 
 功能 保留 保留 保留 / IRQEnable / SelectInInit / AutoFeedStrobe 
 
 　 　 打印口 上 / ACK 信号 能否 产生 IRQ7 ， 由 控制 口中 第 4 位即 / IRQEnable ( 中断 允许 请求 位 ) 控制 ， 参见 表 1 。 要 产生 中断 ， 除 设置 8259 中断 控制器 的 屏蔽 字 允许 IRQ7 中断 外 ， 还 必须 设置 打印机 控制 口 / IRQEnable 位为 1 。 / IRQEnable 为 1 ， 则 当 / ACK 输入 引脚 上 有 负 跳变 时 ， 允许 产生 IRQ7 ； 为 0 则 ACK 输入 不会 产生 IRQ7 。 设置 / IRQEnable 为 1 的 方法 如下 ： 
 mask = inportb ( 0x2l ) & ~ 0x80 ; 
 outportb ( 0x21 , mask ) ; 
 outportb ( CONTROL , inportb ( CONTROL ) | 0x10 ) ; 
 　 　 注意 在 设置 控制 口位 4 为 1 时 ， 其它 位应 保持 不变 。 在 退出 程序 以前 ， 应 将 控制 口位 4 按 原来 位清 0 。 如 ： 
 outportb ( CONTROL ， inportb ( CONTROL ) & ~ 0xl0 ) ; 
 　 　 ( 5 ) 中断 服务程序 ISR 
 　 　 理论 上 ， 可 在 ISR 中 做 任何 事情 ， 例如 ， 外部 事件 要求 中断 时 ， ISR 可 记录 下 系统 时钟 ， 打开 一个 文件 ， 将 这个 时间 和 其它 信息 写入 文件 中 ， 关闭 文件 然后 返回 主程序 。 然而 ， 事实上 ， 在 ISR 中 编程 有 一定 的 限制 ， 可 使用 下述 方法 ： 
 　 　 。 屏蔽 其它 中断 
 　 　 。 在 ISR 中 设置 一个 变量 ， 表明 中断 已经 发生 
 　 　 。 用 outportb ( 0x20 , 0x20 ) 结束 中断 
 　 　 。 开放 中断 
 　 　 当 进入 ISR 时 关闭 中断 后 ， 应 避免 使用 C语言 函数 。 例如 ， 打开 文件 函数 ， C语言 用 中断 方式 与 磁盘 通信 。 因 这时 中断 已经 关闭 ， 系统 无法 响应 而 死机 。 对于 简单 系统 ， 可 使用 上述 设置 中断 发生 变量 的 方法 。 对于 更 复杂 的 情况 ， 可 使用 下述 方法 ： 
 　 　 。 关闭 所有 中断 ： disable ( ) 
 　 　 。 屏蔽 IRQ7 中断 
 　 　 。 outportb ( 0x20 , 0x20 ) 
 　 　 。 允许 所有 中断 ： enable ( ) 
 　 　 。 要 做 的 事情 
 　 　 。 disable ( ) 
 　 　 。 允许 IRQ7 中断 
 　 　 。 enable ( ) 
 　 　 与 前 一种 方法 不同 ， 在 ISR 中 ， 不能 再 进入 IRQ7 中断 ， 但 允许 其它 中断 ， 这样 将 允许 所有 的 C语言 函数 工作 。 
 4 编程 举例 
 　 　 下面 通过 一 具体 程序 TIME _ INT . C 介绍 打印口 中断 方式 编程 的 实现 过程 ， 具体 介绍 见 程序 注释 。 在 该 程序 中 ， 当 中断 发生 时 ， 记录 系统 时间 ， 否则 显示 两次 中断 的 时间差 。 程序 中 用 全局变量 int _ occurred 记录 中断 是否 发生 ， 程序 开始 声明 为 FALSE ， 一旦 中断 发生 ， 将 设置 为 TRUE 。 主程序 中 判断 int _ occurred ， 当 它 为 TRUE 时 ， 计算 两次 中断 的 时间差 。 
 / / 程序 TIME _ INT . 
 / / 用 ISR 记录 打印口 的 中断 发生 ， 中断 由 / ACK 上 低电平 产生 。 
 / / 这里 端口地址 为 0x0378 ， 相关 中断 为 IRQ7 。 
 / / 计算 时间 ， 并 显示 两次 中断 的 时间差 。 
 # include < stdio . h > 
 # include < bios . h > 
 # include < dos . h > 
 # include < sys \ timeb . h > 
 # defineDATA0x0378 
 # defineSTATUSDATA + 1 
 # defineCONTROLDATA + 2 
 # defineTRUE1 
 # defineFALSE0 
 voidopen _ intserv ( void ) ; 
 voidclose _ intserv ( void ) ; 
 voidint _ processed ( void ) ; 
 voidinterruptfarintserv ( void ) ; 
 intintlev = 0x0f ; / / 采用 中断 源 IRQ7 
 voidinterruptfar ( * oldfunc ) ( ) ; 
 intint _ occured = FALSE ; / / 记录 中断 发生 
 intmain ( void ) 
 { 
 　 　 intfirst = FALSE ; 
 　 　 intsecs , msecs ; 
 　 　 structtimebtl , t2 ; 
 　 　 open _ intserv ( ) ; 
 　 　 outportb ( CONTROL , inportb ( CONTROL ) | 0x10 ) ; 
 　 　 / / 设置 控制 口位 4 ( / IRQenable ) 为 ' 1 ' 
 　 　 while ( l ) 
 　 　 { 
 　 　 　 if ( int - occurred ) 
 　 　 　 { 
 　 　 int _ occurred = FALSE ; / / 中断 发生 变量 复位 
 　 　 if ( first = = FALSE ) 
 　 　 / / 取得 第一次 中断 的 时间 
 　 　 { 
 　 　 　 　 　 　 ftime ( & t2 ) ; 
 　 　 　 　 　 　 first = TRUE ; 
 　 　 } 
 　 　 　 　 else 
 　 　 { 
 　 　 　 　 　 tl = t2 ; / / 保存 第一次 中断 时间 
 　 　 　 　 　 ftime ( & t2 ) ; / / 计算 时间差 
 　 　 　 　 　 secs = t2 . time - t1 . time ; 
 　 　 　 　 　 msecs = t2 . millitm - t1 . millitm ; 
 　 　 　 　 　 if ( msecs < 0 ) 
 　 　 　 　 　 { 
 　 　 　 　 　 　 　 - - secs ; 
 　 　 　 　 　 　 　 msecs = msecs + 1000 ; 
 　 　 　 　 　 } 
 　 　 　 　 　 　 　 printf ( " 中断 时间差 ： % d \ n " , 1000 * secs + msecs ) ; 
 　 　 　 　 　 } 
 　 　 } 
 } 
 close _ intserv ( ) ; 
 return ( 0 ) ; 
 } 
 　 　 voidinterruptfarintserv ( void ) 
 　 　 / / 在 ISR 中 ， 必须 清除 中断 源 ， 并 清 8259 
 　 　 { 
 　 　 　 　 disable ( ) ; 
 　 　 　 　 int _ processed ( ) ; / / 通知 8259 中断 结束 
 　 　 　 　 int _ occurred = TRUE ; / / 记录 中断 发生 了 
 　 　 　 　 enable ( ) ; 
 　 　 } 
 voidopen _ intserv ( void ) 
 / / 允许 IRQ7 中断 。 中断 发生 ( / ACK 为 低 ) 时 跳 到 intserv 
 / / 注意 ： 设置 时 关闭 中断 ， 设置 后 开放 中断 
 { 
 　 　 intint _ mask ; 
 　 　 disable ( ) ; / / 关闭 所有 的 中断 
 　 　 oldfunc = getvect ( intlev ) ; / / 保存 原 中断向量 
 　 　 setvect ( intlev , intserv ) ; / / 建立 新 中断向量 
 　 　 int _ mask = inportb ( 0x21 ) ; / / 读取 中断 屏蔽 字 
 　 　 outportb ( 0x21 , int _ mask & ~ 0x80 ) ; 
 　 　 　 　 / / 设置 位 7 为 0 ， 允许 IRQ7 ， 而 其它 位 不变 
 　 　 enable ( ) ; / / 开放 所有 的 中断 
 } 
 voidclose _ intserv ( void ) 
 / / 关闭 IRQ7 中断 
 { 
 　 　 intint _ mask ; 
 　 　 disable ( ) ; 
 　 　 setvect ( intlev , oldfunc ) ; / / 恢复原 中断向量 
 　 　 int _ mask = inportb ( 0x21 ) | 0x80 ; 
 　 　 / / 设置 位 7 为 1 ， 禁止 IRQ7 ， 而 其它 位 不变 
 　 　 outportb ( 0x21 , int _ mask ) ; 
 　 　 enable ( ) 
 } 
 voidint _ processed ( void ) 
 / / 通知 8259 中断 结束 
 { 
 　 　 outportb ( 0x20 , 0x20 ) ; 
 } 
 5 小结 
 　 　 通过 前面 的 介绍 ， 在 初学者 看来 ， 很难 掌握 的 中断 编程 ， 事实上 十分 简单 。 本文 主要 讨论 了 在 打印口 中 使用 中断 的 技术 ， 通过 此 技术 可 将 打印口 用于 各种 数据 采集 及 控制 项目 中 。 另外 ， 本文 采用 的 中断 编程 方法 同样 可 用于 ISA 总线 上 的 中断 ， 即 通过 数据 采集 板 进行 控制 的 系统 中 。 
 郭 福田 （ 大庆 石油学院 计算机系 黑龙江 安达 151400 ） 　 
 李从信 （ 大庆 石油学院 计算机系 黑龙江 安达 151400 ） 　 
 刘贤梅 （ 大庆 油 学院 计算机系 黑龙江 安达 151400 ） 
 参考文献 
 1 ， 张利 . PC机 打印口 的 原理 及 应用 开发 . 清华大学出版社 , 1996 
 2 ， 张昆藏 . IBM 微型 计算机 接口技术 . 清华大学出版社 , 1991 
 收稿 日期 ： 1999 年 7 月 7 日 
