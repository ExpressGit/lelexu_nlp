微型机 与 应用 
 MICROCOMPUTER & ITSAPPLICATIONS 
 2000 　 Vol.19 　 No.4 　 P.21 - 23 
 
 
 
 用 87C196CA 实现 CAN 总线 通信 的 方法 
 程军 
 摘要 ： 用 Ｉ ｎ ｔ ｅ ｌ ８ ７ Ｃ １ ９ ６ Ｃ Ａ 单片机 实现 Ｃ Ａ Ｎ 总线 通信 ， 本文 主要 介绍 了 它 的 软件 实现 方法 。 
 关键词 ： １ ６ 位 单片机 软件 Ｃ Ａ Ｎ 总线 通信 
 　 　 在 Intel16 位 单片机 中 87C196CA ／ CB 二种 单片机 集成 了 CAN 总线 通信 控制器 。 它 可以 支持 高速 串行 通信协议 CAN2 ． 0B ， 即 支持 标准 和 扩展 模式 的 通信协议 ， 它 类似 于 80C196 系列 单片机 集成 82527CAN 控制器 的 功能 ， 87C196CA 与 87C196CB 的 差别 仅 在于 内存 的 配置 方面 ， 在 CAN 控制器 方面 都 是 相同 的 。 本文 介绍 用 87C196CA 实现 CAN 通信 的 具体方法 。 
 1 　 CAN 控制器 基本 结构 
 　 　 在 87C196CA 中有 256B 的 RAM 空间 用于 CAN 总线 串行 通信 ， 地址 范围 为 1E00 ～ 1EFF ， 内存地址 分布 如表 1 所示 。 CAN 控制器 由 信息 体 、 定时器 、 控制 寄存器 、 状态 寄存器 、 中断 寄存器 、 标准 和 扩展 中断 屏蔽 寄存器 组成 。 下面 分别 加以 介绍 。 
 表 1 　 内存地址 分布 
 
 CAN 控制器 地址 图 
 十六进制 地址 　 十六进制 地址 　 
 1EFF — 1E6F — 
 1EF0 ～ 1EFE 信息 体 151E60 ～ 1E6E 信息 体 6 
 1EEF — 1E5F 中断 寄存器 
 1EE0 ～ 1EDE 信息 体 141E50 ～ 1E5E 信息 体 5 
 1EDF — 1E4F 位 定时 寄存器 0 
 1ED0 ～ 1EDE 信息 体 131E40 ～ 1E4E 信息 体 4 
 1ECF — 1E3F 位 定时 寄存器 0 
 1EC0 ～ 1ECE 信息 体 121E30 ～ 1E3E 信息 体 3 
 1EBF — 1E2F — 
 1EB0 ～ 1EBE 信息 体 111E20 ～ 1E2E 信息 体 2 
 1EAF — 1E1F — 
 1EA0 ～ 1EAE 信息 体 101E10 ～ 1E1E 信息 体 1 
 1E9F — 1E0C ～ 1E0F 信息 体 15 屏蔽 寄存器 
 1E90 ～ 1E9E 信息 体 91E08 ～ 1E0B 扩展 屏蔽 寄存器 
 1E8F — 1E06 ～ 1E07 标准 屏蔽 寄存器 
 1E80 ～ 1E8E 信息 体 81E02 ～ 1E05 — 
 1E7F — 1E01 状态 寄存器 
 1E70 ～ 1E7E 信息 体 71E00 控制 寄存器 
 
 1 ． 1 信息 体 
 　 　 共有 15 个 信息 体 （ MessageObject ） ， 主要 用于 发送 和 接收数据 的 存储器 。 每 1 个 信息 体由 15B 组成 ， 其 结构 如表 2 所示 ， 它 由 控制 位 、 辨识 位 、 配置 位 和 数据位 组成 。 信息 体 0 ～ 14 既 可 用于 发送 ， 也 可 用于 接收 信息 体 ， 信息 体 15 仅 接收 信息 体 ， 0 ～ 14 只有 1 个 缓冲区 。 下面 分别 加以 描述 。 
 表 2 　 信息结构 
 
 十六进制 内容 描述 
 1Ex7 ～ 1ExE 数据位 0 ～ 7 
 1Ex6 信息 配置 
 1Ex2 ～ 1Ex5 信息 识别器 0 ～ 3 
 1Ex0 ～ 1Ex1 信息 控制 0 ～ 1 
 注 ： x 表示 信息 体数 （ 用 十六进制 表示 ） 
 
 　 　 （ 1 ） 控制 位 ： 由 2 个 控制 寄存器 构成 ， 即 CAN ＿ MSG × CON0 和 CAN ＿ MSG × CON1 ， 0 控制 寄存器 用于 定义 发送 接收 中断 、 中断 悬挂 、 信息 体 有效 功能 。 1 控制 寄存器 用于 定义 发送 请求 、 远程 请求 悬挂 、 数据 复盖 等 功能 。 
 　 　 （ 2 ） 数据位 ： 用于 存放 接收 和 发送 的 数据 ， 最 多 只能 存放 8 个 数据 ， 所 发送 的 数据 必须 与 在 配置 位 （ DLC ） 所 定义 的 数据 长度 相同 。 
 　 　 （ 3 ） 配置 位 ： 用于 定义 传送 或 接收数据 的 长度 ， 有效值 为 0 ～ 8 ， 它 指 信息 体 本身 所 含有 的 数据 ， 同时 它 还 定义 方向 ， 即 接收 还是 发送 、 定义 标准 模式 还是 扩展 模式 。 
 　 　 （ 4 ） 辨识 位 ： 由 4B 组成 ， 用于 定义 辨识 代码 组合 ， 这样 就 可以 辨识 出 不同 的 信息 进行 接收 与 发送 。 
 1 ． 2 位 定时器 （ CAN ＿ BTIME0 ， CAN ＿ BTIME1 ） 
 　 　 位 定时器 主要 用于 定义 CAN 总线 通信 的 速率 ， 对 同一个 网络 总线 上 各个 节点 应 定义 同 一种 通信 速率 ， 否则 无法 进行 通信联系 。 它 由 CAN ＿ BTIME0 、 CAN ＿ BTIME12 个位 定时器 定义 ， CAN 控制器 的 总线 工作频率 可由 下式 计算 ： 
 
 　 　 f ＝ Fosc — — 系统 时钟 频率 。 
 　 　 BRP — — 在位 定时器 中 的 TSEG1 域 中 的 值 ， 取值 范围 0 ～ 63 。 
 　 　 TSEG1 — — 在位 定时器 1 中 的 TSEG1 域 中 的 值 ， 取值 范围 2 ～ 15 。 
 　 　 TSEG2 — — 在位 定时器 1 中 的 TSEG2 域 中 的 值 ， 取值 范围 1 ～ 7 。 
 　 　 例如 当 定义 1 个 250Kb ／ s 的 通信 频率 时 ， 则 可以 设置 ： 
 　 　 CAN ＿ BTIME0 ＝ 0x41 （ BRP ＝ 1 ） CAN ＿ BTIME1 ＝ 0x67 （ TSEG2 ＝ 6 、 TSEG1 ＝ 7 ） 
 　 　 当 系统 时钟 为 16MHz 时 ， CAN 通信 频率 由 上式 计算 得到 250Kb ／ s 。 
 1 ． 3 扩展 屏蔽 寄存器 （ CAN ＿ EGMSK ） 
 　 　 它 与 信息 体 的 辨识 字 是 相似 的 ， 共 4B 、 0 ～ 28 位 ， 某 位置 1 则 要求 接收 到 的 辨识 码 ID 要 与 它 本身 的 辨识 码 一致 ， 如果 某 位置 0 则 屏蔽 了 ID 位 ， 即 它 可以 接收 到 这 一位 为 0 或 1 的 信息 体 的 辨识 码 ， 这 就 形成 1 种 信息 体 的 滤波 方法 ， 即 接收 信息 体 。 通过 扩展 屏蔽 寄存器 的 定义 ， 即 可以 接收 与 它 本身 辨识 码 相同 的 发送信息 体 ， 也 可以 接收 与 它 本身 辨识 码 不同 的 发送信息 体 。 如果 信息 体 辨识 码 与 发送信息 体 辨识 码 匹配 ， 信息 体 也 可以 接收 远程 信息 （ 即 要求 数据 传送 ） ， 远程 信息 体 辨识 码 存储 于 发送信息 体中 ， 复盖 任何 屏蔽 位 。 
 1 ． 4 控制 寄存器 （ CAN ＿ CON ） 
 　 　 它 用于 控制 位 定时器 的 写 允许 、 使能 中断 和 对 CAN 总线 的 接入 ， 其 各位 的 意义 如图 1 所示 。 
 
 图 1 　 控制 寄存器 各位 意义 
 　 　 CCE — — 配置 变化 使能 ， 用于 写位 定时器 。 1 ： 允许 写位 定时器 ； 0 ： 禁止 写位 定时器 。 
 　 　 EIE — — 错误 中断 使能 ， 用于 切断 总线 并发 警告 中断 。 
 　 　 SIE — — 状态 变化 中断 使能 ， 用于 接收 成功 中断 、 发送 成功 中断 和 错误 变化 中断 的 使 能 和 非 使 能 。 
 　 　 IE — — 中断 使能 ， 它 包括 所有 的 中断 ； 错误 状态 变化 、 接收 和 发送 中断 。 
 　 　 INIT — — 软件 初始化 使能 ， 置位 时 则 隔离 CAN 总线 系统 、 停止 系统 的 接收 发送 。 
 1 ． 5CAN 中断 寄存器 （ CAN ＿ INT ） 
 　 　 用于 记录 悬挂 中断 情况 ， 与 悬挂 中断 寄存器 功能 相同 。 它 有 16 个 中断 源 ， 并 必须 与 标准 的 中断 屏蔽 寄存器 烮 NT ＿ MASK1 犠 楹 鲜 褂 茫 琁 NT ＿ MASK1 ． 5 为 它 的 中断 屏蔽 位 。 当 CAN 发生 中断 时 ， 再 由 CAN 中断 寄存器 位来 判断 是 什么 中断 ， 每个 信息 体都 有 1 个 中断 源 ， CAN 状态 寄存器 的 中断 优先级 最高 ， 其次 是 信息 体 15 。 
 1 ． 6CAN 状态 寄存器 （ CAN ＿ STAT ） 
 　 　 如果 状态 变化 产生 中断 ， 软件 可以 读 CAN 的 状态 寄存器 ， 以 决定 哪个 中断 读 请求 源 。 如 切断 CAN 总线 状态 、 警告 状态 、 接收 成功 、 发送 成功 、 错误码 。 
 　 　 由此可见 ， CAN 中断 系统 是 由 多级 中断 构成 的 。 最高级 由 INT ＿ MASK1 定义 CAN 控制器 中断 ， 这 是 由 多个 中断 源 产生 的 ， 通过 CAN 控制 寄存器 CAN ＿ INT 可以 寻找 出 哪个 中断 源 发出 的 中断 ， 其中 的 CAN 状态 寄存器 又 是 1 个 多 中断 源 ， 通过 进一步 判断 状态 寄存器 CAN ＿ STAT 又 可以 进一步 判断 哪 1 个 中断 源 发出 的 中断 。 
 　 　 当 定义 完 信息 体 、 中断 控制 、 屏蔽 控制 时 ， 系统 的 总线 通信 初始化 就 完成 了 ， 将要 传送 到 总线 上 的 数据 写入 信息 体 的 数据 区 就 可以 。 CAN 的 实际 通信 是 由 硬件 来 自动 实施 的 ， 硬件 是 按 信息 帧 格式 来 传递数据 的 。 总线 传送数据 按 信息 帧 来 传送 ， 帧 与 帧 之间 由 3 个 分离 位 （ 为 1 ） 来 分离 ， 没有 信息 帧 时 ， 总线 则 处于 空闲 时间 。 信息 帧 的 格式 如图 2 所示 （ 扩展 模式 ） 。 
 
 图 2 　 信息 帧 格式 
 　 　 SOF ： 信息 帧 起始 ， 低电平 则 标志 信息 帧 开始 。 
 　 　 （ 1 ） 仲裁 域 ： 由 29 位 信息 辨识 器 、 SRR 、 IDE 、 RTR 组成 。 29 位 辨识 器 ： 由 11 位 的 标准 辨识 器 和 18 位 扩展 辨识 器 组成 ， 以 保证 与 标准 CAN 协议 的 兼容 ， 它 由 信息 体 的 辨识 码来 定义 每个 信息 体 的 辨识 码 。 
 　 　 SRR ： 替代 远程 发送 请求 位 ， 始终 为 隐位 1 ， 是 为 兼容 标准 CAN 协议 而 设置 。 
 　 　 RTR ： 远程 发送 请求 位 ， 始终 为 隐位 1 ， 它 由 不带 数据 的 信息 体 形成 。 
 　 　 IDE ： 辨识 器 扩展 位 ， 始终 为 隐位 1 。 
 　 　 （ 2 ） 控制 域 ： 由 保留 位 r0 、 r1 （ 始终 为 显位 0 ） 和 DLC 位 组成 。 DLC 则 是 1 个 由 4 位 表示 的 ， 传递数据 长度 为 0 ～ 8B 。 
 　 　 （ 3 ） 数据 域 ： 它 由 1 ～ 8 个 数据 字节 帧 构成 ， 0 字节 则 表示 1 个 远程 帧 。 
 　 　 （ 4 ） 校验 域 ： 即 CRC 码 ， 它 由 循环 冗余 码 求得 的 帧 检查 序列 组成 。 它 是 1 个 15 位 CRC 码 加上 1 个 限定符 。 
 　 　 （ 5 ） 应答 域 ： 它 由 1 个 节点 接收 帧 发送 的 显位 0 和 1 个 应答 限定符 隐位 1 构成 。 
 　 　 （ 6 ） 结束 帧 ： 即为 7 个 连续 的 隐位 1 标志 信息 帧 的 结束 。 
 　 　 信息 帧 传送 是 按 信息 体 的 地址 从 低 地址 开始 发送 的 ， 所以 低 地址 的 信息 体 ， 即 信息 体 0 有 最高 的 优先权 ， 这 与 辨识 器 无关 。 当 多个 信息 体 发送 为 0 时 ， CAN 控制器 首先 发送 低 地址 的 信息 体 ， 当 多个 信息 体 具备 接收 同一个 信息 体时 ， 低 地址 信息 体 首先 接受 它 ， 例如 当 所有 辨识 位 都 被 屏蔽 时 ， 信息 体 1 接收 所有 的 信息 。 
 2 　 CAN 通信 编程 实现 
 　 　 下面 通过 1 个 程序 来 说明 CAN 通信 的 软件 实现 （ 进行 CAN 通信 首先 进行 初始化 ） 。 程序 如下 ： 
 　 　 can ＿ con ＝ 0x41 ； ／ * CAN 控制器 CCE 位置 1 ， 则 可以 定义 CAN 定时器 * 潱 
 　 　 can ＿ btime0 ＝ 0x41 ； ／ * 定义 CAN 定时器 为 250Kb ／ s * ／ 
 　 　 can ＿ btime1 ＝ 0x67 ； 
 　 　 can ＿ con ＝ 01 ； ／ * 允许 对 CAN 控制器 进行 软件 初始化 * ／ 
 　 　 can ＿ sgmsk ＝ 0x0 ； ／ * 定义 标准 CAN 通信 格式 的 屏蔽 控制 字 ， 所有 位 都 不 滤波 * ／ 
 　 　 can ＿ msg1con0 ＝ 0x55 ； ／ * 信息 体 1 控制器 0 初始化 * ／ 
 　 　 can ＿ msg1con1 ＝ 0x55 ； ／ * 信息 体 1 控制器 1 初始化 * ／ 
 　 　 can ＿ msg1cfg ＝ 0x88 ； ／ * 定义 信息 体 1 为 发送 ， 发送 8B ， 标准 CAN 格式 * ／ 
 　 　 can ＿ msg1id ＝ 0xc8c8c8c8 ； ／ * 信息 体 1 标识 寄存器 初始化 标识符 为 c8c8c8c8 * ／ 
 　 　 can ＿ msg1con0 ＝ 0x95 ； ／ * 信息 体 1 控制器 OMSGVAL 位置 1 ， 标明 信息 体 1 有效 * ／ 
 　 　 can ＿ msg2con0 ＝ 0x55 ； ／ * 信息 体 2 控制器 0 初始化 * ／ 
 　 　 can ＿ msg2con1 ＝ 0x55 ； ／ * 信息 体 2 控制器 1 初始化 * ／ 
 　 　 can ＿ msg2cfg ＝ 0x80 ； ／ * 定义 信息 体 2 为 接收 ， 接收 8B ， 标准 CAN 格式 * ／ 
 　 　 can ＿ msg2id ＝ 0xc8c8c8c8 ； ／ * 信息 体 2 标识 寄存器 初始化 标识符 为 c8c8c8c8 * ／ 
 　 　 can ＿ msg2con0 ＝ 0x95 ； ／ * 信息 体 2 控制器 OMSGVAL 位置 1 ， 标明 信息 体 2 有效 * ／ 
 　 　 can ＿ con ＝ 0x02 ； ／ * CAN 控制器 软件 初始化 完成 * ／ 
 　 　 下面 的 程序 为 发送 8B 数据 ： 
 　 　 can ＿ msg1con1 ＝ 0x5a ； ／ * CPUUPD 置 1 使 软件 刷新 数据 ， NEWDAT 置 1 使 信息 体 有效 * ／ 
 　 　 can ＿ msg1data0 ＝ 0x00 ； ／ * 给 信息 体 1 数据 赋值 * ／ 
 　 　 can ＿ msg1data1 ＝ 0x11 ； 
 　 　 can ＿ msg1data2 ＝ 0x22 ； 
 　 　 can ＿ msg1data3 ＝ 0x33 ； 
 　 　 can ＿ msg1data4 ＝ 0x44 ； 
 　 　 can ＿ msg1data5 ＝ 0x55 ； 
 　 　 can ＿ msg1data6 ＝ 0x66 ； 
 　 　 can ＿ msg1data7 ＝ 0x77 ； 
 　 　 can ＿ msg1con1 ＝ 0x66 ； 　 　 ／ * TXREQ 置 1 使 发送 请求 ， NEWDAT 置 1 使 信息 体 有效 * ／ 
 　 　 此 程序 用 tasking 公司 的 C 编译器 和 连接器 编译 连接 通过 并 运行 ， 在 我们 自行 开发 的 87C196CA 仿真器 上 实现 了 CAN 通信 。 这一 仿真器 采用 PC 总线 ， 将 单片机 的 程序 装入 双口 RAM 中 ， 然后 PC机 控制 单片机 运行 ， 这样 用 2 个 单片机 仿真 卡内 置于 PC 总线 槽内 ， 就 可以 实现 CAN 之间 的 通信 。 
 程军 （ 济南 中国 重汽 技术 中心 250002 ） 
 熓 崭迦 掌冢海 保梗梗 梗 １ ２ － ０ ８ 
