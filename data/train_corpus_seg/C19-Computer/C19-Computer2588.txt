软件 学报 
 JOURNALOFSOFTWARE 
 1999 年 第 10 卷 第 5 期 Vol.10 No.51999 
 
 
 
 基于 超平面 的 块 数据分布 策略 
 杜 建成 　 黄 　 浩 　 郁卫江 　 陈道 蓄 　 谢 　 立 
 摘要 　 文章 提出 了 基于 超平面 的 块 数组 分布 策略 . 这是 一种 单向 的 数组 分布 方法 , 它 以 简单 的 方式 有效 解决 了 不 一致 计算环境 和 不规则 数组 扫描 情况 下 的 数组 分布 问题 . 它 可以 作为 对 传统 方法 的 一个 补充 . 更 重要 的 是 , 此项工作 为 自动 数据分布 提供 了 一种 思路 . 
 关键词 　 数据分布 , 计算 分布 , 不 一致 计算环境 , 超平面 . 
 中图法 分类号 　 TP311 
 Hyperplane - basedBlockDataDistributionStrategy 
 DUJian - cheng 　 HUANGHao 　 YUWei - jiang 　 CHENDao - xu 　 XIELi 
 ( StateKeyLaboratoryforNovelSoftwareTechnology 　 NanjingUniversity 　 Nanjing 　 210093 ) 
 ( DepartmentofComputerScienceandTechnology 　 NanjingUniversity 　 Nanjing 　 210093 ) 
 Abstract 　 Inthispaper , ahyperplane - basedblockdatadistributionstrategyispresentedwhichischaracterizedbytheunidirecteddatadistribution . Thisstrategycansolvethedatadistributionproblemsundertheununiformcomputationalenvironmentsandtheirregulardatareferencemodesimplyandeffectively . Itcanbetakenasasupplementforthetraditionalscheme . Furthermore , thisresearchpresentsanewthoughtfortheautomaticdatadistribution . 
 Keywords 　 Datadistribution , computationdistribution , ununiformcomputationalenvironment , hyperplane . 
 　 　 数据 并行 语言 , 如 FortranD , HPF , Linda 等等 , 都 是 数据 驱动 语言 . 在 分布 存储系统 中 , 由 数据 的 分布 来 决定 计算 的 分布 . 一般来说 , 数据 ( 通常 指数 组 ) 分布 （ distribution ) 包括 3 个 步骤 ： 数组 的 切割 ( partitioning ) 、 对齐 ( alignment ) 和 分配 ( allocation ) . 数组 的 分布 是 由 数组 的 引用 模式 决定 的 . 数组 分布 要 满足 两个 目标 ： 负载平衡 和 驻地 通讯 开销 ( residualcommunication ) 最小 . 驻地 通讯 是 指 某个 处理 结点 由于 引用 了 非 本地 结点 的 数据 而 导致 数据 在 这 两个 结点 之间 的 移动 . 
 　 　 很多 数据 并行 编程 系统 将 数据分布 的 任务 交由 用户 去 完成 , 如 FortranD . FortranD ［ 1 ］ 中 所 提供 的 数组 和 计算 分布 过程 为 ： 首先 由 用户 将 数组 对齐 到 某个 模板 ( template ) 上 , 模板 是 一个 虚拟 的 数组 空间 , 然后 将 该 模板 按 某种 方式 映射 到 各个 处理 结点 上 . 模板 的 映射 方式 有 BLOCK 映射 和 CYCLIC ( m ) 映射 . 
 　 　 当 确定 了 数组 的 分布 之后 就 可以 进行 计算 的 分布 了 . 如果 数组 分布 是 规则 的 , 则 计算 分布 算法 比较简单 , 不规则 的 数组 分布 也 导致 复杂 的 计算 分布 函数 . 传统 的 数据分布 策略 基于 按维 分布 , 不能 很 好 地 处理 不规则 数组 访问 模式 下 的 数据分布 . 本文 提出 基于 超平面 的 块 数据分布 策略 , 能够 以 一种 简单 的 方式 有效 解决 不 一致 计算环境 和 不规则 数组 访问 情况 下 的 数据分布 问题 . 
 1 　 基于 超平面 的 块 数组 分布 策略 
 1.1 　 平行 超平面 
 1.1 . 1 
 循环 模型 
 　 　 我们 考察 如下 的 循环 模型 . 
 　 　 DO / DOALL 　 I0 = L0 ; U0 : S0 
 　 　 　 DO / DOALL 　 I1 = L1 ; U1 : S1 
 　 　 　 ...... 
 　 　 　 　 DO / DOALLIk - 1 = Lk - 1 ; Uk - 1 : Sk - 1 
 　 　 　 　 A0 ( f0 , 0 ( I0 , I1 , ... , Ik - 1 ) , f0 , 1 ( I0 , I1 , ... , Ik - 1 ) , ... , f0 , k - 1 ( I0 , I1 , ... , Ik - 1 ) ) = 
 　 　 　 　 F ( A1 ( f1 , 0 ( I0 , I1 , ... , Ik - 1 ) , f1 , 1 ( I0 , I1 , ... , Ik - 1 ) , ... , f1 , k - 1 ( I0 , I1 , ... , Ik - 1 ) ) , ... , 
 　 　 　 　 Am ( fm , 0 ( I0 , I1 , ... , Ik - 1 ) , fm , 1 ( I0 , I1 , ... , Ik - 1 ) , ... , fm , k - 1 ( I0 , I1 , ... , Ik - 1 ) ) ) 
 其中 fi , n ( 0 ≤ i ≤ m , 0 ≤ n ≤ k - 1 ) 是 形如 a0i , nI0 + a1i , nI1 +...+ ak - 1i , nIk - 1 + aki , n 的 线性 函数 , F 是 关于 Ai ( 1 ≤ i ≤ m ) 的 函数 , 由 fi , n ( 0 ≤ n ≤ k - 1 ) 所 构成 的 函数 空间 为 
 
 简记 为 F ＝ AI ＋ Ak , 很多 科学 和 工程 问题 中 的 计算 都 具有 这种 标准 的 循环 形式 . 
 　 　 一些 常见 的 循环 变换 和 优化 方法 , 如 循环 剥离 （ looppeeling ) 、 循环 分布 ( loopdistribution ) 以及 循环 交换 ( loopinterchange ) 都 有助于 得到 这种 循环 的 标准 形 . 我们 也 把 这种 形式 的 多重 循环 称为 一个 相 ( phase ) . 
 1.1 . 2 　 平行 超平面 
 　 　 设 A 为 k 维 数组 , 其 各维为 x0 , x1 , ... , xk - 1 , A 的 平行 超平面 是 指 一组 平行 的 k - 1 维 的 被 A 所 限制 的 有限 数组 空间 , 如 二维 数组 的 超平面 是 该 数组 上 的 一组 平行 “ 线段 ” , 三维 数组 的 超平面 是 该 数组 上 的 一组 平行 “ 平面 ” . 在 我们 的 循环 模型 中 , 若 第 l 个 嵌套循环 为 可 并行 的 DOALL 循环 ( 0 ≤ l ≤ k - 1 ) , 则 由 l 所 确定 的 数组 Ai ( 0 ≤ i ≤ m ) 的 超平面 为 
 . 
 其中 il 为 常数 , Ll ≤ l ≤ Ul , 简记 为 X ＝ F ( il , I ) , 定义 il 为 该 超平面 的 索引 . 超平面 的 方向 指其 法线 方向 , 定义 为 v → = a → i , 0 × ... × a → i , l - 1 × a → i , l + 1 × ... × a → i , k - 1 , 其中 a → i , j ( 0 ≤ j ≤ k - 1 , i ≠ l ) 形 如 ( a0i , ja1i , j ... ak - 1i , j ) T . 若 v → 与 xi 维 平行 , 称其 方向 为 标准 的 , 为 方便 起 见 , 也 称 其 方向 为 xi ； 若 v → 不 与 任何 维 平行 , 称其 方向 为 非标准 的 . 若 某个 非标准 的 超平面 t 在 A 的 xp0 , xp1 , ... , xp 璳 - 2 侧面 上 的 投影 面积 等于 该 侧面 的 面积 , 则 称 xp0 , xp1 , ... , xp 璳 - 2 侧面 的 法向 为 t 的 可 替代 方向 . 对于 二维 数组 的 超平面 , 可以 将 其 方向 归为 3 类 ： 与 垂直轴 （ y 轴 ) 平行 的 , 称为 y 向 , 可 表示 为 y = c ； 与 水平 轴 （ x 轴 ) 平行 的 , 称为 x 向 , 可 表示 为 x = c ; 不 与 任何 轴 垂直 , 称为 z 向 , 可 表示 为 y = ax + b , a ≠ 0 . 超平面 的 面积 定义 为 该 超平面 所 包含 的 数组 元素 个数 . 在 我们 的 模型 中 , 循环 i 所 决定 的 超平面 的 面积 为 t0t1 ... ti - 1ti + 1 ... tk - 1 , tl = Ul - Ll / Sl + 1 ( 0 ≤ l ≤ k - 1 , l ≠ i ) . 
 　 　 显然 , 二维 数组 的 超平面 是 一组 平行 的 线段 . 三维 数组 的 超平面 是 一组 平行 的 平面 . 
 　 　 在 多重 循环 里 , 有 若干个 循环 是 可 并行 的 , 我们 总是 取 最 外层 的 并行 循环 来 定义 数组 超平面 . 
 1.2 　 通讯 
 　 　 在 讨论 数组 的 切割 和 分配 之前 , 先 说明 一下 通讯 模式 . 通讯 可以 分为 3 类 ： ( 1 ) 数组 分配 和 再 分配 时 的 通讯 , 前者 称为 全局 数组 分配 通讯 , 后者 称为 局部 数组 分配 通讯 , 统称 为 分配 通讯 ( allocationcommunication ) ; ( 2 ) 驻地 通讯 ( residualcommunication ) 是 指 , 由于 两个 节点 之间 存在 假 依赖 关系 而 产生 的 通讯 ; ( 3 ) 依赖 通讯 ( dependencecommunication ) 是 指 , 由于 两个 节点 之间 存在 真 依赖 关系 而 导致 的 一个 节点 向 另 一个 节点 发送 所 需 数据 . 分配 通讯 的 过程 为 ： 将 全局 或 局部 数组 中待 分配 的 部分 提取 ( G ) , 发送 ( S ) , 接收 ( R ) , 如图 1 所示 . G ( R ) 操作 的 开销 和 要 提取 ( 接收 ) 的 数组 是否 连续 以及 数据量 的 大小 有关 . S 操作 的 开销 是 指 将 数组 从 A 结点 传给 B 结点 的 时间 , 为 简单 起 见 , 不 考虑 A , B 两点 的 路径 长短 , 认为 它 只 与 要 传送 的 数组 量 有关 . 全局 数组 A 的 分配 通讯 开销 为 
 DA = n * G ( d , | LA | ) + n * S ( | LA | ) + R ( d , | LA | ) , 　 　 ( 1 ） 
 其中 n 表示 A 被 切割 的 块 数 , | LA | 表示 切割 所得 局部 数组 的 体积 . 在 很多 情况 下 , | LA | = | A | / n , d 表示 切割 方向 , 也 即 超平面 方向 . G ( d , | LA | ) 表示 从 A 中 按 方向 d 提取 出 大小 为 | LA | 的 数组 块 的 开销 , S ( | LA | ) 表示 发送 大小 为 | LA | 的 数组 块 的 开销 , R ( d , | LA | ) 表示 按 方向 d 接受 大小 为 | LA | 的 数据 块 的 开销 . 即 全局 数组 A 的 分配 开销 为 系统 中 所有 节点 从 开始 准备 接受 局部 数组 到 收到 数组 的 等待时间 中 的 最长 者 , 也 即 等于 分配 者 节点 将 A 按 方向 d 分成 n 块 大小 为 | LA | 的 数组 块 并 发送 完 这 n 块 数组 之后 , 加上 接受 最后 一个 数组 块 的 节点 完成 接受 的 时间 . 我们 假定 分配 者 节点 本身 不 参加 局部 数组 的 处理 . 局部 数组 LA 的 再 分配 开销 为 
 NDA = ( n - 1 ) * G ( d , | LLA | ) + ( n - 1 ) * S ( | LLA | ) + ( n - 1 ) * R ( d , | LLA | ) , 　 　 （ 2 ） 
 其中 | LLA | 是 指 将 局部 数组 LA 切割 之后 所 得到 的 每块 的 体积 , 一般 | LLA | = | LA | / n . 数组 A 的 重 分配 开销 等于 局部 数组 LA 的 分配 开销 , 而 每个 局部 数组 的 分配 开销 是 相同 的 , 均 是 将 本地 数组 分成 n - 1 个 包 并 发送 这 n - 1 个 数据包 和 接受 来自 其他 节点 的 n - 1 个 数据包 的 时间 之 和 . 以上 在 考虑 通讯 代价 模型 时 , 认为 各个 处理 节点 的 计算能力 相同 , 数组 被 均匀 地 切割 和 分配 . 
 
 1.3 　 数据分布 策略 
 1.3 . 1 　 数组 的 切割 
 　 　 数组 A 的 切割 方向 是 指 切割 A 所 形成 的 截面 的 法 方向 . 如果 已经 确定 了 数组 A 的 超平面 方向 , 就 以此 方向 作为 数组 的 切割 方向 . 若此 方向 为 标准 方向 xi , 则 数组 和 计算 的 分布 较 简单 , 只 需 沿着 xi 方向 即 对 数组 的 xi 维 进行 切割 和 分配 . 若为 非标准 方向 , 尤其 是 涉及 到 数组 的 重 分布 时 , 工作 要 复杂 些 . 
 　 　 下面 , 我们 以 二维 数组 为 例来 说明 数组 的 切割 . 如果 超平面 方向 为 x 向 , 则 对 x 轴 进行 切割 . 如果 超平面 方向 为 y 向 , 则 对 y 轴 进行 切割 . 如果 超平面 方向 为 z 向 , 此时 有 两种 方案 可 供选择 ： ( 1 ) 按 z 方向 进行 数组 的 切割 和 分配 , 分配 出去 的 数组 块 所 形成 的 局部 数组 可以 改变 结构 , 使 之 更 有利于 快速 存取 , 但 需要 改变 相应 的 数组 引用 模式 , 若该 数组 在 其他 位置 以 不同 的 引用 模式 被 引用 , 则 需要 进行 数组 结构 的 恢复 , 这会 带来 一定 的 开销 . 因此 , 是否 改变 局部 数组 结构 , 需要 综合 考虑 这 两种 因素 ; ( 2 ) 若 存在 可 替代 方向 , 则 以 z 方向 的 可 替代 方向 进行 数组 的 切割 和 分配 . 设 x , y 维 的 长度 分别 为 n , m , 超平面 为 y = ax + b ( a ≠ 0 ) , 若 a ≤ m / n , 则 可 替代 方向 为 y , 故可 对 y 轴 切割 , 若 a > m / n , 则 可 替代 方向 为 x , 故可 对 x 轴 切割 , 分别 如图 2 ( a ) , ( b ) 所示 , 其中 虚线 表示 切割 线 . 例如 , 要 将 图 2 ( a ) 中 从 i 到 i + k - 1 的 k 个 超平面 分配 到 某个 处理 结点 上 , 则 将 A ( i : i + k + a * n , 0 : n - 1 ) 从 A 中 提取 出来 , 发送给 该 结点 , 其中 n 表示 x 维 的 长度 . 第 1 种 切割 方法 不会 造成 无用 数据 的 传递 , 但 G 操作 的 开销 较大 , 若 数组 结构 不 重构 , 则 R 操作 的 开销 也 较大 . 第 2 种 方法 要 向 每个 处理 节点 传送 a * n2 个 无用 数据 , 如图 2 ( a ) 中 阴影 部分 , 其中 n 表示 x 维 的 长度 . 这样 , 若 数组 A 被 分成 m 块 , 会 有 a * n2m 个 无用 数据 被 传递 . 这种 方法 的 优点 是 , G , R 的 操作 开销 较 小 , 尤其 是 数组 的 存储 方向 ( 按行 或 按列 ) 与 切割 方向 一致 时 , 可以 通过 计算 两种 方法 的 分配 通讯 开销 , 采用 开销 最小 者 . 
 
 　 　 不管 采取 第 1 种 还是 第 2 种 方法 , 都 会 面临 这样 一个 问题 , 即当 数组 已 被 修改 并且 需要 重 分配 时 , 首先 需要 在 各个 处理 节点 之间 进行 数组 的 一致性 维护 和 数组 的 重 定界 . 为 讨论 方便 起 见 , 假定 局部 数组 未 重构 . 在 图 3 中 , Ai - 1 , Ai , Ai + 1 是 分配 在 处理 节点 pi - 1pipi + 1 上 的 局部 数组 , 它们 是 将 数组 A 对 y 轴 切割 所 得到 的 相邻 的 3 块 数组 , 局部 计算 按图 中 斜线 方向 进行 . Rku , Rkd ( k = i - 1 , i , i + 1 ) 是 局部 数组 的 未 用区 , 为了 保证 各个 节点 之间 数组 的 完整性 和 一致性 , 需要 将 Wku 軷 k - 1d ( k = i , i + 1 ) ; Wkd 軷 k + 1u ( k = i - 1 , i ) , “ 荨北 硎 敬送 操作 , 如图 3 所示 . 然后 就 可以 在 此基础 上 对 局部 数组 进行 再 分配 . 在 对 局部 数组 再 分配 时 , 由于 局部 数组 块 之间 存在 着 部分 重叠 , 应 注意 对 重叠 部分 的 处理 . 在 图 4 中 , 一组 平行 的 水平线 表示 对 数组 的 切割 线 , 其中 实线 表示 局部 数组 块 的 起始 位置 , 虚线 表示 局部 数组 块 的 结束 位置 , 相邻 的 实线 和 虚线 之间 的 区域 是 重叠 区 . 重 分配 时 , 首先 要 确定 局部 数组 的 边界 , 使得 各个 局部 数组 不 重叠 . 例如 , 可以 统一 用 实线 或 虚线 作为 数组 的 边界 . 这项 工作 被 称为 数组 的 重 定界 . 数组 的 重 定界 应 在 数组 的 一致 化 之后 进行 . 在 此基础 上 , 就 可以 进行 数组 的 重 分配 了 . 
 
 
 1.3 . 2 　 数组 的 分配 
 　 　 当 同一 相 中 各个 数组 的 超平面 确定 之后 , 应 将 具有 相同 索引 的 超平面 分配 到 相同 的 处理 节点 . 我们 采用 按块 进行 分配 的 方法 . 按块 分配 的 原因 是 ： ( 1 ) 便于 进行 数组 重 分配 ； ( 2 ) 便于 在 不 一致 计算环境 下 进行 数组 分配 ； ( 3 ) 产生 较少 的 驻地 通讯 . 
 1.3 . 3 　 同一 相 中 相同 数组 的 多次 引用 
 　 　 在 前面 的 循环 模型 中 , 若 存在 Ai = Aj ( 1 ≤ i , j ≤ m ) , Ai , Aj 均 处在 赋值 号 的 右侧 , 引用 模式 不 一样 , 对此 可以 有 两种 处理 方法 ： ( 1 ) 数组 的 复制 . 例如 , 可以 将 其中 的 一个 更名 为 B , 并 按 其 原有 的 超平面 进行 数组 的 分布 . 这种 方法 会 导致 额外 的 存储空间 和 数组 分配 开销 , 但 可以 消除 驻地 通讯 . ( 2 ) 若 它们 的 超平面 方向 或 可 替代 方向 有 相同 的 , 并且 相同 索引 超平面 与 该 数组 某维 的 交点 距离 保持 不变 , 则 可以 按 这种 相同 方向 进行 数组 的 切割 , 而 不用 进行 数组 的 复制 . 这种 方法 有 一定 的 驻地 通讯 , 但 消除 了 额外 的 存储 和 数组 分配 开销 . 具体 采用 哪 一种 方案 , 要 对 数组 复制 开销 和 驻地 通讯 开销 进行 综合 考虑 . 
 1.3 . 4 　 不同 相 中 相同 数组 的 多次 引用 
 　 　 设 A 在 相 Pi 中可选 的 超平面 方向 集为 SPi = { dil | l = 1 , 2 , ... , ni } , 若 A 在 相 P1 , P2 , ... , Pk 中 出现 , 为了 寻找 A 在 各 相中 最佳 的 切割 方向 , 我们 建立 超平面 方向 转换 图 G = ( V , E ) . 该图 包含 k 层 , 每层 包含 ni 个 节点 , 每个 节点 代表 一个 超平面 方向 , 第 j 层 代表 SPi , 相邻 层 的 任 两 节点 vmi , vni + 1 之间 有 边 相联 , 该边 的 权 代表 了 A 由 方向 vmi 转换 为 vni + 1 的 再 分配 开销 , 其 代价 由式 ( 2 ) 计算 可得 . 若 两点 的 超平面 方向 相同 , 则 权值 为 0 . 我们 的 问题 就是 , 在 1 到 k 层 之间 寻找 一条 权值 之 和 最小 的 路径 . 这是 一个 路径 搜索 问题 , 其 时间 开销 为 O ( Π ki = 1ni ) , 实际 问题 中 的 ni 比较 小 , 因此 , 该 方法 还是 实际 可行 的 . 
 1.3 . 5 　 不 一致 计算环境 中 的 数组 分配 
 　 　 在 一致 计算环境 下 , 各个 处理 节点 具有 相同 的 计算能力 , 数组 的 分布 较为简单 , 可以 对 数组 按 某个 方向 进行 均匀 的 切割 和 分配 . 在 NOW 环境 中 , 包含 了 不同 类型 的 节点 , 如 微机 、 工作站 、 小型机 等等 , 这些 机器 的 计算能力 是 不同 的 ； 即使 对 同一 类型 的 设备 , 在 某 段时间 内 , 其 负载 也 常常 不 一样 , 故 此时 所 能 提供 的 计算能力 也 是 不同 的 . 设 a1 , a2 , ... , an 为 NOW 环境 中 处理 节点 的 相对 计算能力 , a1 + a2 +...+ an = 1 且 a1 ≥ a2 ≥ ... ≥ an . 把 数组 A0 切割成 A1 , A2 , ... , An 这 n 个 模块 , 为了 达到 负载平衡 , 应 满足 以下 条件 ： | A1 | = a1 | A0 | , | A2 | = a2 | A0 | , ... , | An | = an | A0 | . 其中 | Ai | ( 0 ≤ i ≤ n ) 表示 数组 Ai 的 体积 . 
 2 　 性能 测试 和 评估 
 2.1 　 实例 研究 
 　 　 例 1 : for ( i = 0 ; i < = N ; i ++ ) 
 　 　 　 　 　 　 　 for ( j = 1 ; j < = N ; j ++ ) 
 　 　 　 　 　 　 　 　 A ［ i + j , j ］ : = A ［ i + j - 1 , j - 1 ］ + B ［ j , i ］ 
 通过 依赖 关系 分析 发现 , 第 1 个 循环 可 并行 化 , 我们 以此 循环 来 确定 A , B 的 超平面 . 由 第 1.1 . 2 节 可知 , A 在 “ : = ” 两端 的 超平面 为 
 
 它们 均 可 表示 为 y = x + b ( b 为 常数 ) , 其 可 替代 方向 为 x 向 , B 的 超平面 为 
 
 即 y = c ( c 为 常数 ) . 如图 5 所示 , 对 A , B 数组 进行 切割 , 其 切割 方向 即 为 超平面 方向 ( 注意 方向 的 定义 , 参见 第 1.1 . 2 节 ) . 如果 按 传统 的 方式 对 A 数组 按块 分布 , 无论是 按 A ( : , block ) , 还是 按 A ( block , : ) 分布 , 都 使得 子 任务 之间 不可 并行执行 . A 也 可以 按照 可 替代 方向 进行 切割 . 表 1 给出 了 N = 100 , 处理 节点 为 2 和 4 时 的 A , B 分布 方案 , 其中 A 按照 可 替代 方向 进行 切割 . 
 
 表 1 
 
 处理 节点 数 A 的 分布 方案 B 的 分布 方案 
 2A ［ 50p : 50p + 150 , * ］ , p = 0 , 1B ［ * , 50p : 50 ( p + 1 ) ］ , p = 0 , 1 
 4A ［ 25p : 25p + 125 , * ］ , p = 0 , 1 , 2 , 3B ［ * , 25p : 25 ( p + 1 ) ］ , p = 0 , 1 , 2 , 3 
 
 2.2 　 实验 结果 
 　 　 我们 在 6 台 RS6000 工作站 通过 ATM 联结 而成 的 NOW 环境 下 , 借助 PVM , 对 基于 超平面 的 块 数组 分布 下 的 并行计算 进行 了 研究 , 主要 将 该 数组 分布 方法 与 传统 的 块 分布 方法 作 了 一些 比较 . 下面 考察 的 问题 均 是 可 并行计算 问题 , 而 并行性 的 识别 与 获取 不是 本文 的 研究 重点 , 因此 不 作 讨论 . 无论是 采用 SPMD 模式 还是 Master / Slave 模式 , 程序 的 执行 过程 主要 包括 数据 的 分布 、 局部 计算 、 驻地 通讯 以及 数据 的 回收 . 由于 执行 模式 对 测试 项 没有 影响 , 因此 , 我们 统一 采用 Master / Slave 模式 来 执行程序 . 
 　 　 实验 1 . 对 以下 循环 并行计算 . 
 　 　 for ( i = 0 ; i < N ; i ++ ) 
 　 　 　 　 for ( j = 0 ; j < N - 2 ; j ++ ) 
 　 　 　 　 　 A ［ i + j , j ］ : = A ［ i + j , j ］ + A ［ i + j + 2 , j + 2 ］ 
 　 　 这个 例子 中 的 计算 量 较 少 , 因此 , 通讯 量 的 多少 决定 了 程序 的 执行 时间 . 而 通讯 量 的 多少 由 数组 的 分布 方法 所 决定 . 表 2 、 3 是 针对 不同 大小 的 数组 A 的 测试 结果 . 其中 hd , bd 分别 表示 基于 超平面 的 数据分布 和 传统 块 分布 , 这里 , bd 为 ( : , Block ) , 执行 时间 和 加速 比均取 10 次 执行 结果 的 平均值 . 
 表 2 
 
 并行任务 数 执行 时间 ( ms ) 加速 比 
 hdbdhdbd 
 2272453030.0780 . 038 
 4199739090.1020 . 052 
 5185236450.1100 . 055 
 
 A 为 2000 * 1000 的 实数 矩阵 
 表 3 
 
 并行任务 数 执行 时间 ( ms ) 加速 比 
 hdbdhdbd 
 210857212760.0750 . 038 
 47945156580.1030 . 052 
 57334144720.1110 . 056 
 
 A 为 4000 * 2000 的 实数 矩阵 　 　 
 从表 2 、 3 可以 看出 , 不同 的 数据分布 模式 对 程序 的 执行 时间 影响 很大 . 附带 说明 一下 , 以上 测试 结果 的 加速 比 甚至 远 小于 1 , 即 在 这个 例子 中 , 通讯 开销 ( 数据 的 分布 、 驻地 通讯 、 数据 的 回收 ) 太 大 , 使得 并行执行 毫无意义 . 
 　 　 实验 2 . 对 复数 数组 A 中 所有 倾斜角 为 45 ° 线上 的 数据 进行 傅里叶 变换 . 这是 二维 傅里叶 变换 问题 , 在 这个 例子 中 , 傅里叶 矩阵 已经 计算出来 了 . 下面 给出 的 是 串行 计算 的 循环 实例 . 
 　 　 for ( i = 0 ; i < N ; i ++ ) 
 　 　 　 　 for ( j = 0 ; j < N ; j ++ ) 
 　 　 　 　 　 for ( k = 0 ; k < N ; k ++ ) 
 　 　 　 　 　 　 　 DA ［ i , j ］ : = cpladd ( cplmul ( FFT ［ j , k ］ , SA ［ i + k , k ］ ) , DA ［ i , j ］ ) 
 　 　 这个 例子 中 的 计算 量 较大 , 我们 通过 它 来 研究 一下 数组 的 分布 方法 对 最终 的 执行 加速 比 的 影响 . 按 hd 分布 时 , DA , SA , FFT 的 超平面 分别 为 
 
 即 FFT 不 进行 切割 , 作为 一个 整体 分配 给 各个 子 任务 . SA 也 可 按 可 替代 方向 分布 , 如 rd 栏 所示 . 按 bd 分布 时 , FFT , SA 分别 按 ( Block , : ) , ( : , Block ) 切割 分布 , 并且 alignFFT ( i , j ) withSA ( j , i ) , DA 不 进行 切割 , 作为 一个 整体 分配 给 各个 子 任务 , 最后 所有 的 DA 汇集 到 Master 上 进行 累加 , 得到 最终 结果 . 表 4 、 表 5 是 针对 不同 大小 的 数组 SA 的 测试 结果 , 表中 执行 时间 和 加速 比均取 10 次 执行 结果 的 平均值 . 
 表 4 
 
 并行任务 数 执行 时间 ( ms ) 加速 比 
 hdbdhdbdhdbd 
 24728305066815159151.8561 . 7321.701 
 42304552345192400363.8083 . 7423.656 
 51853371905691929584.7354 . 6054.548 
 
 SA 为 1200 * 600 的 复数 矩阵 
 表 5 
 
 并行任务 数 执行 时间 ( ms ) 加速 比 
 hdbdhdbdhdbd 
 23417552358562837251381.8771 . 7891.722 
 41668319173323117617933.8453 . 7013.641 
 51339742137861414245364.7884 . 6534.503 
 
 SA 为 2000 * 1000 的 复数 矩阵 
 　 　 初步 实验 表明 ： 当 数组 引用 模式 不规则 时 , 基于 超平面 的 块 数据分布 方案 要 比 传统 的 数据分布 方法 有效 . 当 超平面 的 方向 是 标准 方向 时 , 就是 一种 块 分布 , 而 按 超平面 的 可 替代 方向 进行 数据分布 , 可以 看成 是 二者 的 折衷 . 
 3 　 与 相关 工作 的 比较 
 　 　 FortranD , HPF 等 提供 了 基于 维 对齐 的 按 BLOCK 或 CYCLIC ( m ) 方式 的 多 向 ( 维 ) 的 数组 分配 策略 ［ 1 ］ . 这种 方法 不能 很 好 地 处理 不 按维 扫描 的 不规则 数组 引用 模式 , 而 多维 分割 增加 了 计算 分布 的 复杂度 . 文献 ［ 2 ］ 讨论 了 不 一致 计算环境 下 的 数组 分布 . 它 将 驻地 通讯 开销 归结为 内 边 ( internaledges ) 和 外边 ( externaledges ) 的 长度 , 由于 没有 考虑 数组 的 具体 引用 模式 , 故 这种 抽象 不能 很 好 地 反映 实际 情况 . 同时 , 为了 寻求 最短 的 内边 和 外边 长度 , 数组 的 切割 不够 规则 , 增加 了 计算 分布 的 复杂性 . 文献 ［ 3 ］ 给出 了 在 循环 当中 同一 数组 被 读 多次 情况 下 寻求 一致 化 超平面 的 方法 , 但 它 没有 考虑 同一 数组 既读 又 写 的 情况 , 而且 循环 变换 开销 较大 . 本文 给出 了 基于 超平面 的 块 数组 分布 模型 . 这是 一种 单向 的 数组 切割 和 分配 方案 , 因此 , 数组 和 计算 的 分布 较为简单 , 能够 处理 不 按维 扫描 的 不规则 数组 引用 模式 , 在 不 一致 计算环境 下 可以 方便 地 进行 数组 的 分布 . 由于 超平面 由 可 并行 循环 决定 , 故 这种 数组 分布 不会 产生 依赖 通讯 . 同时 , 由于 采用 按块 分布 方案 , 所以 能够 最大 限度 地 削减 驻地 通讯 开销 . 我们 希望 以此 作为 对 传统 方法 的 一个 补充 . 
 4 　 小结 
 　 　 本文 提出 了 基于 超平面 的 块 数组 分布 策略 , 给出 了 确定 超平面 以及 如何 按 超平面 对 数组 进行 切割 和 分配 的 方法 , 讨论 了 同相 和 不同 相 中 同一 数组 被 多次 读写 的 情况 和 不 一致 计算环境 下 数组 的 分布 问题 . 初步 实验 表明 , 这是 一种 简单 、 方便 和 有效 的 数组 分布 方案 . 我们 希望 以此 作为 对 传统 方法 的 一个 补充 . 更 重要 的 是 , 我们 的 工作 为 自动 数据分布 提供 了 一个 思路 . 关于 两种 方案 的 结合 和 自动 数据分布 工作 , 还 需要 进一步 的 研究 . 
 　 
 本文 研究 得到 国家 863 高科技 项目 基金 资助 . 
 作者 杜 建成 , 1971 年生 , 博士生 , 主要 研究 领域 为 并行计算 . 
 　 　 黄浩 , 1957 年生 , 副教授 , 主要 研究 领域 为 计算机网络 , 并行 编译 . 
 　 　 郁卫江 , 1973 年生 , 硕士生 , 主要 研究 领域 为 自动 并行 编译 . 
 　 　 陈道 蓄 , 1948 年生 , 副教授 , 主要 研究 领域 为 分布式 处理 , 并行计算 . 
 　 　 谢立 , 1942 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 分布式 处理 , 并行计算 . 
 本文 通讯联系 人 : 杜 建成 , 南京 210093 , 南京大学 计算机科学 与 技术 系 
 作者 单位 : ( 南京大学 计算机软件 新 技术 国家 重点 实验室 　 南京 　 210093 ) 
 ( 南京大学 计算机科学 与 技术 系 　 南京 　 210093 ) 
 参考文献 
 　 [ 1 ] 　 TsengCW . AnoptimizingFortranDcompilerforMIMDdistributed - memorymachines ［ Ph . D . Thesis ］ . RiceUniversity , 1993 
 　 [ 2 ] 　 KaddouraM , RankaS , WangA . Arraydecompositionfornonuniformcomputationalenvironments . JournalofParallelandDistributedComputing , 1996 , 36 ( 5 ) : 91 ～ 105 
 　 [ 3 ] 　 RamannujamJ , SadayappanP . Compile - timetechniquesfordatadistributedmemorymachines . IEEETransactionsonParallelandDistributedSystems , 1991 , 2 ( 4 ) : 472 ～ 482 
 本文 1998 - 01 - 22 收到 原稿 , 1998 - 04 - 20 收到 修改稿 
