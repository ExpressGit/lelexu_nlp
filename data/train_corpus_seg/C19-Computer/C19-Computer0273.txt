软件 学报 
 JOURNALOFSOFTWARE 
 1999 年 第 19 卷 第 3 期 Vol.19 No.31999 
 
 
 
 函数 式 语言 中 的 赋值 语句 
 石跃祥 　 袁华强 　 孙永强 　 陈静 
 摘 　 要 　 文章 探讨 了 怎样 在 纯 函数 式 语言 中 加入 赋值 操作 ， 而 又 不 丧失 引用 透明性 特征 的 问题 ， 给出 了 这些 操作 的 指称 语义 ， 并用 这些 赋值 操作 定义 了 一个 简单 的 命令式 语言 的 解释程序 . 
 关键词 　 纯 函数 式 语言 , 赋值 语句 , Monads . 
 中图法 分类号 　 TP312 
 AssignmentsforPureFunctionalLanguages 
 SHIYue - xiang 　 YUANHua - qiang 　 CHENJing 
 　 DepartmentofComputerScienceXiangtanUniversityXiangtan411105 
 SUNYong - qiang 
 　 DepartmentofComputerScienceandEngineeringShanghaiJiaotongUniversityShanghai200030 
 Abstract 　 Inthispaper , theauthorsshowthatassignmentscanbeincorporatedintopurefunctionallanguageswithoutlossofreferentialtransparency . Andthedenotationalsemanticsoftheseassignmentoperationsaregiven . Usingtheseassignmentoperations , theauthorsdefineaninterpreterofasimpleimperativelanguage . 
 Keywords 　 Purefunctionallanguages , assignments , Monads . 
 　 　 怎样 在 纯 函数 式 语言 中 加入 赋值 语句 , 而 又 不 丧失 引用 透明性 特征 , 一直 是 函数 式 语言 学界 关注 的 焦点 . 人们 在 这方面 提出 了 一系列 的 方法 , 这些 方法 大都 是 基于 类型 系统 的 , 而且 类型 系统 十分复杂 , 没有 被 人们 广泛 接受 . 文献 ［ 1 ］ 运用 Monad 方法 ［ 1 ～ 3 ］ ， 将 赋值 语句 加入 到 纯 函数 式 语言 中 , 避免 了 人们 以往 采用 的 复杂 的 类型 系统 . 但是 , 文献 ［ 1 ］ 提出 了 一个 异步 的 I / O 操作 performIO , 这个 操作 与 引用 透明性 是 相冲突 的 . 本文 针对 这一 缺陷 , 采用 状态 转换器 以及 对 状态 进行 参数 化 的 方法 进行 改进 , 使得 在 纯 函数 式 语言 中 加入 赋值 语句 ， 而 又 不 丧失 引用 透明性 特征 , 并 给出 了 这些 赋值 操作 的 指称 语义 , 用 这些 赋值 操作 定义 了 一个 简单 的 命令式 语言 的 解释程序 . 
 1 　 状态 转换器 
 　 　 定义 1.1 . 状态 转换器 ST 是 这样 的 函数 , 它 作用 在 一个 类型 为 s 的 初始状态 上 , 返回 一个 类型 为 a 的 值 和 一个 类型 仍为 s 的 结束 状态 . 
 这样 , 状态 转换器 ST 的 类型 可定义 为 : typeSTsa = states - > ( a , states ) 
 　 　 最 简单 的 状态 转换器 unitST , 它 仅仅 传递 值 , 丝毫 不 影响 状态 : 
 　 　 unitST ∷ a - > STsa 
 　 　 unitSTx = ＼ s - > ( x , s ) , 其中 ＼ s - > 是 一个 λ 表达式 . 
 　 　 状态 转换器 能够 顺序 组合 , 以 构成 更大 的 状态 转换器 , 这个 工作 由 bindST 来 完成 : 
 　 　 bindST ∷ STsa - > ( a - > STsb ) - > STsb 
 　 　 m ‘ bindST ’ k = ＼ s - > let ( x , s ′ ) = ms 
 　 　 　 　 　 　 　 　 inkxs ′ 
 　 　 定理 1.1 ［ 3 ］ . ( ST , unitST , bindST ) 构成 了 一个 Monad . 
 2 　 对 状态 进行 参数 化 
 　 　 在 文献 ［ 1 ］ 中 , 对 赋值 语句 的 处理 采用 了 文献 ［ 4 ］ 的 可 赋值 引用 类型 Refa , 其中 IOa 是 一种 Monad : 
 　 　 newVar ∷ a - > IO ( Refa ) 
 　 　 assignVar ∷ Refa - > a - > IO ( ) 
 　 　 deRefVar ∷ Refa - > IOa 
 　 　 文献 ［ 1 ］ 提出 了 一个 异步 的 I / O 操作 performIO , 这个 操作 与 引用 透明性 是 相冲突 的 . 
 　 　 performIO ∷ IOa - > a 
 　 　 performIOm = case ( mnewWorld ) of 
 　 　 MkIOResrw ′ - > r 
 　 　 让 我们 来看 下面 的 例子 : 
 　 　 letv = performIO ( newVartrue ) 
 　 　 inperformIO ( deRefVarv ) . 
 　 　 这样 做 将 蕴涵着 一个 错误 , 因为 v 是 由 newVartrue 生成 的 , 执行 performIO 之后 , v 被 释放 到 了 外部 世界 , 该 程序 不能 控制 在读 操作 deRefVarv 之前 , 有 其他 操作 对 v 进行 了 修改 , 程序 的 结果 将 依赖于 计算 的 顺序 , 引用 透明性 特征 因此 丧失 . 
 　 　 在 以往 的 IOa 类型 中 , 状态 隐含 在 IO 类型 , 外界 不能 直接 对 状态 进行 操作 . 为了 改正 文献 ［ 1 ］ 的 错误 , 我们 将 IO 类型 中 的 状态 显式 地 表示 出来 , 改进 为 STsa , 使得 状态 成为 ST 的 一个 参数 , 我们 称之为 对 状态 进行 参数 化 . 与 文献 ［ 4 ］ 一样 , 我们 将 状态 处理 为 引用 变量 的 地址 到值 的 映射 的 集合 , 将 类型 Refa 改进 为 MutVarsa , 它 表示 引用 变量 是从 类型 为 s 的 状态 中 分配 而 来 , 并 包含 有 类型 为 a 的 值 . 因此 , 文献 ［ 1 ］ 的 引用 变量 的 3 个 基本操作 可 改进 为 
 　 　 newVar ∷ a - > STs ( MutVarsa ) 
 　 　 readVar ∷ MutVarsa - > STsa 
 　 　 writeVar ∷ MutVarsa - > a - > STs ( ) 
 　 　 这样 , 通过 状态 转换器 和 对 状态 进行 参数 化 , 我们 就 可以 定义 我们 的 异步 I / O 操作 performIO : 
 　 　 performIO ∷ 衋 . ( 衧 . STsa ) - > a 
 　 　 这 不是 一个 Hindley - Milner 类型 , 因为 量词 不全 在 顶端 . 为什么 这个 类型 会 防止 文献 ［ 1 ］ 中 的 错误 发生 呢 ? 我们 还是 来看 下面 这个 例子 : 
 　 　 letv = performIO ( newVartrue ) 
 　 　 inperformIO ( readVarv ) 
 　 　 我们 先 来看 performIO ( readVarv ) , 引用 变量 v 在 状态 转换器 ( readVarv ) 中 , readVarv 的 类型 依赖于 v 的 类型 , 因此 , 这个 类型 推导 将 包含 下列 形式 的 判断 : 
 　 　 { ... , v : MutVarsBool } 硆 eadVarv : STsBool 
 　 　 为了 执行 performIO ( readVarv ) , readVarv 的 类型 应该 是 衧 . STsBool , 但 此时 s 并 不是 自由 变元 , 因此 , readVar 的 类型 不是 衧 . STsBool , 与 performIO 所 要求 的 类型 不 匹配 . 
 　 　 再 来 考虑 v 的 定义 : v = performIO ( newVartrue ) , newVartrue 具有 类型 STs ( MutVarsBool ) , 因而 可 推广 为 衧 . STs ( MutVarsBool ) , 但 这 依然 与 performIO 的 类型 不 匹配 . 考虑 将 performIO 的 类型 衋 . ( 衧 . STsa ) - > a 中 的 a 用 MutVarsBool 例化 后 的 类型 : 
 　 　 performIO ∷ 衧 ′ . STs ′ ( MutVarsBool ) - > MutVarsBool 
 　 　 当 a 用 MutVarsBool 例化时 , 我们 必须 将 performIO 类型 的 约束 变元 改名 , 这样 newVartrue 的 类型 衧 . STs ( MutVarsBool ) 与 衧 ′ . STs ′ ( MutVarsBool ) 不 匹配 . 
 　 　 综上所述 , 通过 状态 转换器 和 对 状态 进行 参数 化 , 我们 将 performIO 的 类型定义 为 衋 . ( 衧 . STsa ) - > a , 这样 就 完全避免 了 文献 ［ 1 ］ 中 的 错误 , 保证 了 引用 透明性 不 丧失 . 
 3 　 指称 语义 
 　 　 状态 操作 很 容易 加到 纯 函数 式 语言 的 标准 语义 中 . 首先 ， 我们 定义 扩展 了 状态 转换器 的 纯 函数 式 语言 的 语法 ： 
 　 　 e ∷ = x | k | e1e2 | ＼ x - > e | letx = e1ine2 
 　 　 k ∷ = ... | unitST | bindST | newVar | readVar | writeVar | performIO 
 　 　 其中 x 表示 变量 , k 表示 像 unitST , bindST 这样 的 内部 函数 . 
 　 　 以下 是 这个 简单 的 纯 函数 式 语言 的 指称 语义 : 
 　 　 ε 　 【 Expr 】 : Env - > Val 
 　 　 ε 　 【 k 】 ρ = β 【 k 】 
 　 　 ε 　 【 x 】 ρ = ρ x 
 　 　 ε 　 【 e1e2 】 ρ = ( ε 【 e1 】 ρ ) ( ε 【 e2 】 ρ ) 
 　 　 ε 　 【 ＼ x - > e 】 ρ = λ v . ( ε 【 e 】 ( ρ ［ x - > v ］ ) ) 
 　 　 ε 　 【 letx = e1ine2 】 ρ = ε 【 e2 】 ( fix ( ＼ ρ ′ - > ( ρ ［ x - > ε 【 e1 】 ρ ′ ］ ) ) 
 　 　 β 　 【 performIOe 】 = VperformIO ( ε 【 e 】 ρ ) 
 　 　 β 　 【 e1 ‘ bindIO ’ e2 】 = VbindST ( ε 【 e1 】 ρ ) ( ε 【 e2 】 ρ ) 
 　 　 β 　 【 unitSTe 】 = VunitST ( ε 【 e 】 ρ ) 
 　 　 β 　 【 newVare 】 = VnewVar ( ε 【 e 】 ρ ) 
 　 　 β 　 【 readVarv 】 = VreadVar ( ε 【 v 】 ρ ) 
 　 　 β 　 【 writeVarve 】 = VwriteVar ( ε 【 v 】 ρ ) ( ε 【 e 】 ρ ) 
 　 　 我们 使用 Env 表示 环境 的 论域 , Val 表示 值 的 论域 : 
 　 　 Env = ∏ τ ( var τ - > D τ ) 
 　 　 Val = ∪ τ D τ 
 　 　 环境 将 类型 τ 的 变量 映射 为 论域 D τ 的 值 , 并且 值 的 论域 就是 所有 D τ 的 并 集 . 
 　 　 我们 引入 了 两个 新 的 类型 构造 子 ST , MutVar , 为了 给出 它们 的 意义 , 语义 函数 必须 提供 它们 的 结构 : 
 　 　 DSTsa = States - > ( Da - > States ) 
 　 　 DMutVarsa = N ⊥ 
 　 　 States = ( N - > Val ) ⊥ 
 　 　 状态 是从 地址 ( 地址 由 自然数 表示 ) 到值 的 有限 部分 函数 , 我们 用 ⊥ 表示 未定义 状态 , 这样 我们 就 可以 给出 变量 操作 的 指称 语义 : 
 　 　 ( VperformIOm ) σ = xwhere ( x , σ ′ ) = m σ 
 　 　 ( VbindSTmk ) σ = kx σ ′ where ( x , σ ′ ) = m σ 
 　 　 ( VunitSTv ) σ = ( v , σ ) 
 　 　 VnewVarv σ = ( ⊥ , ⊥ ) if σ = ⊥ 
 　 　 ( p , σ ［ p - > v ］ ) otherwise 
 　 　 VreadVarp σ = ( ⊥ , ⊥ ) ifpdom 
 　 　 ( σ p , σ ) otherwise 
 　 　 VwriteVarpv σ = ( ⊥ , ⊥ ) ifpdom 
 　 　 ( ( ) , σ ［ p - > v ］ ) otherwise 
 　 　 我们 来看 一个 例子 , 这是 一个 简单 的 命令式 语言 的 解释程序 , AssignVarExp 表示 将 Exp 的 值 赋 给 变量 Var , ReadVar 表示 一个 读 操作 , 它 从 键盘 读取 一个 数据 赋给 变量 Vatr , 为 简单 起 见 , 假设 所有 的 输入 已 预先 存入 一个 表 input 中 , WriteExp 是 一个 输出 操作 , WhileExp ［ Com ］ 是 通常 的 循环 语句 . 
 　 　 DataCom = AssignVarExp | ReadVar | WriteExp | WhileExp ［ Com ］ 
 　 　 typeVar = Char 
 　 　 dataExp = ... 
 　 　 interpret ∷ ［ Com ］ - > ［ Int ］ - > ［ Int ］ 
 　 　 interpretcsinput = performIO ( newVarinput ‘ bindST ’ ＼ inp - > commandcsinp ) 
 　 　 command ∷ ［ Com ］ - > MutVars ［ Int ］ - > STs ［ Int ］ 
 　 　 commandcsinp = obeycs 
 　 　 where 
 　 　 obey ∷ ［ Com ］ - > STs ［ Int ］ 
 　 　 obey ( Assignve : cs ) = evale ‘ bindST ’ ＼ val - > 
 　 　 writeVarvval ‘ bindST ’ \ _ - > 
 　 　 obeycs 
 　 　 obey ( Readv : cs ) = readVarv ‘ bindST ’ ＼ ( x : xs ) - > 
 　 　 writeVarvx ‘ bindST ’ ＼ _ - > 
 　 　 writeVarinpxs ‘ bindST ’ ＼ _ - > 
 　 　 obeycs 
 　 　 obey ( Writee : cs ) = evale ‘ bindST ’ ＼ out - > 
 　 　 obeycs ‘ bindST ’ ＼ outs - > 
 　 　 unitST ( out : outs ) 
 　 　 obey ( Whileebs : cs ) = evale ‘ bindST ’ ＼ val - > 
 　 　 ifval = = 0 
 　 　 thenobeycs 
 　 　 elseobey ( bs ++ Whileebs : cs ) 
 　 　 作者 石跃祥 , 1966 年生 , 讲师 ， 主要 研究 领域 为 软件工程 . 袁华强 , 1966 年生 , 博士 ， 副教授 ， 主要 研究 领域 为 函数 式 语言 ， 软件工程 . 孙永强 , 1931 年生 , 教授 ， 博士生 导师 , 主要 研究 领域 为 并行 理论 ， 函数 式 语言 . 陈静 , 女 , 1968 年生 , 工程师 , 主要 研究 领域 为 函数 式 语言 . 
 　 　 本文 通讯联系 人 : 袁华强 ， 湘潭 411105 , 湘潭 大学 计算机科学 系 
 作者 单位 ： 石跃祥 袁华强 陈静 ： 湘潭 大学 计算机科学 系 　 湘潭 　 411105 
 　 　 　 　 　 孙永强 ： 上海交通大学 计算机科学 与 工程系 　 上海 　 200030 
 参考文献 
 ［ 1 ］ JonesSLPeyton , WadlerPL . Imperativefunctionalprogramming . In : Hughesed . Proceedingsofthe20thACMSymposiumonPrinciplesofProgrammingLanguages . NewYork : ACMPress , 1993.71 ～ 84 
 ［ 2 ］ WadlerPL . ComprehendingMonads . MathematicalStructuresinComputerScience , 1992 , 2 ( 4 ) : 461 ～ 493 
 ［ 3 ］ 袁华强 . 函数 式 I / O 系统 的 研究 与 实现 ： 一种 Monad 方法 ［ 博士学位 论文 ］ . 上海 ： 上海交通大学 ， 1996 ( YuanHua - qiang . TheresearchandimplementationofapurefunctionalI / Osystem ［ Ph . D . Thesis ］ . Shanghai : ShanghaiJiaotongUniversity , 1996 ) 
 ［ 4 ］ SwarupV , ReddyUS , IrelandE . Assignmentsforapplicativelanguages . In : Hughesed . ProceedingsofFunctionalProgrammingLanguagesandComputerArchitecture . Heidelberg : Springer - Verlag , 1991.192 ～ 214 
 （ 1998 - 04 - 14 收稿 ） 
