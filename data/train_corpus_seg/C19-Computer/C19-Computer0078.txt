计算机 工程 
 COMPUTERENGINEERING 
 1999 年 第 25 卷 第 8 期 Vol.25 No.81999 
 
 
 
 图 搜索 中 A * 算法 的 SQL 解法 
 贾纳豫 ， 李慧 ， 楼荣生 
 摘要 ： 讲座 图 搜索 的 A * 算法 和 SQL 算法 ， 利用 数据库 存储 图中 原始数据 ， 借助 SQL 语言 来 生成 A * 算法 要求 取 的 解 ， 简化 了 编程 。 
 关键词 ： 图 搜索 ； A * 算法 ； SQL 语言 
 UseSQLSolutingA * AlgorithminGraphSearching 
 JiaNayu , LiHui , LouRongsheng 
 ( Dept . ofComputerScience , FudanUniversity , Shanghai200433 ) 
 【 Abstract 】 Thespaperresearchstwographsearchingalgorithms : A * AlgorithmandSQI . Algorithm . ItusesdatabasetostoreinitiativedatainagraphandusesSQLtogetA * Algorithm ' ssolution , itcansimplifytheprogramminginthisarea . 
 【 Keywords 】 Graphsearch ; A * Algorithm ; SQLlanguage 
 1 问题 提出 
 　 　 在 图 中 寻找 最佳 路径 过程 的 算法 GraphSearch 是 : 
 　 　 ( 1 ) 建立 一个 只 含有 初始 结点 s 的 搜索 图 G = ( N , E ) , N = { s } , E = φ ， 把 s 放到 一个 叫做 OPEN 表 的 未 扩展 结点 表中 。 
 　 　 ( 2 ) 建立 一个 叫做 CLOSED 表 的 扩展 结点 表 ， 其 初始 为 空表 。 
 　 　 ( 3 ) LOOP : 若 OPEN 表为 空 ， 则 失败 退出 。 
 　 　 ( 4 ) 选择 OPEN 表上 的 第一个 结点 ， 把 它 从 OPEN 表 移出 并 放进 CLOSED 表中 。 称此 结点 为 n 。 
 　 　 ( 5 ) 若 n 为 一 目标 结点 ， 则 有解 并 成功 退出 ， 此解 是 追踪 图 G 中 沿着 边 从 n 到 s 这条 路径 而 得到 。 
 　 　 ( 6 ) 扩展 结点 n ， 生成 不是 n 的 祖先 的 那些 后继 结点 的 集合 M 。 
 　 　 ( 7 ) 令 N = N ∪ M , E = E ∪ { ( n , m ) | m ∈ M } , 把 M 的 这些 成员 加进 OPEN 表 。 对 已经 在 OPEN 表 或 CLOSED 表上 的 每 一个 M 成员 m ， 删去 通到 s 的 代价 较大 的 边 ， 和 OPEN 中 的 相应 结点 。 如果 与 被删 的 边 相连 的 结点 ， 在 CLOSED 中 ， 还要 把 它 的 后裔 结点 连到 m . 
 　 　 ( 8 ) 按 某 一 方式 重排 OPEN 表 。 
 　 　 ( 9 ) GOLOOP 
 
 图 1 计费 示意图 
 　 　 算法 GraphSearch 的 第 8 步 , OPEN 表上 的 结点 进行 排序 ， 以便 能够 从中 选出 一个 ' 最好 ' 的 作为 第四步 扩展 用 。 
 　 　 例 1 ： 交通图 中 最小 费用 路线 ， 如图 1 中 五个 顶点 ， 八条 边 的 图 ， 边上 的 数据 是 代价 。 
 　 　 其中 A 为 起点 ， E 为 终点 。 算法 过程 为 ： 
 　 　 第 1 ， 2 步 ： 
 建立 G = { N , E } , N = { A } , E = Φ 。 生成 OPEN = { A } , CLOSED = { } 
 　 　 第 3 ～ 9 步 
 　 　 第 5 趟 N = E 为 目标 结 ， 成功 退出 。 追踪 上表 最后 一列 知 始点 A 到 终点 E 的 路径 是 A → B → D → E , 代价 为 11 。 
 表 1Open 表 
 开始 护展 NM 表 路径 最小 代价 
 第 1 趟 OPEN = { } 
 CLOSED = { A } N = A 后继 B , C , DM = { B , C , D } 
 OPEN = { B , C , D } ( AB ) ( AC ) 
 ( AD ) 
 第 2 趟 OPEN = { C , D } 
 CLOSED = { A , B } N = B 后继 C , DM = { C , D } 
 OPEN = { C , D } ( AB ) ( AC ) 
 ( BC ) ( BD ) 
 第 3 趟 OPEN = { D } 
 CLOSED = { A , B , C } N = C 后继 D , EM = { D , E } 
 OPEN = { D , E } ( AB ) ( AC ) ( BC ) 
 ( BD ) ( CE ) 
 第 4 趟 OPEN = { E } 
 CLOSED = { A , B , C , D } N = D 后继 EM = { E } 
 OPEN = { E } ( AB ) ( AC ) ( BD ) 
 ( DE ) 
 第 5 趟 OPEN = { } 
 CLOSED = { A , B , C , D , E } N = E 
 
 2A * 算法 
 　 　 A * 算法 中 ， 用 一个 特别 的 估计 函数 f ， 其值 f ( n ) 表示 从 起始 点 S 到 n 的 最小 代价 路径 与 从 结点 n 到 目标 点 的 最小 代价 路径 的 代价 之 和 ， f ( n ) = g ( n ) + h ( n ) 。 即 f ( n ) 是从 起点 过 n 到达 终点 的 一条 最小 代价 路径 的 代价 。 因此 OPEN 表上 具有 最小 f 值 的 那个 结点 可 作为 该趟 中 的 N ， 下步 从 这个 结点 扩展 。 
 　 　 在 图 中 ， 对 任意 结点 n ， 定义 函数 h * ( n ) 表示 从 结点 n 到达 目标 结点 的 最小 代价 ( 精确 的 ) ； 函数 g * ( n ) 表示 从 起始 结点 S 到 结点 n 的 最小 代价 ； 根据上述 算法 ， 有 g * ( n ) = g ( n ) 。 函数 f * ( n ) = g * ( n ) + h * ( n ) 表示 从 起始 结点 S 通过 结点 n 到达 目标 结点 的 最小 代价 。 若 结点 n 到 目标 结点 无 通路 时 ， h * ( n ) 无 定义 。 
 　 　 对于 h * ( n ) ， 它 依赖于 有关 的 问题 领域 的 启发 信息 ， 所以 称 h * 为 启发 函数 。 
 　 　 在 A * 算法 工作 中 除了 使用 OPEN 和 CLOSED 表外 ， 还 需要 一个 计算 两点 ( x , y ) 间 最小 代价 的 函数 h ( x , y ) 。 
 　 　 把 算法 GraphSearch 的 第 4 步 改为 
 　 　 ( 4 ) 从 OPEN 表中 取出 g ( n ) + h ( n , b ) 最小 的 顶点 n 移出 ， 并 放入 CLOSED 。 
 　 　 / * g ( n ) 为 始点 s 到 n 的 代价 ， h ( n , b ) 为 n → b 的 代价 * / 
 　 　 同时 取消 步骤 ( 8 ) ， 便是 A * 算法 。 
 　 　 例 2 在 例 1 中 ， 起点 A 扩展 后 有 3 个 后继 B ， C ， D ， 如图 可得 ： 
 g * ( B ) = 2 , g * ( C ) = 3 , g * ( D ) = 7 
 　 　 若 选取 g * 最小 的 点 B 进一步 扩展 ， 得 两个 后继 C , D , 且 g * ( D ) = 2 + 4 = 6 , g * ( C ) = 2 + 3 = 5 , 由 上次 的 扩展 已有 g * ( C ) = 3 ( 是 A - C ) , 所以 这里 g * ( C ) = 5 ( 是 A - B - C ) 去除 ； 可用 这里 的 g * ( D ) = 6 ( 是 A - B - D ) 来 代替 扩展 A 时 的 g * ( D ) = 7 ( 是 A - D ) 的 值 。 若 再 扩展 结点 D 又 得 两 后继 E ， C 且 g * ( E ) = 2 + 4 + 5 = 11 ( 是 A - > B - > D - > E ) , g * ( C ) = 2 + 4 + 4 = 10 ( 是 A - > B - > D - > C ) 该值 也 可 去除 。 
 　 　 如果 有 数据库 支持 ， 可 把 函数 h 的 精确 值 事先 存入 数据库 中 ， 则 可 提高 算法 效率 。 
 3 数据库 支持 的 图 搜索算法 
 　 　 本节 用 数据库 的 SQL 语言 实现 起始 点到 目标 点 最佳 路径 的 图 搜索 问题 。 由于 SQL 是 基于 集合 各 关系 运算 的 非 过程 性 语言 ， 没有 如 A * 算法 中 逐步 扩展 的 概念 ， 解答 是 根据 WHERE 条件 “ 一步到位 ” 的 ， 完全 是 一种 新 的 思路 。 一般 做法 如下 ： 
 　 　 例 3 由例 1 的 交通图 的 顶点 、 边 及权 生成 一个 交通图 的 原始 数据库 ， 其 结构 ： 
 　 　 Citytraf ( n1CHAR ( 1 ) , n2CHAR ( 1 ) ， dNUMBER ( 2 ) ) 如图 2 所示 。 并 以此 为 出发点 生成 任意 两点 间 的 代价 表 。 
 Cityttaf 
 n1 ： A , A , A , B , B , C , C , D 
 n2 ： B , C , D , C , D , D , E , E 
 d ： 2 , 3 , 7 , 3 , 4 , 4 , 10 , 5 
 
 图 2 代价 表 
 　 　 从 Citytraf 出发 ， 可以 得到 任何 两点 间 的 最小 代价 ， 先生 成一 处理 库 ， 初始值 是 
 　 　 Citytray 
 　 　 CreateTableOper ( n1 , n2 , d ) asselectn1 , n2 , d 
 　 　 　 　 FromCitytraf 
 　 　 从表 Citytraf 与 Oper 中 各选 一点 n1 , n2 ， 求 出 它们 可能 的 路径 的 代价 ， 并 放入 Oper 中 ： 
 　 　 InsertintoOper 
 　 　 SelectCitytraf . n1 , Oper . n2 , Citytraf . d + Oper . d 
 　 　 FromCitytraf , Oper 
 　 　 WhereCitytraf . n2 = Oper . n1 
 　 　 留下 权 最小 者 ： 
 　 　 CreateTableEnd ( n1 , n2 , d ) / * 存放 任 两点 的 最小 代价 * / 
 　 　 　 　 InsertintoEnd 
 　 　 　 　 Selectn1 , n2 , min ( d ) / * 取出 d 项 最小 的 行 * / 
 　 　 　 　 FromOper 
 　 　 　 　 Groupbyn1 , n2 / * 消去 n1 , n2 段 重复 的 记录 * / 
 　 　 由于 SQL 无 递归 处理 功能 ， 该 两段 程序 需由 其它 方法 控制 反复 执行 若干次 ， 直到 不再 生成 新 的 行 。 则 End 中 的 记录 是 所有 有 通路 的 点 对 的 最小 代价 。 
 　 　 为 找出 任意 两点 ， 如 A 和 E 的 最小 代价 的 路径 并 存入 PATH ， 可 如下 建表 ： 
 　 　 CreateTablePATH ( n1 , n2 , d ) / * 建立 一个 最佳 路径 库 * / 
 　 　 InsertintoPATH 
 　 　 / * 最佳 路径 中 从 起点 开始 的 第一条 边 * / 
 　 　 SelectC1 . n1 , C1 . n2 , C1 . dFromCitytrafC1 , EndE1 
 　 　 WhereC1 . n1 = ' A ' andE1 . n1 = C1 . n2 
 　 　 　 　 andC1 . d + E1 . d = ( SelectdfromEndwheren1 = ' A ' andn2 = ' E ' ) 
 　 　 UNION / * 最佳 路径 中除 第一 和 最后 边 外 中间 段 各边 * / 
 　 　 SelectE1 . n1 , E1 . n2 , E1 . dfromEndE1 , EndE2 , CitytrafC ， EndE2 
 　 　 WhereC . n1 = ' A ' andE1 . n1 = C . n2andE1 . n2 = E2 . n1andE2 . n2 = ' E ' 
 　 　 　 　 andE1 . d + C . d + E2 . d = ( SelectdFromEndWheren1 = ' A ' andn2 = ' E ' ) 
 　 　 UNION / * 找 最佳 路径 到达 终点 的 边 * / 
 　 　 SelectC1 . n1 , C1 . n2 , C1 . dFromCitytrafC1 , EndE1 
 　 　 WhereC1 . n2 = ' E ' andE1 . n1 = C1 . n2 
 　 　 　 　 andC1 . d + E1 . d = ( SelectdfromEndwheren1 = ' A ' andn2 = ' E ' ) 
 　 　 UNION / * 若 最佳 路径 是 图 中 一边 * / 
 　 　 Selectn1 , n2 , dfromCitytraf 
 　 　 Wheren1 = ' A ' andn2 = ' E ' 
 　 　 最后 显示 表 Path 中 的 记录 就是 最佳 路径 经过 的 各 结点 。 
 4 结论 
 　 　 A * 算法 除了 计算 始点 A → S ( 任 一点 ) 的 代价 外 ， 同时 还要 计算 S → B ( 目标 点 ) 的 代价 。 这样 A → S → B 必然 是 最佳 路径 。 从而 每次 总能 选到 ' 正确 ' 的 结点 来 扩展 。 但 A * 算法 的 复杂性 在于 计算 S → B 的 最小 代价 上 。 依据 不同 的 问题 领域 ， 找到 相应 的 启发 函数 ， 将 是 A * 算法 的 核心 。 
 　 　 使用 数据库 方法 时 ， 由于 原始数据 都 存在 一个 库中 ， 所以 算法 Graph - search 中 搜索 的 复杂性 就 转化成 了 对 原始 数据库 的 查询 的 复杂性 。 在 路径 A → S → B 的 搜索 中 ， A → S 及 S → B ( S 为 A → B 路径 中任 一点 ) 的 代价 很 容易 用 SQL 从 数据库 中 查询 到 ， 从中 可 比较 出 最小 的 代价 。 这时 只要 能 把 A → B ( 代价 最小 ) 分解 出 初始 点 、 中间 各点 、 及 目标 点 便 为 解 。 
 　 　 SQL 解法 的 特点 是 避免 了 繁杂 的 编程 问题 ， 由于 SQL 是非 过程 性 语言 ， 只要 正确 写出 了 最佳 路径 的 条件 ， 程序 就 能 自动 找到 这一 路径 中 的 边 ， 在 数据库 环境 下 很 容易 实现 ， 所谓 编程 就是 要 合理 的 数据库 设计 和 恰到好处 地 写出 条件 ， 但是 标准 SQL 语言 还 不能 处理 3GL 所能 处理 的 全部 问题 ， 从文中 已 看出 ， 递归 功能 在 SQL 中 无法 解决 ， 还有 一些 问题 虽然 能解 但 效率 低下 ， 故 在 有些 SQL “ 方言 ” 中 加入 了 一些 设施 以 扩展 它 的 功能 ， 如 DB2 中 的 WITH 语句 ， Oracle 中 的 PL / SQL 等 ， 但 由于 这些 都 是非 标准 设施 ， 影响 了 程序 的 可移植性 ， 本文 不予 讨论 ， 但 普遍 做法 是 把 SQL 嵌入 到 一个 3GL 语言 中 ， 这 就 迫使 现在 的 DBMS 都 要 有 连接 3GL 语言 的 能力 ， 如果 一个 问题 存在 SQL 算法 ， 就 不必 求助于 3GL ， 故 SQL 算法 的 研究 是 很 有 意义 的 。 
 作者 单位 ： 复旦大学 计算机系 ， 上海 200433 
 参考文献 
 1 蔡子经 , 施 伯乐 . 数据结构 . 上海 ： 复旦大学 出 出版社 , 1994 
 2 王朝 瑞 . 图论 . 国际 出版社 , 1985 
 3 胡运发 . 新型 程序设计 方法 . 复旦大学 计算机系 , 1991 
 4 施 伯乐 , 丁宝康 , 楼荣生 . 数据库系统 导论 . 北京 ： 高等教育出版社 , 1994 
