软件 学报 
 JOURNALOFSOFTWARE 
 1999 年 第 10 卷 第 8 期 Vol.10 No.81999 
 
 
 
 半 结构化 数据 查询 的 处理 和 优化 
 陈滢 　 王能斌 
 摘要 　 半 结构化 数据 的 特点 是 数据 的 结构 不规则 或 不 完整 , 其 模型 都 基于 带根 有向图 , 因此 , 查询处理 过程 本质 上 是 对 图 的 搜索 过程 . 另外 , 通配 路径 使 查询处理 更加 复杂化 . 文章 详细 介绍 了 异构 数据源 集成系统 Versatile 中 采取 的 半 结构 数据 OIM ( modelforobjectintegration ) 对象 的 查询 和 优化 策略 , 包括 查询 计划 的 生成 、 路径 扩展 和 路径 索引 、 层次 索引 和 基于 数据源 知识 这 3 种 查询 优化 方法 . 文章 介绍 的 方法 同样 适用 于 其他 的 半 结构化 数据模型 . 
 关键词 　 半 结构化 数据 , 查询处理 , 优化 . 
 中图法 分类号 　 TP311 
 QueryingandOptimizingSemistructuredData 
 CHENYingWANGNeng - bin 
 ( DepartmentofComputerScienceandEngineeringSoutheastUniversityNanjing210096 ) 
 Abstract 　 Semistructureddatahasirregularorincompletestructure . Inrecentresearchonsemistructureddatasourcesandintegrationforheterogeneousdatasources , modelsforsemistructureddataarebasedondirectgraphwithrootvertex , soqueryingsemistructureddataisequivalentwithsearchingingraph . Inaddition , pathwithwildcardcharactersbringsmorecomplexityinqueryprocessing . Inthispaper , theauthorspresentthestrategiesdeployedinqueryingandoptimizingOIM ( modelforobjectintegrating ) datainVersatile — — asystemforintegratingheterogeneousdatasources . Algorithmsforgeneratingqueryplanandextendingpatharediscussedindetailandthreeoptimizationmethods , pathindex ( Pindex ) , levelindex ( Lvindex ) andknowledgeofdatasourceareintroduced . Alsotheapproachcanbeapplicabletoothergraph - basedsemistructureddataeasily . 
 Keywords 　 Semistructureddata , queryprocessing , optimization . 
 　 　 半 结构化 数据 ( semistructureddata ) 的 特点 是 数据 的 结构 不规则 ( irregular ) 或 不 完整 ( incomplete ) ［ 1 ］ , 表现 为 数据 不 遵循 固定 的 模式 、 结构 隐含 、 模式 信息量 大 、 模式 变化 快 、 模式 和 数据 统一 存储 等 特点 . 半 结构化 数据 一般 有 两种 来源 . ① 直接 来自 半 结构化 数据源 , 如 Web 数据 、 各种类型 电子 文档 ( 电子表格 , TEX , WORD ) 、 电子邮件 等 , 这些 数据源 数据 是 典型 的 半 结构化 数据 ； ② 作为 异构 数据源 集成系统 的 公共 数据模型 引入 , 如 Versatile ［ 2 ］ , TSIMMIS ［ 3 ］ 和 LORE ［ 4 ］ , 之所以 采用 半 结构化 数据 作为 公共 数据模型 是因为 半 结构化 数据模型 既 能 描述 半 结构化 数据 , 同时 也 能 描述 结构化 的 数据 . 随着 WWW ( WorldWideWeb ) 的 普及 和 对 异构 数据源 系统 进行 集成 的 需要 , 半 结构化 数据 的 研究 近年来 逐渐 受到重视 . 人们 对半 结构化 数据 的 数据模型 ［ 2 ～ 5 ］ 、 查询语言 ［ 2 ～ 5 , 7 ］ 、 查询处理 ［ 1 , 4 , 6 , 7 ］ 以及 数据 存储 和 表示 ［ 8 ］ 都 作 了 一定 研究 . 半 结构化 数据 由 带有 根 节点 的 有向图 表示 , 如 文献 ［ 2 ］ 采用 OIM ( modelforobjectintegration ) , 文献 ［ 3 , 4 ］ 采用 OEM ( objectexchangemodel ) , 文献 ［ 5 ］ 采用 图 数据库 ( graphdatabase ) . 其中 节点 表示 对象 或子 对象 , 有 向 边 表示 对象 的 聚合 关系 , 节点 或 边上 的 标记 表示 对象 的 属性 . 半 结构化 对象 的 查询语言 采用 类 OQL ( objectquerylanguage ) 风格 , 如 文献 ［ 2 ］ 采用 OIQL ( objectintegrationquerylanguage ) , 文献 ［ 4 ］ 采用 LOREL , 为 适应 半 结构化 数据 模式 庞大 且 用户 不 完全 了解 其 模式 的 特点 , 查询语言 支持 通配 路径 的 查询 , 文献 ［ 5 ］ 甚至 支持 正规 路径 表达式 . 因此 , 半 结构化 数据 的 查询 本质 上 是 对 有向图 的 搜索 , 它 具有 以下 特点 ： 由于 数据 和 模式 信息 统一 存放 ( 自 描述性 ) , 因此 , 很难 进行 与 关系数据库 查询处理 类似 的 处理 和 优化 方法 ； 由于 数据结构 不规则 或 不 完整 , 需 支持 内容 的 通配 和 类型 自动 转换 ； 有向图 中 可能 存在 圈 , 因此 在 处理 通配 路径 时 , 应 避免 查询 进入 无限 循环 . 一般 地 , 针对 半 结构化 数据 的 有向图 查询 只能 基于 穷尽 搜索 , 在 遍历 整个 图 的 过程 中 寻找 符合条件 的 路径 , 显然 , 这种 方法 在 图 很大 时 效率 很 低 . 为了 克服 这个 缺点 , 文献 ［ 4 ］ 采用 数据 导则 ( DataGuide ) , 文献 ［ 9 ］ 采用 图 模式 ( graphschemas ) 的 方法 , 它们 都 是从 有向图 中 抽取 出半 结构化 数据 的 模式 信息 以 指导 查询处理 和 优化 . 此外 , 文献 ［ 4 ］ 还 提出 了 模式 的 一个 递增 维护 算法 , 并且 利用 索引 提高 查询 速度 . 但是 , 对于 数据量 大 或 模式 变化 的 数据源 , 如 某些 Web 数据 , 用 模式 信息 效率 较 低 ( 如 文献 ［ 4 ］ 中 阐明 从 OEM 转化 为 DataGuide 的 算法 相当于 将 非 确定 自动机 NFA 转化 为 等价 的 确定 自动机 DFA , 因此 , 最坏 情况 是 其 复杂度 可能 是 指数 级 ) . 
 　 　 本文 详细 介绍 异构 数据源 集成系统 Versatile 中 采取 的 半 结构化 数据 的 查询 和 优化 策略 . Versatile ［ 6 , 7 ］ 是 东南大学 研制 的 一个 基于 CORBA ［ 8 ］ 的 异构 数据源 集成系统 原型 , 旨在 以 “ 即插即用 ” 方式 集成 来自 不同 数据源 的 数据 , 该 系统 的 研制 受到 国家自然科学基金 资助 . 在 Versatile 中 采用 对象 集成 模型 OIM ［ 10 ］ 作为 各 数据源 的 输出 模式 的 数据模型 , 查询语言 是 OIQL . 查询 集成 器 QI ( queryintegrator ) 接收 OIQL 查询 后 分解 至 各个 数据源 . 在 Versatile 中 , 有些 数据源 , 如 RDBMS 和 OODBMS , 由于 本身 具有 数据管理 功能 , 因此 相应 的 包装 器 ( wrapper ) 将 OIQL 翻译 为 本地 查询语言 ( 如 SQL , OQL 等 ) , 再 将 结构 转换 为 OIM 对象 ； 而 某些 数据源 , 如 文件系统 、 Web 数据 , 由于 自身 没有 数据 查询 功能 , 因此 在 Versatile 中 包装 器 将 数据 包装 为 OIM , 然后 实施 OIM 的 查询处理 ［ 11 ］ . 本文 介绍 在 各 数据源 中 如何 进行 查询处理 , 因此 不 涉及 多 数据源 问题 * 1 . 其中 查询 优化 策略 采用 了 路径 索引 、 层次 索引 和 数据源 知识 , 利用 这些 优化 措施 可以 在 很大 程度 上 减少 有向图 的 搜索 范围 . 本文 的 讨论 虽然 是 基于 OIM , 但 同时 也 是 用于 其他 的 基于 有向图 的 半 结构化 数据模型 . 
 1 　 OIM 对象 模型 
 1.1 　 OIM 对象 
 　 　 OIM 对象 模型 是 Versatile 中 的 半 结构化 数据模型 . 在 OIM 对象 模型 中 , 一个 对象 用 四元组 〈 OID , n , t , c 〉 表示 , 其中 OID 是 对象 标识符 , n 表示 对象 名 , t 表示 对象 类型 , c 表示 对象 值 , 该 四元组 称为 对象 描述 子 . t 除了 可以 表示 基本 数据类型 ( 如 integer , char , float , string 等 ) 外 , 还 可 表示 集合 数据类型 ( 如 set , list , bag 等 ) 、 可变 长 数据类型 （ CLOB , BLOB ） 和 引用 类型 ( ref ) . 如果 一个 对象 的 类型 是 引用 类型 , 表示 该 对象 由 其他 对象 聚集 而成 , 称为 该 对象 的 亲子 对象 , 它 的 值 是 亲子 对象 标识符 的 集合 . 在 OIM 对象 模型 中 , 相关 的 一组 对象 聚集 在 一起 , 组成 一个 OIM 对象 . 例如 , 关系数据库 的 一张 表 、 文件系统 的 一个 文件 , WWW 上 由 某个 结点 出发 通过 锚 连接 的 HTML 文件 的 集合 均 可 看做 OIM 对象 . 一个 OIM 对象 O 可以 用 带根 连通 有向图 表示 成 O （ r , V , E ） , 其中 节点 集 V 表示 对象 , 边集 E 表示 对象 之间 的 引用 关系 . 根 节点 r 是 一个 聚集 对象 , 它 是 引用 类型 的 . 除了 用 OID 外 , 还 可以 用 OIM 路径 表示 对象 集合 或用 带 谓词 的 路径 表示 对象 , 路径 允许 带 通配符 , 下面 将 通过 举例 加以 说明 . 
 　 　 OIQL 是 OIM 对象 的 查询语言 , 它 包括 DML ( datamanipulationlanguage ) 和 DDL ( datadefinitionlanguage ) . 其中 查询 语句 是 select ... from ... where ... 形式 ( sfw ) . 
 1.2 　 OIM 对象 举例 
 例 1 ： 图 1 是从 一个 Web 页面 得到 的 OIM 对象 * * . 描述 的 是 计算机系 教师 和 学生 的 情况 . 
 
 图 1 　 OIM 对象 示例 
 　 　 图 1 中 的 OID , 比如 & r , & 1 , & 2 等 由 系统生成 , 保证 唯一性 且 对 用户 透明 . 根 对象 表示 为 ( & r , CS , REF , { & 1 , & 2 , & 3 , & 4 } ) , 在 图 中 的 路径 是 CS , 对象 & 1 , & 2 , & 3 , & 4 是 & r 的 亲子 对象 . “ 王 教授 的 姓名 ” 可以 表示 为 ( & 15 , Name , STRING , Wang ) , 它 是 原子 对象 , 它 所 对应 的 一条 路径 是 CS : TEACHER : Professor : Name . 对象 在 OIM 图内 可能 对应 若干 路径 , 同时 , 一个 路径 可能 表示 许多 对象 . 例如 , 路径 CS : TEACHER : Professor 表示 所有 的 “ 教授 ” 对象 集合 . 路径 CS : * : Name 表示 所有人 的 姓名 , 其中 符号 * 可以 匹配 零个 或 多个 对象 名 序列 . 
 　 　 OIM 图内 可能 含有 圈 , 如 路径 * : Publication 展开 后 在 OIM 内 可以 对应 无数条 路径 , 例如 , CS : Publication , CS : STUDENT : DoctorStudent : Publications : Publication , CS : Publication : Author : DoctorStudent : Publication 等 , 其 原因 就是 存在 有 向 边 构成 的 环 & 8 → & 18 → & 4 → & 10 → & 8 . 因此 , 在 查询处理 时 应该 能够 有效 抑制 统配 路径 的 展开 . 
 　 　 下面 举 两个 OIQL 的 查询 例 . 
 　 　 Q1 : 查询 李教授 的 信息 . 
 SelectofromCS : Teacher : Professorowhereo . Name = “ Li ” 
 　 　 Q2 : 查询 所有 作者 信息 . 
 SelectofromCS : Publication : Authoro 
 　 　 Q3 : 查询 所有 作者 , 包括 博士生 王 的 文章 . 
 SelectofromCS : Publicationowhereo . Author : * : DoctorStudent : Name = ‘ Wang ’ 
 Q4 ： 假设 在 另 一个 有关 人事 信息 的 OIM 对象 P ( 来自 文件系统 或 Web 页面 ) 内 存放 有关 人员 的 详细信息 . 要求 查询 年龄 大于 24 岁 的 博士生 的 详细信息 及 发表 的 文章 . * 2 
 　 　 Selecto1 , o2fromCS : * : DoctorStudento1 , P : Persono2whereo1 . Name = o2 . Nameando2 . age ＞ 24 
 　 　 注意 , 查询 结构 仍 是 OIM 对象 , Q4 的 结果 是 o1 和 o2 的 “ OIM 对象 并 ” . 
 2 　 OIM 对象 查询处理 
 2.1 　 有关 符号 和 定义 
 　 　 为 方便 以下 说明 , 首先 引进 一些 符号 和 定义 . o 表示 OIM 对象 , Name ( o ) , TYPE ( o ) 和 VAL ( o ) 分别 表示 对象 的 名称 、 类型 和 值 , 对应 的 值域 用 NAME , TYPE 和 VAL 表示 . Or 特指 根 对象 . OIM 对象 中 相对 于 o 的 路径 po = o . n1 : n2 : ... : nk , k ≥ 1 , 其中 n1 ∈ NAME ∪ ｛ * , ? } , 1 ≤ i ＜ k , nk ∈ NAME , 表示 从 节点 o 出发 依次 经过 对象 名是 n1 : n2 : ... : nk 的 节点 ； ？ 和 * 称为 通配符 , ？ 匹配 任何 对象 名称 , * 匹配 任意 长度 的 对象 名称 序列 . 带有 通配符 的 路径 是 半 结构化 数据 查询 的 重要 特点 , 它 大大 方便 了 用户 对 结构 不 完整 或 不 熟悉 的 数据 进行 查询 . 路径 p 的 长度 ｜ p ｜ = k . 特别 地 , 当 o = Or 时 , 称 pOr 是 绝对路径 . Or 中 的 绝对路径 集合 记为 P . 
 　 　 定义 1 ( 路径 展开 函数 ) . 路径 展开 函数 X : po → { o1 , o2 , ... , om } , X 由 后面 的 路径 展开 算法 ( 算法 2 ) 得到 . 称 o 是 扩展 点 . 若 o = or , 称 绝对路径 pOr 是 对象 oi ( i = 1 , 2 , ... , m ) 在 Or 中 的 一条 路径 . 对象 oi 的 所有 绝对路径 记为 P ( oi ) . 
 　 　 X ( po ) 是 所有 从 节点 o 经 路径 po 所能 到达 的 节点 的 集合 , 因为 or 中 的 节点 个数 是 有限 的 , 因此 , X ( po ) 是 有限 集合 . 求出 该 集合 是 半 结构化 数据 查询 的 主要 工作 , 相当于 对 关系数据库 的 基本 物理 操作 表 进行 扫描 . 
 　 　 定义 2 ( 汇聚 路径 函数 ) . OIM 对象 o 相对 于 o ′ 的 汇聚 路径 函数 Ko ′ : o → 2p , Ko ′ ( o ) = { p ｜ ∈ X ( po ′ ) } . 
 　 　 Ko ′ ( o ) 是 所有 从 节点 o ′ 到达 o 的 路径 集合 . 由于 图中 存在 圈 , 因此 , P 和 K ( o ) 可能 是 无穷 集合 . 这 说明 了 OIM 中 对象 路径 表示 的 多样性 , 因而 方便 用户 书写 查询 语句 , 但 也 增加 了 查询 和 优化 的 难度 . 实际上 , 我们 感兴趣 的 是 Ko ′ ( o ) 中 一些 “ 等价 路径 ” 的 集合 , 它们 可以 用于 查询 改写 , 有利于 在 路径 扩展 时 减少 工作量 . 
 2.2 查询处理 
 　 　 OIM 的 查询处理 过程 是 ： OIQL 语法 检查 , 查询 改写 , 生成 查询 计划 , 优化 , 执行 , 返回 结果 （ 也 是 OIM 对象 ） . 
 　 　 查询 改写 将 OIQL 语句 改写 为 正规 的 查询 形式 , 即 在 where 子句 中 的 布尔 式 中 不 含有 路径 , 例如 , Q1 改写 为 Q1 ′ : SelectofromCS : Teacher : Professoro , o . Nameo1whereo1 = “ Li ” . 这 是 要 引进 新 的 别名 . 限于 篇幅 , 本文 不 讨论 查询 改写 . 
 　 　 查询 计划 表示 成树 TQ = ( V , E ) 的 形式 , 每个 节点 v ∈ V 都 表示 一种 操作 , 称为 操作 节点 , 其 操作符 OP ( v ) ∈ { Χ , Γ , δ , Π , Σ } , 分别 表示 节点 扩展 、 连接 、 选择 、 投影 和 构造 等 操作 . 
 　 　 定义 3 （ 输入 变量 、 输出 变量 和 产生 变量 ） . 边 e 用 三元组 ( vi , vj , Output ( vi , vj ) ) 表示 , Output ( vi , vj ) 是 操作 节点 vi 向 vj 的 输出 变量 集合 Output ( v ) = ∪ v ′ 是 v 的 父 节点 Output ( v , v ′ ) ; 操作 节点 v 的 输出 变量 集合 Input ( v ) = ∪ v ′ 是 v 的 子 节点 Output ( v ′ ) . 特别 地 , 叶 操作 节点 的 输入 变量 集合 和 根 操作 节点 的 输出 变量 集合 为 . 在 操作 节点 v 中 产生 的 变量 记为 Gen ( v ) . 
 　 　 在 查询 树 TQ 中 , 节点 间 传递 的 数据 是 元组 集合 , 而 输入 变量 和 输出 变量 集合 实际上 描述 了 元组 各域 的 构成 . 操作 节点 v 及其 Input ( v ) , Output ( v ) 和 Gen ( v ) 满足 Output ( v ) Input ( v ) ∪ Gen ( v ) . 
 　 　 节点 的 输出 变量 集合 在 树 中 表示 为边 的 附标 , 为了 强调 节点 间 实际 传递 的 是 元组 集合 , 在 图 中用 ( ) 表示 变量 集合 , 而 不是 { } ； 同时 , 为 表示 清晰 , 用 别名 表示 输入 / 输出 / 产生 变量 * 3 . 如 查询 Q1 的 查询 树如图 2 ( a ) 所示 . 计算 过程 从树 的 叶 节点 到 根 节点 方向 由 底向上 进行 , 各 节点 操作 及 变量 传递 说明 如下 . 
 　 
 Q1 ( a ) 查询 计划 树 　 　 　 　 　 　 　 　 　 　 　 Q2 ( b ) 查询 计划 树 
 图 2 　 
 　 　 操作 节点 ( 1 ) : ( 叶 节点 ) 是 路径 扩展 操作 O1 = X ( TEACHER : PROFESSOROcs , 因为 CS 是 整个 OIM 对象 的 根 , 因此 扩展 操作 的 路径 的 扩展 节点 是 OCS , 扩展 路径 是 TEACHER : PROFESSOR ； 扩展 结果 ( 节点 集合 ) 存放 在 变量 O1 中 ； 节点 ( 5 ) 产生 的 结果 用 输出 变量 集合 （ O1 ） 表示 , 它 是 元组 ( o1 ) 的 集合 , o1 通过 扩展 节点 OCS 扩展 得到 ； 对应 Q1 , 得到 { & 5 , & 6 } ; 
 　 　 操作 节点 ( 2 ) : 接收 输入 变量 集合 ( O1 ) , 对 所有 的 o1 ∈ O1 , 计算 O2 = X ( NAMEO1 ) , 并 将 O1 × O2 加入 到 结果 集合 中 ； 节点 ( 4 ) 产生 的 结果 用 输出 变量 集合 ( O1 , O2 ) 表示 , 它 是 元组 ( o1 , o2 ) 的 集合 , o2 通过 节点 o1 扩展 得到 ； 对应 Q1 , 得到 { ( & 5 , & 13 ) , ( & 6 , & 15 ) } ； 
 　 　 操作 节点 ( 3 ) : 进行 选择 操作 , 不 产生 新 的 变量 ； 对应 Q1 , 得到 { ( & 5 , & 13 ) } ； 
 　 　 操作 节点 ( 4 ) : 进行 投影 操作 , 不 产生 新 的 变量 ； 对应 Q1 , 得到 { ( & 5 ) } ； 注意 , 投影 不 产生 重复 元组 ； 
 　 　 操作 节点 ( 5 ) : 进行 结果 构造 操作 , 将 输入 集合 构造 成新 的 OIM 对象 O ㏑ ESULT . 
 　 　 由 上述 分析 可知 , 边上 的 输入 / 输出 变量 集合 实际 代表 了 对象 元组 的 集合 . 由于 选择 操作 针对 原子 对象 , 因此 查询处理 应 尽量 进行 路径 扩展 操作 . 如 Q1 中 where 子句 的 原子 布尔 式 o . name = ‘ Li ’ , 在 路径 扩展 到 o 时 , 并 不能 直接判断 o . name , 因为 可能 在 节点 o 扩展 路径 name 会 产生 对象 集合 , 因此 生成 扩展 节点 ( 4 ) , 这 也 是 要求 进行 查询 改写 的 主要 原因 . Q3 中 的 o 类似 . 由此可见 , 路径 扩展 是 OIM 查询处理 中 优先级 最高 的 操作 , 这样 有利于 进行 查询 优化 . 
 　 　 查询 Q4 涉及 两个 OIM 对象 的 操作 , 查询 计划 如图 2 ( b ) 所示 . 其中 节点 ( 6 ) 是 连接 操作 , 根据 条件 连接 来自 节点 ( 3 ) 和 节点 ( 5 ) 的 集合 . 连接 操作 不 产生 新 的 变量 . 
 2.3 查询 计划 生成 
 　 　 查询 计划 生成 过程 根据 查询 语句 生成 树 , 包括 操作 节点 和 输出 / 输出 / 产生 变量 集合 . 下面 给出 OIM 查询 计划 生成 算法 . 这里 , 假定 where 子句 中 各 原子 布尔 式 通过 AND 连接 , 且 每个 原子 布尔 式 最 多 涉及 两个 别名 . 生成 过程 中 给 每个 新 生成 的 操作 节点 依次 编号 , i = 1 , 2 , ... , 相应 的 节点 用 vi 表示 . 
 　 　 算法 1 . 查询 计划 生成 
 　 　 输入 ： 经 匹配 的 、 正规 的 OIQL 查询 语句 Q ; 
 　 　 输出 ： Q 的 查询 计划 TQ ; 
 　 　 步骤 ： 
 　 　 ( 1 ) 为 from 子句 内 每个 路径 p 及其 对象 别名 O 构造 扩展 操作 节点 XO , 过程 如下 ： 
 　 　 　 　 ( 1.1 ) 若 p 是 绝对路径 , 生成 以根 对象 为 扩展 节点 的 扩展 操作 叶 节点 , 输出 变量 是 { O } , 产生 变量 是 { O } ； 
 　 　 　 　 ( 1.2 ) 若 p 是 另 一 对象 别名 O ′ 的 相对路径 , 生成 以 O ′ 为 扩展 节点 的 扩展 操作 节点 XO , 编号 i , 生成 有 向 边 vj → XO , j = Newest ( O ′ , i ) , 其中 Newest ( O ′ , i ) = max { j ｜ j ＜ i 且 O ′ ∈ Output ( Vj ) } ; 产生 变量 是 { O } ； 输出 变量 是 Output ( Xj ) ∪ { O } ; 
 　 　 ( 2 ) 为 where 子句 中 每个 原子 布尔 式 B 构造 选择 或 连接 操作 节点 δ BO 或 Γ BO1 , O2 , 过程 如下 ： 
 　 　 　 　 ( 2.1 ) 若 B 仅 涉及 一个 别名 O , 生成 选择 操作 节点 δ BO , 编号 i ； 生成 有 向 边 vj → δ BO , j = Newest ( O , i ) ; 产生 变量 是 ; 输出 变量 Output ( vj ) ; 
 　 　 　 　 ( 2.2 ) 若 B 仅 涉及 两个 别名 O1 , O2 , 生成 连接 操作 节点 Γ BO1 , O2 , 编号 i ； 生成 有 向 边 vj → Γ BO1 , O2 和 vk → Γ BO1 , O2 , j = Newest ( O1 , i ) , j = Newest ( O2 , i ) ; 产生 变量 是 ; 输出 变量 Output ( vj ) ∪ Output ( vk ) ; 
 　 　 ( 3 ) 构造 自然 连接 操作 节点 Γ vj , vk , 过程 如下 ： 
 　 　 　 　 ( 3.1 ) 令 NoParent = { v | 不 存在 v ′ , v ′ → v } , 若 存在 vj , vk ∈ NoParent , 且 Output ( vj ) ∩ Output ( vk ) ≠ , 生成 自然 连接 操作 节点 , Γ vj , vk , 连接 条件 是 vj 和 vk 的 元组 集合 在域 Output ( vj ) ∩ Output ( vk ) 处 相等 ； 生成 有 向 边 vj → Γ vj , vk 和 vk → Γ vj , vk ； 产生 变量 是 ; 输出 变量 Output ( vj ) ∪ Output ( vk ) ; 
 　 　 　 　 ( 3.2 ) 重复 ( 3.1 ) 直至 无 满足 自然 连接 的 节点 存在 ; 
 　 　 ( 4 ) 构造 投影 节点 Π , 过程 如下 ： 
 　 　 　 　 ( 4.1 ) 令 S 表示 select 子句 中 别名 的 集合 , 若 v ∈ NoParent 且 Output ( v ) ∩ S ≠ , 生成 投影 节点 Π Output ( v ) ∩ S ； 生成 有 向 边 v → Π Output ( v ) ∩ S ； 产生 变量 是 ; 输出 变量 是 Output ( v ) ∩ S ; 
 　 　 　 　 ( 4.2 ) 重复 ( 4.1 ) 直至 无 满足 投影 条件 的 节点 存在 ; 
 　 　 ( 5 ) 构造 结果 构造 节点 Σ , 产生 有 向 边 v → Σ , v ∈ NoParent ； 产生 变量 是 ORESULT . 
 3 　 OIM 对象 查询 优化 
 　 　 OIM 中 查询 优化 包括 静态 优化 和 路径 扩展 优化 方式 . 静态 优化 是 对 查询 计划 树 实施 等价 变换 , 主要 方法 有 ： ( 1 ) 下压 选择 和 投影 节点 , 例如 , 图 2 ( b ) 中 的 选择 操作 节点 ( 7 ) 可以 下压 ； ( 2 ) 短路 操作 , 这是 OIM 对象 查询 的 一个 重要 特点 , 所谓 短路 是 指 , 路径 扩展 结果 的 子集 满足条件 后 就 无需 继续 扩展 . 例如 , 查询 书中 目录 包含 Database 的 书籍 . 
 　 　 Q5 : selectofromStore : Bookowhereo . * : subtitle = ‘ Database ’ 
 　 　 在 对象 o 处 扩展 路径 * : title 所 得到 的 集合 可能 很大 , 但 只要 其中 有 一个 对象 o 满足条件 o = ‘ Database ’ , 则 无需 继续 扩展 . 
 　 　 由 查询 计划 可知 , 路径 扩展 操作 是 OIM 查询处理 的 基本操作 , 算法 2 给出 了 利用 广度 优先 ( breadthfirstsearch , 简称 BFS ) 搜索 方法 的 路径 展开 过程 . 
 　 　 算法 2 . 路径 展开 算法 * 4 
 　 　 输入 ： OIM 对象 中 相对 o 的 路径 po = o . n1 : n2 : ... : nk 
 　 　 输出 ： 从 o 开始 经 路径 po 所能 到达 的 节点 集合 X ( po ) 
 　 　 步骤 ： 
 　 　 ( 1 ) 　 　 　 　 o . level ← 0 ; Queue ← { o } ; oc = Queue . Get ; ∥ 取 并 移去 队列 Queue 的 第 1 个 元素 
 　 　 ( 2 ) fori = 1tokdo 
 　 　 ( 2.1 ) while ( oclevel = i - 1 ) do 
 　 　 ( 2.1 . 1 ) ifni ∈ NAMEthenforoc 的 每个 亲子 对象 oc ′ do 
 　 　 ( 2.1 . 1.1 ) ifNAME ( oc ′ ) = niandoc ′ . state ≠ checkedthenQueue . Add ( oc ′ ) ; oc ′ . level ← oc ′ . level + 1 ; oc ′ . state = checked 
 　 　 ( 2.1 . 2 ) ifni = ? thenforoc 的 每个 亲子 对象 oc ′ do 
 　 　 ( 2.1 . 2.1 ) ifoc ′ . state ≠ checkedthenQueue . Add ( oc ′ ) ; oc ′ . level ← oc . level + 1 ; oc ′ . state = checked 
 　 　 ( 2.1 . 3 ) ifni = * then 以 oc 为 扩展 节点 , 利用 BFS 扩展 任意 长度 直至 找到 所有 节点 oc ′ , oc ′ . state ≠ checked 且 Name ( oc ′ ) = n ( i + 1 ) , Queue . Add ( oc ′ ) ； oc ′ . level ← oc . level + 2 ; oc ′ . state = checked 
 　 　 ( 2.1 . 4 ) oc = Queue . Get 
 　 　 ( 3 ) returnQueue . 
 　 　 由于 图中圈 的 存在 和 统配 路径 , 路径 扩展 结果 可能 很大 且 较 费时 , 特别 是 步骤 ( 2.1 . 3 ) , 需要 对 * 进行 BFS 扩展 . 显然 , 短路 方法 可以 和 扩展 操作 结合 , 从而 避免 不必要 的 进一步 扩展 . 另外 , LORE ［ 4 ］ 中 的 值 索引 Vindex 和 标号 索引 ( Lindex ) 技术 也 可以 用于 OIM 查询 优化 . 除此之外 , 本文 介绍 几种 其他 的 针对 提高 扩展 操作 的 查询 优化 方法 . 
 3.1 路径 索引 
 　 　 路径 索引 Pindex 将 路径 p 映射 到 X ( p ) , 可以 用 Hash 表 实现 , 这样 , 在 扩展 集合 时 可以 直接 通过 查表 得到 , 可以 大大 加快 路径 扩展 操作速度 . 查询 处理器 在 生成 查询 计划 时会 根据 路径 有无 索引 生成 相应 的 操作 节点 ( X 节点 或 Pindex 节点 ) . 路径 索引 有 两种 创建 方式 ： 人工 创建 或 由 系统 自动 创建 . 数据源 管理员 通过 OIQL 的 DDL 定义 索引 ； 系统 自动 创建 是 系统 根据 统计 得出 的 访问 频率 大 的 路径 , 在 路径 访问 频率 到达某 一 固定值 fH 时 , 查询 处理器 会 自动 为 该 路径 建立 Pindex . 
 路径 索引 适于 表示 含 通配符 的 路径 , 尤其 适合 绝对路径 , 这样 可以 很快 地 在 查询 计算 的 初始 阶段 扩展 到 局部 的 节点 集合 . 
 3.2 层次 索引 
 　 　 定义 4 ( 层次 ) . 对象 o 的 层次 level ( o ) = min ( { k | k = | p | , p ∈ P ( o ) 且 p 不含 通配符 } ) . 
 　 　 层次 索引 Lvindex 将 层次 和 对象 名 的 二元 组 映射 到 对象 oid , 实现 对象 的 快速 定位 . Lvindex 特别 适合 在 不同 类 对象 中所含 的 对象 名 没有 重复 的 情况 , 例如 , 在 Versatile 中 从 关系数据库 ( RDBWrapper ) 和 文件系统 ( FSWrapper ) 中 的 半 结构化 数据 . 层次 路径 只能 扩展 绝对路径 中 无 通配符 的 部分 , 但是 通过 拓广 可以 适用 于 相对路径 . 例如 , 有 描述 电子邮件 的 OIM 对象 Email , 欲 扩展 路径 Email : Address : To : Country , 利用 Lvindex ( 3 , ‘ Country ’ ) 可以 得到 节点 集合 . 
 3.3 　 利用 数据源 知识 
 　 　 在 解 空间 搜索 过程 中 , 利用 特定 问题 的 知识 以 减少 搜索 范围 是 一个 普遍 准则 . 同样 , 在 半 结构化 数据源 的 查询 中 , 虽然 数据 的 结构 隐含 和 半 完整 , 但是 针对 某种 数据源 , 其 结构 或多或少 地 存在 一些 结构 或 语义上 的 约束 , 我们 称此 为 数据源 知识 . 充分利用 数据源 知识 可以 提高 在 查询处理 特别 是 路径 扩展 的 效率 . 为此 , 我们 定义 一种 简单 的 描述语言 ( knowledgedefinitionlanguage , 简称 KDL ) 用于 描述 数据源 知识 . KDL 是 一些 规则 的 序列 , 每 一个 规则 实际 约束 了 路径 的 组成 . 如图 1 中 的 一条 规则 是 ： Project : Member , 说明 Member 在 路径 中仅 出现 在 Project 之后 ( 这里 除去 通配符 * 和 ? ) ； 而 TEACHER : Professor 不是 规则 . 利用 KDL 可以 在 路径 扩展 的 前期 去掉 不必要 的 搜索 空间 和 发现错误 路径 . 另外 , KDL 在 某种程度 上 可以 用于 构造 基于 路径 的 视图 , 通过 在 规则 中 添加 “ 虚拟 规则 ” , 可以 欺骗 查询 处理器 认为 某 路径 非法 而 拒绝 查询处理 , 这时 规则 中 需用 到 通配符 . 
 　 　 另外 , 下面 举例说明 利用 HTML 语法 的 Web 数据源 通用 KDL . 这里 , Web 数据源 的 半 结构化 模型 是从 标记 图 得到 的 , 简言之 , 标记 图 是从 HTML 标记 导出 的 一种 通用 的 Web 数据源 的 半 结构化 模型 . 
 　 　 ( 1 ) HEAD : TITLE 
 　 　 ( 2 ) TABLE : TR 
 　 　 ( 3 ) ... 
 　 　 显然 , 利用 KDL 得到 的 结构 约束 完全 可以 从 包装 器 构造 OIM 对象 时 动态 获得 , 但是 要 获得 数据源 OIM 的 “ 完备 ” 的 规则 集合 , 其 运算量 是 庞大 的 , 且 元 数据 存储量 很大 . 
 4 　 结束语 
 　 　 半 结构化 数据 的 查询 及 相关 技术 是 异构 数据源 集成 和 网络 资源共享 的 一个 研究 重点 . 本文 详细 介绍 了 Versatile 中 对 半 结构化 数据 的 查询 和 优化 策略 , 给出 了 查询 计划 的 构造 算法 和 3 种 针对 减少 路径 扩展 代价 的 优化 方法 . 由于 OIM 采用 带根 连通 有向图 形式 , 因此 , 本文 的 技术 同样 适用 于 其他 基于 相同 或 相似 结构 的 半 结构化 数据源 模型 , 如 OEM . 我们 进一步 的 研究 是 基于 半 结构化 数据源 的 视图 技术 、 扩展 KDL 以及 KDL 的 自动 构造 和 维护 技术 . 
 注 ： 本文 研究 得到 国家自然科学基金 资助 . 
 * 1 　 一种 简易 的 解决 查询 来自 多 数据源 OIM 对象 的 方法 是 将 所有 OIM 对象 传输 至 同一 地点 ， 再 实施 查询 ． 
 * * 　 Web 页面 通过 WebWrapper 抽取 出来 ， 并 组装 成 OIM ． 实际 的 Web 页面 较 复杂 ， 这里 仅 是 简化 的 例子 ． 
 * 2 　 这里 ， 我们 假定 没有 相同 姓名 的 人员 ， 且 忽略 可能 有 的 语义 异构 问题 ． 
 * 3 　 严格 地 讲 ， 别名 表示 OID ； 变量 用于 描述 节点 间 传递 的 数据 ． 用 同一 标识符 是 为了 表达 它们 的 对应 关系 ． 
 * 4 　 算法 未 考虑 错误 路径 的 情况 ， 实际 计算 时 对 错误 路径 仅 需 返回 空集 ． 
 本文 通讯联系 人 : 王能斌 , 南京 210096 , 东南大学 计算机科学 与 工程系 
 作者简介 ： 陈滢 , 1973 年生 , 博士 , 主要 研究 领域 为 数据库 , 计算机网络 . 
 王能斌 , 1929 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 数据库 , 信息系统 . 
 作者 单位 ： 东南大学 计算机科学 与 工程系 　 南京 　 210096 
 参考文献 
 　 　 1 　 SergeAbiteboul . Queryingsemi - structureddata . In : FotoAfrati , PhokionKolaitiesed . LectureNotesinComputerScience1186 , DatabaseTheory — — ICDT ' 97 . NewYork : Springer - Verlag , 1997.1 ～ 18 
 　 　 2 　 WangNing , ChenYing , YuBen - quanetal . Versatile : anextensibleintegrationsystemforheterogeneousdatabasedonCORBA . In : ZhouLi - zhued . Proceedingsofthe1997IEEEInternationalConferenceonIntelligentProcessingSystems ( ICIPS ' 97 ) . Beijing : InternationalAcademicPublishers , 1997.1589 ～ 1593 
 　 　 3 　 ChawatheS , Garcia - MolinaH , HammerJetal . TheTSIMMISproject : integrationofheterogeneousinformationsources . In : Proceedingsofthe10thAnniversaryMeetingoftheInformationProcessingSocietyofJapan.1994 . 7 ～ 18 
 　 　 4 　 McHughJ , AbiteboulS , GoldmanRetal . Lore : adatabasemanagementsystemforsemistructureddata . ACMSIGMOD , 1997 , 26 ( 3 ) : 54 ～ 66 
 　 　 5 　 BunemanP , DavidsonS , FernandezMetal . Addingstructuretounstructureddata . In : AfratiFoto , KolaitiesPhokioned . LectureNotesinComputerScience1186 , DatabaseTheory — — ICDT ' 97 . NewYork : Springer - Verlag , 1997.336 ～ 350 
 　 　 6 　 GoldmanRoy , WidomJennifer . DataGuides : enablingqueryformulationandoptimizationinsemistructureddatabases . In : JarkeMatthias , CareyMichael , DittrichKlausReds . Proceedingsofthe23rdVeryLargeDatabaseConference . SanFrancisco : MorganKanfmannPublishers , Inc . , 1997.436 ～ 445 
 　 　 7 　 BunemanP , DavidsonS , HillebrandGetal . Aquerylanguageandoptimizationtechniquesforunstructureddata . In : JagadishHV , InderpalSinghMumickeds . ProceedingsoftheACMSIGMODConference ' 96 . NewYork : AssociationforComputingMachinery , Inc . , 1996.505 ～ 516 
 　 　 8 　 陈滢 , 王宁 , 俞本权 等 . 异构 数据源 系统 中半 结构化 数据 的 存取 与 表示 服务 . 计算机科学 , 1998 , 25 ( 增刊 ) : 205 ～ 207 
 ( ChenYing , WangNing , YuBen - quanetal . Accessandrepresentationserviceforsemistructureddatainheterogeneousdatasourcessystem . ComputerScience , 1998 , 25 ( supplement ) : 205 ～ 207 ) 
 　 　 9 　 FernandezM , SuciuD . Optimizingregularpathexpressionsusinggraphschemas . In : UrbanSD , BertinoElisaed . Proceedingsofthe14thInternationalConferenceonDataEngineering . LosAlamitos : ThePrintingHouse , 1996.14 ～ 23 
 　 10 　 王宁 , 徐宏炳 , 王能斌 . 基于 带根 连通 有向图 的 对象 集成 模型 及 代数 . 软件 学报 , 1998 , 9 ( 12 ) : 894 ～ 898 
 ( WangNing , XuHong - bing , WangNeng - bin . Adatamodelandalgebraforobjectintegrationbasedonarootedconnecteddirectedgraph . JournalofSoftware , 1998 , 9 ( 12 ) : 894 ～ 898 ) 
 　 11 　 陈滢 , 王宁 , 俞本权 . 异构 数据源 系统 中 包装 器 研究 和 实现 . 见 : 傅育熙 编 . 第 7 届 全国 青年 计算机 工作者 会议 （ NCYCS ' 98 ） . 上海 : 上海 科学技术 文献 出版社 , 1998.352 ～ 359 
 ( ChenYing , WangNing , YuBen - quanetal . Wrapperforheterogeneousdatasourcessystem — — researchandimplementation . In : FuYu - xied . Proceedingsofthe7thNationalConferenceofYouthComputerScientist . Shanghai : ShanghaiScientificandTechnologicalLiteraturePublishingHouse , 1998.352 ～ 359 ) 
 本文 1998 - 06 - 02 收到 原稿 , 1998 - 09 - 01 收到 修改稿 
