软件 学报 
 JOURNALOFSOFTWARE 
 1999 年 　 第 10 卷 　 第 10 期 　 Vol.10 　 No.10 　 1999 
 
 
 
 时态 数据 的 变 粒度 分段 存储 策略 及其 效益 分析 
 唐常杰 于 中华 　 游志胜 　 张 天庆 相 利民 
 
 摘要 　 根据 时态 数据库 用户 对 数据 厚今薄古 的 需求 特点 , 该文 提出 变 粒度 分段 存储技术 , 将 一个 对象 的 历史 分为 3 个 时期 , 分 介质 、 变 粒度 存储 . 文章 讨论 了 分段 存储 的 特殊 数据结构 、 时代 转移 算法 和 压缩 采样 算法 . 基于 微机 实用 参数 的 定量分析 表明 , 这一 技术 将 时态 存储密度 和 时态 查询 速度 提高 了 一个 数量级 . 
 关键词 　 时态 数据库 , 分段 存储 , 时代 转移 算法 , 压缩 采样 , 时态 存储密度 . 
 中图法 分类号 　 TP311 
 　 
 SegmentedStoragewithvariousChrononsinTemporalDatabases 
 andEfficiencyAnalysis 
 TANGChang - jieYUZhong - huaYOUZhi - shengZHANGTian - qingXIANGLi - min 
 ( DepartmentofComputerScienceSichuanUniversityChengdu610064 ) 
 AbstractBasedontheusagefrequencyofthedataintemporaldatabase , thestoragemethodwiththreehistoricalsegmentsisproposedinthispaper . Theobjecthistoryisdividedintothreesegments , andstoredindifferentmediawithvariouschronons . Thespecialdatastructureforsegmentedstorageisdiscussed , theagetransferalgorithmandthecompresssamplingalgorithmareproposed . Theperformancestudyshowsthatthetimeandspaceefficiencyarepromotedonemagnitudes . 
 KeywordsTemporaldatabase , segmentedstorage , agetransferalgorithm , compressedsampling , temporalstoragedensity . 
 　 　 20 年来 , 时态 数据库 管理系统 ( TDBMS ) 的 研究者 一直 在 为 改善 TDBMS 的 性能 作 不懈 的 努力 . 时态 数据库 ( temporaldatabase , 简称 TDB ) 旨在 保存 被 处理 对象 和 数据库 本身 的 历史 . 历史 只能 追加 , 不能 删除 的 特点 使得 TDB 中 数据量 极大 , 时空 效率 较 低 , 这一 特殊 困难 长期 制约 了 TDBMS 的 发展 . 
 　 　 在 实用 环境 中 , 大多数 TDB 的 应用 都 具有 厚今薄古 的 特点 , 即 对 近期 数据 的 查询 多 , 要求 详细 ; 而 对 历史 久远 的 数据 查询 少 , 要求 粗略 . 根据 这一 事实 , 我们 在 HBase 中 引入 了 分段 变 粒度 存储 方案 , 将 一个 对象 的 历史 分为 远 、 中 、 近 3 个 时间段 , 设置 两个 过渡期 , 通过 时代 转移 算法 和 压缩 采样 算法 进行 数据 提炼 , 并 进行 分 介质 、 变 粒度 的 存储 , 体现 了 与 数据仓库 的 无缝 连接 . 在 时态 存储密度 和 时态 查询 速度 上 获得 了 一个 数量级 时空 效益 . 本文 讨论 分段 存储 方案 的 时态 结构 、 相关 算法 及其 时空 效益 . 
 1 　 传统 的 时态 数据库 存储 方案 的 局限 
 1.1 时态 数据库 现有 存储 方案 
 　 　 国外 TDB 研究 界 把 时态 数据库 性能 研究 的 重点 放到 时态 索引 技术 上 , 例如 , TimeSplitB + Tree , AppendOnlyTree , CheckpointIndex , MonotonicB + Tree [ 1 ] , 近年来 , 国内 在 时态 数据库 预测 模型 、 支持 决策 [ 2 ] 、 前兆 依赖 [ 3 ] 和 变 粒度 时间轴 [ 4 ] 等 方面 取得 了 可喜成果 . 国内外 已经 研究 的 时态 数据 存储 方案 主要 有 以下 两类 . 
 　 　 方案 A . 对象 历史 不 分段 , 时间量子 为 恒量 , 大多数 TDB 模型 采用 这一 方案 [ 1 ] . 
 　 　 方案 B . 时间量子 为 恒量 , “ TDB = 快照 + 历史 ” , 快照 保存 在 高速 介质 ( 例如 硬盘 ) 中 , 记录 的 有效期 结束 后 , 记录 变为 历史 , 被 转存 到 低速 介质 ( 例如 磁带 ) , 历史 不再 分段 [ 5 ] . 
 　 　 方案 B 的 优点 是 , 当 用户 不 涉及 历史数据 、 把 TDB 降级 为 传统 RDB 使用 时 , 有 较 高效率 [ 5 ] . 此外 , 由于 历史 不 分段 , 易于 实现 . 其 缺点 在于 , 在 高速 介质 中 的 数据 不是 历史 , 而 只是 历史 的 最后 一瞬 . 在 历史性 应用 中 , 时间 效率 至多 等同于 方案 A , 存储 效率 略优 . 
 　 　 在 上述 两个 方案 中 , 对象 的 历史 不 分段 , 都 采用 单一 的 时间量子 , 以下 简称 为 单史制 . 
 1.2 　 符号 和 概念 
 　 　 时间量子 ( chronon ) 是 时态 系统 选定 支持 的 最小 的 时间 间隔 [ 1 ] . 系统 时间 起点 记为 0 , 与 起点 相距 K 个 时间量子 的 时刻 记为 K , 系统 时间 论域 记为 Sys _ T = { 0 , 1 , 2 , … , K , … , Now , … , MaxSysTime } . Sys _ T 的 子集 { t , t + 1 , t + 2 , … , t + n = t ' } 称为 区间 , 记 为 [ t , t ' ] , 并称 时间 量子数 n 为 该 区间 的 长度 . 关于 时态 数据库 的 其他 基本概念 参见 文献 [ 1 ] . 
 　 　 为了 定量 计算 时态 数据库 的 时空 效率 , 我们 引入 下列 概念 : 
 　 　 ( 1 ) 记录 所 表达 的 历史 区间 平均 长度 称为 平均 历史 跨度 ( span ) , 记为 S . 例如 , 1000 个 记录 表达 了 2000 年 历史 , 则 平均 历史 跨度 S = 2 ( 年 ) . 它 反映 了 TDB 中 记录 对 历史 的 概括 能力 . 
 　 　 ( 2 ) TDB 采用 定 长 记录 , 记录 长度 记为 L ( K 字节 ) . 
 　 　 ( 3 ) 历史数据 按时 段分 存于 多种 存储介质 , 介质 J 的 平均 存取速度 记为 VJ ( 记录 / s ) . 
 　 　 ( 4 ) 每 K 字节 信息 的 历史 跨度 称为 时态 存储密度 , 记为 Temp _ D ( 区间 长 / K 字节 ) 
 　 　 ( 5 ) 系统 每秒 所 能 查询 出 的 信息 的 历史 跨度 称为 时态 查询 密度 , 记为 Temp _ V ( 区间 长 / s ) . 
 1.3 单史 制中 存取 100 个 记录 所 需 的 时空 资源 
 　 　 给定 一组 中等 代价 的 系统 参数 : 时间量子 C = 1 ( s ) , 记录 平均 时间跨度 S = 1 ( h ) , 每 记录 长 L = 1 ( K 字节 ) , 介质 平均 存取速度 V = 500 ( K 字节 / s ) . 传统 单史 制中 存取 100 个 时态 记录 所 需 的 时空 资源 如下 : 
 　 　 存储空间 M = 100L = 100 ( K 字节 ) 　 　 存取时间 t = 100 / 500 = 0.2 ( s ) 
 　 　 时间跨度 Span = 100S = 100 ( h ) 　 　 　 时态 存储密度 Temp _ D = Span / M = 1 ( h / K 字节 ) 
 　 　 时态 查询 密度 Temp _ V = S / t = 500 ( h / s ) , 即 每秒 能 查询 出 500 小时 的 历史 . 
 　 　 实践 表明 , 上述 时态 存储密度 和 时态 查询 速度 不能 满足 实用 的 需要 . 其 原因 是 单史制 忽略 了 用户 时态 数据 需求 近多 远少 的 特点 , 在 历史 久远 的 数据 上 花费 了 过 多 的 时间 和 空间 . 
 2 　 变 粒度 , 分段 , 分 介质 存储 结构 
 　 　 为了 提高 时态 存储 和 查询 性能 , 在 Hbase 模型 [ 6 , 7 ] 中 , 我们 把 被 处理 对象 的 历史 按 事务 时间 划分 为 3 个 时代 和 两个 过渡 区间 , 并称 这一 存储 制式 为 三史制 , 如图 1 所示 . 其 要点 如下 . 
 
 图 1 　 3 个 时期 和 两个 过渡 区间 
 　 　 ( 1 ) 3 个 时代 . 引入 6 个 时刻 变量 OB ( 或 OldAgeBegin ) , OE ( 或 OldAgeEnd ) , MB ( 或 MidAgeBegin ) , ME ( 或 MidAgeEnd ) , CB ( 或 CurrAgeBegin ) , Now ( 或 CurrAgeEnd ) 和 时态 约束条件 0 = OB < MBOE < CBME < Now . 区间 [ OB , OE ] , [ MB , ME ] , [ CB , Now ] 分别 称为 古代 、 近代 和 现代 . 
 　 　 ( 2 ) 两个 过渡 区 . 区间 [ MB , OE ] 和 [ CB , ME ] 分别 称为 古代 - 近代 过渡期 和 近代 - 现代 过渡期 , 过渡期 中 的 历史数据 在 两个 相关 历史 时代 中 各存 一份 . 由 时代 转移 模块 自动 而 平滑 地 转移 过渡期 中 超期 的 历史数据 . 
 　 　 ( 3 ) 变 粒度 、 分 介质 存储 . 用户 可 分 古代 、 近代 和 现代 设置 不同 的 时间量子 粒度 . 现代 、 近代 和 古代 的 数据 分别 保存 在 内存 、 硬盘 和 CDROM ( 或 磁带 ) 中 . 在 内存 中为 近代 和 古代 设置 高速缓存 M _ Cache , O _ Cache , 二者 大小 比例 和 使用 频度 相同 , 默认 为 10 ∶ 1 . 
 　 　 ( 4 ) 使用 频率 . 系统 能 实测 古代史 、 近代史 、 现代史 的 使用 频率 . 初始值 为 古代 ∶ 近代 ∶ 现代 = 1 ∶ 10 ∶ 100 . 
 　 　 上述 要素 全部 封装 在 对象 Ages 中 , 作为 Ages 的 数据 成员 . 
 　 　 用户 设置 MidAgeBegin ( 或 MB ) , OldAgeEnd ( 或 OE ) 及 古代 - 近代 过渡期 长度 这 3 个 变量 中 的 任意 两个 , 可以 划分 古代 和 近代 及其 过渡期 . 设置 CurrAgeBegin ( 或 CB ) , MidAgeEnd ( 或 ME ) 以及 近代 - 现代 过渡期 Mid - CurrLen 三者 中 的 任意 二者 可以 划分 近代 和 现代 以及 近代 - 现代 过渡期 . 
 　 　 三史制 与 “ TDB = 快照 + 历史 ” 方式 [ 1 , 5 ] 有着 本质 的 不同 . HBase 模型 的 当 前期 不是 快照 , 而是 [ CB , Now ] 区间 的 历史 , 这 保证 了 能 高速 分析 当 前期 中 对象 间 的 联系 , 且 三史制 特有 的 过渡 区及 稍后 要 介绍 的 时期 转换 算法 保证 了 多 时期 、 多 介质 的 平滑 、 高效 的 过渡 . 
 　 　 例 1 : 下列 语句 中前 两句 用 相对 时刻 动态 地 划分 时期 , 而 第 3 句 采用 绝对 时刻 划分 时期 . 
 　 　 SetAges . MidAgeBegin = Ago ( 5years ) 
 　 　 SetAges . Old _ Mid _ Len = 60Days 
 　 　 SetAges . CurrAgeBegin = “ 12 - 31 - 1996 ” 
 　 　 第 1 句 以 执行 时间 作为 基准 , 以其 5 年 之前 的 时刻 作为 近代 的 开始 时刻 , 第 2 句 设置 古代 - 近代 过渡期 为 区间 [ MB , MB + 60Days ] . 其中 Ago ( 5years ) 是 一个 时态 宏 , TDBMS 将 根据 系统 内部 日历 及 闰年 法则 将 其 转化 为 执行 时刻 的 5 年前 那一 时刻 . 因此 用 Ago ( … ) 宏来 划分 的 时代 间隔 是 动态 的 . 下面 的 时代 转移 算法 将 考虑 由 动态 间隔 而 引起 的 困难 . 
 　 　 例 1 中 的 Years , Months , Days 为 TDB 中 预定 义 的 区间 长度 宏 , 而 “ 12 - 31 - 1996 ” 为 系统 时刻 值 , TDBMS 自动 地 把 长度 宏 扩展 为 时间量子 . 例如 , Days = 24 × 3600 ( s ) . 而 将 系统 时刻 自动 转为 从 数字 0 时刻 开始 的 时间 量子数 . 
 3 　 时代 转移 算法 
 　 　 时代 转移 算法 是 三史 制能 安全 平稳 地 过渡 数据 的 关键 . 如例 1 所示 , 时代 划分 点 和 过渡期 可能 随 时间 变化 . 新 、 旧 两 过渡期 的 时态 关系 可能 相邻 、 交叉 或 包含 . 下面 以 近代 - 现代 过渡期 为例 , 分析 过渡期 变化 和 数据 转移 方向 的 关系 . 
 　 　 考查 近代 - 现代 过渡期 , 分别 记旧 、 新 过渡期 为 [ CB , ME ] 和 [ CB ＇ , ME ＇ ] . 4 个 端点 的 全 排列 有 4 ！ = 24 种 , 其中 满足 CB < ME , 及 CB ＇ < ME ＇ 的 有 下列 6 种 : 
 　 　 ( 1 ) CB < ME < CB ＇ < ME ＇ ( 2 ) CB < CB ＇ < ME < ME ＇ ( 3 ) CB < CB ＇ < ME ＇ < ME 
 　 　 ( 4 ) CB ＇ < ME ＇ < CB < ME ( 5 ) CB ＇ < ME < CB < ME ＇ ( 6 ) CB ＇ < CB < ME < ME ＇ 
 　 　 逐一 考查 上述 情形 , 易知 前 3 种 的 共性 为 CB < CB ＇ , 即 现代 开始 时间 的 新值 CB ＇ 在 时间轴 上 后移 . 这是 实用 中 最 常见 的 情形 , 需要 将 当代史 中 [ CB , CB ＇ ] 区间 的 历史 转移 到 近代史 中 . 后 3 种 的 共性 为 CB ＇ < CB , 这种 情形 一般 在 用户 强制 改变 过渡期 时才 出现 , 需要 将 近代史 中 [ CB ＇ , CB ] 区间 的 历史 复制到 内存 的 当代史 中 . 
 　 　 三史制 通过 系统 预设 的 触发器 , 定期 ( 期限 一般 小于 过渡期 长度 的 一半 ) 启动 时代 转移 模块 , 将 过渡期 中 的 超期 部分 自动 地 移动 或 复制到 正确 的 时期 中 . 下面 用以 C++ 的 风格 书写 的 算法 来 描述 现代 - 近代 过渡期 数据 过渡 处理过程 . 
 　 　 算法 1 . Curr _ MidAgeTransferAlgorithm ( 现代 - 近代 转移 算法 ) 
 　 　 输入 : 现代史 、 近代史 . 
 　 　 输出 : 现代史 、 近代史 . 
 　 　 附加 效果 : 将 过渡期 中 的 超期 部分 转移 到 相应 时期 . 
 　 　 HBase ∷ Curr _ MidAge _ Transfer ( CurrAge , MidAge ) 　 　 　 　 ∥ 作为 对象 HBase 的 成员 函数 
 　 　 { CB _ Old = CurrAge . GetOld _ CB ( ) ; 　 　 　 　 　 　 　 　 　 　 　 ∥ 获取 旧 的 “ 现代 ” 始点 
 　 　 CB _ New = CurrAge . GetNew _ CB ( ) ; 　 　 　 　 　 　 　 　 　 　 　 　 ∥ 获取 新 的 现代 始点 
 　 　 ME _ Old = MidAge . GetOld _ ME ( ) ; 　 　 　 　 　 　 　 　 　 　 　 　 ∥ 获取 旧 的 “ 近代 ” 终点 
 　 　 ME _ New = MidAge . GetNew _ ME ( ) ; 　 　 　 　 　 　 　 　 　 　 　 　 ∥ 获取 新 的 近代 终点 
 　 　 if ( Old _ CB < New _ CB ) 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ∥ 现代 开始 时间 自然 后移 
 　 　 　 { for ( eachRecordin ( [ Old _ CB , New _ CB ] ∩ CurrAge ) ) ∥ 过渡 期间 移 向 近代 
 　 　 　 　 { Record . Verify ( ) ; 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ∥ 校正 历史数据 
 　 　 　 　 　 If ( Record . Is _ not _ in ( MidAge ) ) 
 　 　 　 　 　 　 { MidAge . Append ( Record ) ; 　 　 　 　 　 　 　 　 　 ∥ 追加 该 记录 到 近代史 
 　 　 　 　 　 　 　 CurrAge . DeleteRecord ( Record ) ) ; 　 　 　 　 　 ∥ 从 现代史 删除 该 记录 
 　 　 　 　 　 　 　 　 　 　 　 } ; 
 　 　 　 　 　 　 } 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ∥ Endoffor 
 　 　 　 　 　 MidAge . CompressNewData ( ) ; 　 　 　 　 　 　 　 ∥ 近代史 压缩 新 数据 , 见 下面 的 解释 ( 1 ) 
 　 　 　 　 } 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ∥ endofif 
 　 　 　 elseif ( New _ CB < Old _ CB ) 　 　 　 　 　 　 　 　 　 　 　 　 ∥ 见 解释 ( 2 ) 
 　 　 　 　 　 { while ( Record . Is _ in ( [ New _ CB , Old _ CB ] ∩ MidAge ) ) 
 　 　 　 　 　 　 　 { 　 if ( Record . Is _ not _ in ( CurrAge ) ) 
 　 　 　 　 　 　 　 　 CurrAge . ExpandChronon _ Append ( Record ) ; ∥ 复制到 现代史 , 见 解释 ( 3 ) 
 　 　 　 　 　 　 　 } ; 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ∥ endofwhile 
 　 　 　 } 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ∥ Endofelse 
 } ; 
 解释 
 　 　 ( 1 ) Compress _ NewData 是 MidAge 对象 的 成员 函数 , 其 作用 是 压缩 采样 , 细节 将 在 下 一节 介绍 , 暂时 可 将 其 视为 什么 都 不 做 , 但 返回 True 的 平凡 函数 . 
 　 　 ( 2 ) ( New _ CB < Old _ CB ) 一般 只 在 强制 扩大 过渡期 时 出现 , 此时 不需 从 ( [ New _ CB , Old _ CB ] ∩ MidAge ) 删除 Record , 合理 冗余 便于 存取 . 
 　 　 ( 3 ) 扩展 时间量子 以 适应 现代 区间 的 时间 粒度 . 例如 , MidAge 和 CurrAge 中 的 时间量子 分别 为 month 和 Day , MidAge 中 的 元组 ( Temperature = 8 , [ 96.1 , 96.2 ] ) 表示 96 年 1 月 平均温度 为 8 度 , 扩展 时间量子 后 为 ( Temperature = 8 , [ 96.1 . 1 , 96.2 . 1 ] ) , 表示 96 年 1 月 每天 温度 为 8 度 . 
 　 　 命题 1 . 设 过渡期 中 的 时间 粒子 数为 N , 则 时代 转移 算法 的 计算 量 为 O ( N ) . 
 　 　 证明 : 在 时代 转移 算法 的 for 循环 中 , 循环 条件 Recordin ( [ Old _ CB , New _ CB ] ) 取 真值 的 次数 不 超过 N , 循环体 中 的 插 删 工作量 可以 用 常数 因子 C1 估计 , 同理 , 在 While 循环 中 , 循环 条件 取 真值 的 次数 不 超过 N , 循环体 中 CurrAge . ExpandChronon _ Append ( Record ) 函数 在 扩展 时态 粒子 时 , 如 上述 的 解释 ( 3 ) 中 所示 . 只是 把 生命周期 细化 , 计算机 量用 常数 C2 估计 , 总 的 计算机 量 不 超过 N ( C1 + C2 ) , 所以 计算 量 为 O ( N ) . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 □ 
 4 　 变 粒度 时间轴 与 时态 数据 的 浓缩 
 　 　 大多数 应用 对 历史 信息 的 要求 具有 远略 近详 的 特点 . 为此 , 我们 提出 了 变 粒度 时间轴 . 最初 的 目的 是 扩大 TDB 的 覆盖 区间 [ 6 ] , 在 三史 制中 发展 为变 粒度 存储 的 基础 . Hbase 中 , 现代史 、 近代史 和 古代史 的 时间 粒子 分别 为 Second , Day 和 Year . 用户 可 通过 TDML 语句 修改 时间量子 默认值 . 例如 , 通过 语句 CurrAge . Set ( Chronon , “ 1Hour ” ) 可以 把 现代 时间量子 设置 为 1 小时 . 变 粒度 时间轴 导致 了 变 时间 粒度 存储 , 引出 了 时代 转移 过程 中 的 压缩 或 扩展 , 是 三史 制中 提高效率 的 关键 . 
 时态 数据 的 浓缩 ( 又 称为 压缩 采样 ) 在 时代 转移 过程 中 进行 . 当 过渡期 中 数据 从 现代 向 近代 转移 , 或 从 近代 向 古代 转移 时 , TempoTransfer 算法 中 的 CompressNewData 函数 自动 调用 用户 预选 的 方法 采样 、 压缩 . 压缩 采样 包括 相对 位置 抽取 法 、 均值 法 和 统计法 . 
 　 　 ( 1 ) 相对 位置 抽取 法 . 由 用户 规定 抽取 点 的 相对 位置 Percent , 0 ￡ Percent ￡ 100 , 当 Percent = 50 即为 典型 的 中点法 . 过渡期 中 数据 从 现代 向 近代 转移 时 , 触发器 调用 算法 1 , 并 通过 延迟 约束 机制 , 将 其中 的 CompressNewData 连接 ( bounding ) 到 下面 的 同名 函数 ( 即 算法 2 ) , 注意 算法 中 的 “ 移动 ” 函数 Move _ One _ New _ Record _ To _ WorkSpace 把 对象 复制到 目的地 , 同时 要 删去 源 数据 . 
 　 　 算法 2 . 相对 位置 定点 抽取 算法 
 　 　 MidAge ∷ CompressNewData ( ) 　 　 　 　 　 　 　 　 　 / / 近代史 对象 MidAge 的 成员 函数 
 　 　 　 { SmallChronon = CurAgeChrono ; 　 　 　 　 　 　 / / 现代史 时间量子 ; 
 　 　 　 　 BigChronon = MidAge . Chrono ; 　 　 　 　 　 　 　 / / 近代史 时间量子 ; 
 　 　 　 　 ArraySize = BigChronon / SmallChronon ; 　 　 　 / / 时间量子 压缩 倍数 
 　 　 　 WorkSpace = newRecordType [ ArraySize ] ; 　 　 / / 按 最大 需要 分配 采样 数组 空间 
 　 　 TotalLeftRec = GetTotalNewRecNum ( ) ; 　 　 　 　 　 / / 待处理 的 记录 总数 
 　 　 　 Finish = False ; Count = 0 ; 　 　 　 　 　 　 　 　 　 　 / / 初始化 循环 变量 
 　 　 　 While ( notFinish ) 
 　 　 　 { Move _ One _ New _ Record _ To _ WorkSpace ( ) ; 
 　 　 　 　 RecordLifeSpan = GetNewRecordLifeSpan ( ) ; / / 获取 新 记录 生命周期 
 　 　 　 　 Count = Count + RecordLifeSpan / SmallChronon ; / / 编程 要点 1 
 　 　 　 　 TotalLeftRec - - ; 　 　 　 　 　 　 　 　 　 　 　 / / 待处理 的 记录 总数 减 1 
 　 　 　 　 If ( Count = ArraySize ) 　 　 　 　 　 　 　 　 　 　 / / 移满 一组 、 开始 抽样 
 　 　 　 　 　 { Sample = Take _ Sample ( WorsSpace , Percent ) ; / / 在 指定 点 抽样 
 　 　 　 　 　 　 MakeCompresedFlag ( Sample ) ; 　 　 　 　 　 / / 作已 压缩 标记 
 　 　 　 　 　 　 MidAge . Append ( Sample ) ; 　 　 　 　 　 　 　 / / 追加 到 近代史 
 　 　 　 　 　 　 Count = 0 ; 　 　 　 　 　 　 　 　 　 　 　 　 　 　 / / 准备 循环 , 压缩 另一组 
 　 　 　 　 　 　 Clear ( WorkSpace ) ; 　 　 　 　 　 　 　 　 　 / / 准备 循环 
 　 　 　 　 　 } ; 
 　 　 　 　 Finish = ( TotalLeftRec = = 0 ) ; 
 　 　 　 　 / / 编程 要点 二 , 如 剩下 的 不足 一组 , 留待 下 一次 压缩 
 　 　 } 
 } 
 　 　 ( 2 ) 均值 法 . 下面 用 例子 加以 说明 . 
 　 　 例 2 : 设 现代史 时间量子 为 日 , 近代史 时间量子 为 周 , 过渡期 为 10 日 , 则 时代 转移 算法 先 把 过渡期 中 数据 移 到 近代史 中 , 然后 调用 CompressNewData . 处理过程 是 , 对 新 移入 的 数据 和 上次 未 压缩 取样 的 记录 , 每 7 个 一组 移 到 工作 空间 作 7 日 均值 , 然后 移回 近代史 , 最后 不足 7 个 的 留待 下 一次 转移 时 处理 . 只 需 在 算法 2 中 修改 Take _ Sample ( … ) 函数 为 7 日 均值 函数 即可 . 
 　 　 ( 3 ) 统计 方法 . 在 Take _ Samle 函数 中 采用 其他 统计 函数 , 如 均值 、 极大值 、 极小值 、 回归 值 等等 . 在 HBase 方案 中 , 由 用户 指定 方法 名称 , 直接 用 OLE 调用 商品化 统计 软件包 中 相应 模块 . 
 　 　 时代 转移 程序 中 包含 了 时态 浓缩 . 三史 制中 的 现代史 是 标准 的 时态 数据库 方式 , 而 近代史 、 古代史 中 的 数据 已经 是 提取 、 加工 、 浓缩 后 的 数据 , 在 某种程度 上 具有 简单 数据仓库 的 特色 . 在 此 意义 上 , 时代 转移 技术 实现 了 数据库 和 数据仓库 的 无缝 连接 . 
 5 　 与 传统 存储 制式 的 比较 
 　 　 为了 比较 时空 效率 , 引入 下列 符号 和 约定 . 
 　 　 设 TDB 中 已 按 三史制 划分 出 历史 时期 Ti , i = 1 , 2 , 3 分别 表示 现代 、 近代 和 古代 . 
 　 　 ( 1 ) 历史 区间 Ti = [ Bi , Ei ] , 数据 应用 概率 为 Pi , 其中 0Pi1 , P1 + P2 + P3 = 1 . 
 　 　 ( 2 ) 历史 区间 Ti 的 时间量子 为 Ci . 在 区间 Ti 中 , 每个 记录 的 平均 历史 跨度 记为 Si . 
 　 　 ( 3 ) Ti 时代 对应 的 存储介质 上 平均 存取速度 为 每秒 Vi 个 记录 . 
 　 　 ( 4 ) 三史制 在 微机 环境 的 特有 参数 ( 接近 实用 ) 如下 : 
 　 　 数据 使用 频度 P1 = 0.9 , P2 = 0.07 , P3 = 0.03 ; 每 记录 长 L = 1 ( K 字节 ) ; 
 　 　 时间量子 C1 = 1 秒 , C2 = 1 日 , C3 = 1 月 ; 
 　 　 记录 平均 时间跨度 S1 = 1 小时 , S2 = 1 日 , S3 = 1 月 . 
 　 　 介质 平均 存取速度 V1 = 10000 ( 内存 中 ) , V2 = 500 ( 硬盘 中 ) , V3 = 50 ( 活动硬盘 ) . 
 　 　 下面 计算 三史 制下 存取 100 个 记录 的 时空 资源 . 按 数据 使用 概率 , 100 个 记录 中 分布 在 Ti 时代 中有 100Pi 个 记录 , 其 历史 跨度 为 100PiSi . 以下 的 ? 求和 都 是从 i = 1 到 i = 3 . 对于 100 个 记录 , 有 : 
 　 　 总 跨度 为 S = 100 Σ PiSi ; 
 　 　 存取 总 时间 为 t = 100 Σ ( Pi / Vi ) ( 秒 ) ; 
 　 　 总 存储空间 M = 100L ( K 字节 ) ; 
 　 　 时态 存储密度 Temp _ D = S / M = ( Σ PiSi ) / L ; 
 　 　 时态 查询 密度 Temp _ V = S / t = ( Σ PiSi ) / ( Σ ( Pi / Vi ) ) . 
 这些 公式 提供 了 调整 三史 制下 各项 性能 的 方法 . 修改 Pi , Si , Vi 的 大小 , 能 得到 不同 的 性能 . 
 　 　 传统 存储 方案 本质 上 是 单史制 [ 1 , 5 ] , 单史制 可 看成 是 三史制 的 特例 . 在 三史 制中 , 令 T2 = φ , T3 = φ , P1 = 1 , P2 = 0 , P3 = 0 ( 即 只 保留 现代史 阶段 ) ; 令 V1 = V2 ( 即用 硬盘 存储 ) , 则 三史制 退化 为 单史制 . 将 上述 参数 代入 三史制 公式 , 得到 单史 制下 的 结果 与 第 1 节中 的 结果 一致 . 
 　 　 按 HBase 在 微机 环境 中 的 参数 和 上述 公式 , 在 两种 不同 体制 下 存取 100 个 记录 的 资源 比较 见表 1 . 它 表明 , 三史制 的 时间跨度 提高 20 倍 以上 , 时态 存储密度 提高 24 倍 , 时态 检索 速度 提高 58 倍 . 上述 计算 中 忽略 了 TDBMS 内部 cache 的 正 效应 [ 7 ] 和 时态 转移 的 代价 . 其 原因 是 , 一方面 系统 中不常作 时代 转移 ( 例如 , 一日 一次 或 一周 一次 ) ; 另一方面 , 由于 与 整个 历史 相比 , 过渡期 不 长 , 一般 只 占 5% , 又 根据 命题 1 , 时代 转移 算法 的 计算 量 为 O ( N ) , 因此 时代 转移 算法 耗时 不 多 , 可以 忽略 . 
 表 1 存取 100 记录 的 比较 
 
 存取 总 时间 ( s ) 时间 总 跨度 ( h ) 存储空间 ( K 字节 ) 时态 存储密度 ( h / K 字节 ) 时态 查询 密度 ( h / s ) 
 三史制 0.083241810024 . 18291312 
 单史制 0.21001001500 
 
 　 
 　 　 时空 效益 本质 上 来自 两 方面 . 其一 , 时代 转移 算法 对 数据 进行 了 提炼 压缩 , 存所 应存 , 略 所 可略 , 使得 时态 信息 密度 加大 . 其二 , 当 用户 对 历史性 数据 的 需求 是 厚今薄古 型 时 , 大多数 运算 在 高速 介质 中 进行 . 
 注释 ： 本文 研究 得到 国家自然科学基金 和 国家教育部 留学 回国 人员 启动 基金 资助 。 
 作者简介 ： 唐常杰 ： 1946 年生 , 教授 , 主要 研究 领域 为 数据库 
 　 　 　 　 　 于 中华 ： 1966 年生 , 博士 ， 副教授 , 主要 研究 领域 为 机器翻译 . 数据库 
 　 　 　 　 　 游志胜 ： 1945 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 图像 数据库 
 　 　 　 　 　 张 天庆 ： 1971 年生 , 讲师 , 主要 研究 领域 为 数据库 
 　 　 　 　 　 相 利民 ： 1961 年生 , 博士 ， 副教授 , 主要 研究 领域 为 数据库 
 作者 单位 : 四川大学 计算机系 成都 610064 
 　 　 　 　 　 E - mail : chjtang @ scu . edu . cn 
 参考文献 
 1 　 TanselA , CliffordJ , DadiaSetal . TemporalDatabasesTheory , Designand 
 　 　 Implementation . Redwood , CA : Benjamin / CummingsPublishingCompany , 1997.418 
 　 　 ～ 455 
 2 　 张师超 , 严小卫 . 历史 数据库 支持 决策 的 研究 . 计算机 研究 与 发展 , 1998 , 35 ( 4 ) : 329 ～ 322 
 　 　 ( ZhangShi - cao , YanXiao - wei . Astudyofhistoricaldatabasefordecision 
 　 　 making . ComputerResearchandDevelopment , 1998 , 35 ( 4 ) : 329 ～ 322 ) 
 3 　 TangChang - jie , YinBo - wen . Thepremonitorydependencyofhistoricaldatabaseand 
 　 　 itsmathematicalproperties . ScienceinChina ( seriesA ) , 1989 , 32 ( 6 ) : 758 ～ 768 
 4 　 唐常杰 , 吴子 华等 . 时态 数据库 的 变 粒度 时间轴 . 见 : 冯玉才 编 . 全国 第 12 届 数据库 会议 论文集 . 
 　 　 武汉 : 华中理工大学 出版社 , 1994.419 ～ 423 
 　 　 ( TangChang - jie , WuZi - huaetal . Thetimeaxiswithvariablegranularityin 
 　 　 temporaldatabase . In : FengYu - caied . Proceedingsofthe12thConferenceof 
 　 　 DatabaseinChina . Wuhan : HuazhongPolytechnicUniversityPress , 1994.419 ～ 423 ) 
 5 　 AhnI , SnodgrassR . Partitionedstoragefortemporaldatabases . Information 
 　 　 Science , 1989 , ( 49 ) : 103 ～ 146 
 6 　 TangChang - jie , XiongMin . ThetemporalmechanismsinHbase . JournalofComputer 
 　 　 ScienceandTechnology , 1996 , 11 ( 4 ) : 365 ～ 371 
 7 　 唐常杰 , 张 天庆 等 . 数据库 管理系统 内部结构 及其 C语言 实现 . 成都 : 电子科技 大学 出版 
 　 　 社 , 1995.37 ～ 63 
 　 　 ( TangChang - jie , ZhangTian - qinetal . Theinnerstructureofdatabase 
 　 　 managementsystemanditsimplementationinCLanguage . Chengdu : Pressof 
 　 　 UniversityofElectronicScienceandTechnologyofChina , 1995.37 ～ 63 ) 
 收稿 日期 ： 1998 - 07 - 14 修稿 日期 ： 1998 - 10 - 20 
