微型机 与 应用 
 MICROCOMPUTER & ITSAPPLICATIONS 
 2000 　 Vol.19 　 No.6 　 P.58 - 60 
 
 
 
 
 基于 Windows 线程技术 实现 数据 
 采集 的 简易 编程 方法 
 周开利 　 汪云 
 摘要 ： 基于 Windows 线程 编程技术 ， 将 DOS 数据 采集 程序 “ 包裹 ” 成 1 个 线程 ， 利用 共享 文件 交换 数据 ， 实现 Windows 环境 下 数据 采集 的 简易 编程 。 
 关键词 ： 数据 采集 Windows 线程 共享 文件 
 　 　 Windows 以其 友好 丰富 的 图形用户界面 、 简单 灵活 的 操作 ， 折服 了 各 行业 的 用户 。 工业 控制 领域 的 用户 也 不 例外 ， 但 由于 Windows 操作系统 是 以 非 抢占 事件 ( 消息 ) 驱动 为 主要 特征 ， 强调 设备 无关 性 风格 ， 不 鼓励 用户 开发 直接 面向 硬件 设备 的 用户程序 ， 因此 试图 在 Windows 环境 下 开发 数据 采集 软件 ， 往往 使 习惯 DOS 编程 的 一般 用户 感到 无从下手 。 也 有 文章 [ 1 ] [ 2 ] [ 3 ] 介绍 了 一些 很 好 的 解决 方法 ， 但 大都 需要 较 高 的 Windows 或 特定 语言 ( 如 VisualC ＋ ＋ ) 的 编程技术 。 而 当 你 熟悉 的 Windows 开发 环境 不 适于 采用 上述 方法 时 ， 本文 介绍 的 方法 也许 不失为 一种 简单易行 的 方法 。 
 本文 使用 DOS 环境 下 的 BorlandC ＋ ＋ 和 Windows 环境 下 的 BorlandC ＋ ＋ Builder 进行 程序编制 ， 但 若 使用 的 是 DOS 环境 下 的 BASIC 、 PASCAL 或 Windows 环境 下 的 VB 、 VC ＋ ＋ 等 ， 同样 可以 采用 本文 所 介绍 的 方法 。 它 所 要求 的 仅仅 是 ： ( 1 ) 任何 一种 你 所 熟悉 的 DOS 环境 下 的 I ／ O 编程技术 和 共享 文件 使用 方法 ； ( 2 ) 任何 一种 你 所 熟悉 的 Windows 开发 环境 中 有关 线程 和 共享 文件 的 应用 方法 。 
 1 基本原理 
 　 　 本文 采用 的 方法 如图 1 所示 。 
 
 图 1 原理 框图 
 　 　 数据 采集卡 通过 DOSI ／ O 接口 程序 ， 对 I ／ O 口 进行 读写操作 交换 数据 ； 而 DOSI ／ O 接口 程序 与 Windows 应用程序 之间 却是 通过 共享 数据文件 交换 数据 。 换句话说 ， 对 I ／ O 口 直接 操作 的 依然 是 DOS 程序 ， Windows 应用程序 只是 对 数据 采集 间接 控制 ， 从而 避开 了 Windows 程序 不能 对 I ／ O 口 直接 读写 的 限制 。 
 　 　 问题 的 关键 是 Windows 应用程序 如何 能 实时 获得 I ／ O 口 的 数据 并 对 其 读写 进行 控制 ， 本文 通过 线程 和 共享 文件 解决 这一 问题 。 所谓 线程 ， 简而言之 就是 运行 在 应用程序 中 的 独立 进程 ， 它 只是 代码 的 执行 体 ， 其 处理 时间 由 操作系统 控制 而 不是 程序控制 。 在 Windows 应用程序 中 加入 DOSI ／ O 接口 程序 线程 对象 ， 则 二者 并行 运行 于 计算机 中 。 DOSI ／ O 接口 程序 通过 对 I ／ O 口 的 直接 读写 完成 数据 采集 并 以 采集 的 数据 不断更新 采集 数据文件 中 的 数据 。 Windows 应用程序 可 同时 从 采集 数据文件 中 读取数据 ， 效果 就 好像 从 I ／ O 口 直接 读取数据 一样 。 为了 对 数据文件 能 同时 进行 读写操作 ， 文件 必须 以 共享 方式 在 2 个 应用程序 中 同时 打开 — — 即 共享 文件 。 另一方面 ， 如果 我们 需要 对 DOS 线程 进行 控制 或 传输数据 ( 如 终止 线程 运行 或 传递 D ／ A 数据 等 ) 时 ， 可以 以 同样 方式 再 建立 1 个 控制数据 文件 进行 “ 消息 ” 传递 。 
 2 软件 编程 
 2.1 DOS 部分 
 　 　 本文 以市售 PCLS － 718 数据 采集卡 为例 ， 使用 DOS 环境 下 的 BorlandC ＋ ＋ 进行 软件 编程 。 该 采集卡 具有 2 个 D ／ A 和 16 个 A ／ D 通道 ， 其 I ／ O 口基 地址 为 0x300 ， 0x300 ～ 0x301 为 A ／ D 通道 的 高 ／ 低位 数据 和 通道 号 端口地址 ； 0x304 ～ 0x307 为 2 个 D ／ A 通道 的 高 ／ 低位 数据 端口地址 。 
 ＃ include ＜ stdio . h ＞ 
 ＃ include ＜ dos . h ＞ 
 ＃ include ＜ STDLIB . H ＞ 
 ＃ include ＜ conio . h ＞ 
 ＃ include ＜ share . h ＞ 
 ＃ include ＜ io . h ＞ 
 typedefunsignedintword ； 
 constintBASE ＝ 0x300 ； ／ ／ 设置 I ／ O 口基 地址 
 voidmain ( ) { 
 intstatus ， dtl ， dth ， adl ， adt ， c ＿ reg ， chv ， i ， Tn ； 
 wordda1 ＝ 0x0 ， da2 ＝ 0x0 ； 
 FILE * fADout ， * fDAin ， * fCtrl ； 
 fDAin ＝ ＿ fsopen ( ″ DAin . dat ″ ， ″ r ″ ， SH ＿ DENYNO ) ； 
 　 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 打开 D ／ A 共享 数据文件 
 fADout ＝ ＿ fsopen ( ″ ADout . dat ″ ， ″ w ＋ ″ ， SH ＿ DENYNO ) ； 
 　 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 打开 A ／ D 共享 数据文件 
 fCtrl ＝ fsopen ( ″ Ctrl . dat ″ ， ″ r ″ ， SH ＿ DENYNO ) ； 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 打开 控制 共享 数据文件 
 do { 
 　 　 fseek ( fCtrl ， SEEK ＿ SET ， 0 ) ； 
 　 　 fscanf ( fCtrl ， ″ ％ d ＼ n ″ ， ＆ Tn ) ； 
 　 　 if ( Tn ＝ ＝ 0 ) ／ ／ DOS 程序 接到 Windows 终止 运行 控制 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 字 “ 0 ” 时 ， 执行 相应 操作 
 　 焮 
 　 　 　 　 fclose ( fDAin ) ； 
 　 　 　 　 fclose ( fADout ) ； 
 　 　 　 　 fclose ( fCtrl ) ； 
 　 　 　 　 exit ( 0 ) ； 
 　 　 　 　 return ； 
 　 爙 
 　 　 fseek ( fDAin ， SEEK ＿ SET ， 0 ) ； 
 　 　 fscanf ( fDAin ， ″ ％ d ％ d ＼ n ″ ， ＆ da1 ， ＆ da2 ) ； ／ ／ 从 D ／ A 数 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 据 文件 中 读取 D ／ A 数据 da1 、 da2 
 outportb ( BASE ＋ 4 ， ( da1 ＆ 0xf ＜ ＜ 4 ) ) ； ／ ／ 写 D ／ A 通道 1 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 数据 低位 值 
 outportb ( BASE ＋ 5 ， da1 ＞ ＞ 4 ) ； ／ ／ 写 D ／ A 通道 1 数据 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 高位 值 
 outportb ( BASE ＋ 6 ， ) da2 ＆ 0xf ＜ ＜ 4 ) ； ／ ／ 写 D ／ A 通道 2 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 数据 低位 值 
 outportb ( BASE ＋ 7 ， da2 ＞ ＞ 4 ) ； ／ ／ 写 D ／ A 通道 2 数据 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 高位 值 
 fseek ( fADout ， SEEK ＿ SET ， 0 ) ； 
 i ＝ 0 ； 
 do { 
 　 　 outportb ( BASE ＋ 8 ， 0 ) ； 
 　 　 outportb ( BASE ， 0 ) ； 
 　 　 do { 
 　 　 　 　 status ＝ inport ( BASE ＋ 8 ) ； 
 　 　 　 　 delay ( 1 ) ； 
 　 　 　 } while ( ( status ＆ 0x10 ) ＝ ＝ 0 ) ； 
 　 　 dtl ＝ inportb ( BASE ) ； ／ ／ 读 A ／ D 通道 i 数据 低位 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 值 和 通道 号 
 　 　 dth ＝ inportb ( BASE ＋ 1 ) ； ／ ／ 读 A ／ D 通道 i 数据 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 高位 值 
 　 　 adl ＝ dtl ／ 16 ； 
 　 　 adt ＝ dth * 16 ＋ adl ； ／ ／ A ／ D 转换 值 
 　 　 chv ＝ dtl － adl16 ； ／ ／ A ／ D 通道 号 
 　 　 fprintf ( fADout ， ″ ％ d ％ d ＼ n ″ ， chv ， adt ) ； 　 ／ ／ 将 A ／ D 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 通道 号 及 转换 值 写入 A ／ D 数据文件 
 　 　 } while ( i ＋ ＋ ＜ 15 ) ； 
 　 爙 while ( i ＞ － 1 ) ； 
 　 　 　 　 ／ ／ 死循环 ， 以 保证 采集 过程 一直 进行 ， 除非 收到 控 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 制字 “ 0 ” ， 才 结束 程序运行 
 　 　 return ； 
 } 
 　 　 程序编制 完成 后 形成 可执行文件 ( 本文 为 ada . exe ) ， 并 在 Windows 下 右击 该 文件名 ， 选择 “ 属性 ” 项 ， 将 程序运行 属性 设 为 “ 最小化 ” ， 并 选择 退出 时 关闭 ， 以使 Windows 应用程序 启用 该 线程 对象 时 ， 不至于 使 Windows 窗口 被 DOS 运行 窗口 遮挡 ， 并 在 终止 该 程序运行 时能 正常 关闭 DOS 窗口 。 
 2.2 Windows 部分 
 　 　 本文 使用 Windows 环境 下 的 BorlandC ＋ ＋ Builder 作为 开发 平台 、 以 0.2 s 显示 1 次 A ／ D 通道 5 的 采集 数据 和 进行 一次 D ／ A 转换 为 应用 目的 进行 程序编制 。 
 ／ ／ － － － － － － － － 窗体 Form1 应用 程序代码 － － － － － － － － － ／ ／ 
 ＃ include ＜ vcl . h ＞ 
 ＃ pragmahdrstop 
 ＃ include ＜ dos . h ＞ 
 ＃ include ＜ STDLIB . H ＞ 
 ＃ include ＜ conio . h ＞ 
 ＃ include ＜ io . h ＞ 
 ＃ include ＜ fcntl . h ＞ 
 ＃ include ＜ sys ＼ stat . h ＞ 
 ＃ include ＜ share . h ＞ 
 ＃ include ＜ stdio . h ＞ 
 ＃ include ″ thread1 . h ″ 
 ＃ pragmapackage ( smart ＿ init ) 
 ＃ pragmaresource ″ * . dfm ″ 
 TForm1 * Form1 ； 
 TadaThread * adaThread ； 
 FILE 漟 ADout ， * fDAin ， * fCtrl ； 
 intchv ， cht ， da1 ， da2 ； 
 ／ ／ － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － 
 ＿ fastcallTForm1 ( TForm1 ( TComponent * Owner ) 
 　 　 　 　 ： TForm ( Owner ) 
 { 
 } 
 ／ ／ － － － － － － － － － － 窗体 Form1 创建 时 响应 事件 － － － － － － － － － － ／ ／ 
 void ＿ fastcallTForm1 : : FormCreate ( TObject * Sender ) 
 { 
 　 　 　 　 adaThread ＝ newTadaThread ) ( false ) ； ／ ／ 启用 DOS 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ I ／ O 接口 程序 线程 
 　 　 　 　 adaThread － ＞ Resume ( ) ； 
 　 　 　 　 fCtrl ＝ ＿ fsopen ( ″ Ctrl . dat ″ ， ″ w ＋ ″ ， SH ＿ DENYNO ) ； 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 建立 控制 数据共享 文件 
 　 　 　 　 fseek ( fCtrl ， SEEK ＿ SET ， 0 ) ； 
 　 　 　 　 fprintf ( fCtrl ， ″ ％ d ＼ n ″ ， 1 ) ； ／ ／ 写入 控制 字 初值 “ 1 ” 
 　 　 　 　 fDAin ＝ fsopen ( ″ DAin . dat ″ ， ″ w ＋ ″ ， SH ＿ DENYNO ) ； 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 建立 D ／ A 数据共享 文件 
 　 　 fADout ＝ ＿ fsopen ( ″ ADout . dat ″ ， ″ r ″ ， SH ＿ DENYNO ) ； 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 建立 A ／ D 数据共享 文件 
 } 
 ／ ／ － － － － － － － － － － － 每 0.2 s 一次 的 响应 事件 － － － － － － － － － － － ／ ／ 
 void ＿ fastcallTForm1 : : Timer1Timer ( TObject * Sender ) 
 { 
 　 　 da1 ＝ 10 ； 
 　 　 da2 ＝ 20 ； 
 　 　 fseek ( fDAin ， SEEK ＿ SET ， 0 ) ； 
 　 　 fprintf ( fDAin ， ″ ％ d ％ d ＼ n ″ ， da1 ， da2 ) ； ／ ／ 将 D ／ A 变 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 换 数据 写入 D ／ A 数据文件 中 
 　 　 fseek ( fADout ， SEEK ＿ SET ， 0 ) ； 
 　 　 do { 
 　 　 　 　 fscanf ( fADout ， ″ ％ d ％ d ＼ n ″ ， ＆ chv ， ＆ cht ) ； 
 　 　 　 　 　 　 　 　 ／ ／ 从 A ／ D 数据文件 中 读取 A ／ D 变换 数据 
 　 　 　 　 if ( chv ＝ ＝ 5 ) ／ ／ A ／ D 通道 号 为 5 时 
 　 　 　 焮 
 　 　 　 ListBox1 － ＞ Items － ＞ Add ( FloatToStr ( chv ) ＋ 
 　 　 　 　 　 　 　 　 String ( ″ ″ ) ＋ FloatToStr ( cht ) ) ； 
 　 　 　 　 ／ ／ 在 窗体 Form1 的 ListBox1 中 显示 A ／ D 通道 
 　 　 　 　 　 　 　 　 　 　 　 ／ ／ 5 的 采集 数据 
 　 　 　 break ； 
 　 爙 
 　 爙 while ( chv ＜ 15 ) ； 
 } 
 ／ ／ － － － － － － － － － － 窗体 Form1 关闭 时 响应 事件 － － － － － － － － － － ／ ／ 
 void ＿ fastcallTForm1 : : FormClose ( TObject * Sender ， 
 　 　 　 　 　 　 　 　 　 　 　 TCloseAction ＆ Action ) 
 { 
 fseek ( fCtrl ， SEEK ＿ SET ， 0 ) ； 
 fprintf ( fCtrl ， ″ ％ d ＼ n ″ ， 0 ) ； ／ ／ 写入 终止 程序运行 控制 字 “ 0 ” 
 fclose ( fDAin ) ； 
 fclose ( fADout ) ； 
 fclose ( fCtrl ) ； 
 } 
 ／ ／ － － － － － － － － － － － 线程 thread1 程序代码 － － － － － － － － － － － － － ／ ／ 
 ＃ include ＜ vcl . h ＞ 
 ＃ pragmahdrstop 
 ＃ include ″ thread1 . h ″ 
 ＃ pragmapackage ( smart ＿ init ) 
 ／ ／ － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － 
 ＿ fastcallTadaThread : : TadaThread ( boolCreateSuspended ) 
 ： TThread ( CreateSuspended ) 
 { 
 } 
 ／ ／ － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － － 
 void ＿ fastcallTadaThread : : Execute ( ) ) 
 { 
 system ( ″ ada . exe ″ ) ； ／ ／ 运行 DOSI ／ O 接口 应用程序 
 } 
 　 　 为 程序 略去 了 采集卡 的 初始化 程序 和 部分 关系不大 的 语句 ， 为 读者 在 实际 应用 时应作 相应 增改 。 本文 所述 数据 采集 方法 已 成功 应用 于 作者 的 项目 开发 中 ， 对 其它 Windows 环境 下 的 应用 程序开发 也 有 一定 参考价值 。 
 周开利 ( 北京理工大学 五系 97 研 100081 ) 
 汪云 ( 北京理工大学 五系 97 研 100081 ) 
 参考文献 
 1 ， 黄晓勇 ． Windows 工业 控制 应用 探讨 ． 工业 控制 计算机 ， 1997 ； （ 4 ） ： 25 
 2 ， 何 海波 ． 数据 采集 软件开发 中 问题 的 分析 ． 微 计算机信息 ， 1999 ； 15 （ 2 ） ： 27 
 3 ， 袁志勇 ． 用 VC ＋ ＋ 编写 Windows 硬件 I ／ O 接口 程序 ． 电脑 学习 ， 1998 ； （ 6 ） ： 24 
 4 ， TelleM ． BorlandC ＋ ＋ Builder 高级 编程 指南 ． 北京 ： 中国 水利电力 出版社 ， 1998 
 收稿 日期 ： 1999 － 12 － 20 
