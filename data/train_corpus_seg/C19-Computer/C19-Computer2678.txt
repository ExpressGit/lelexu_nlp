软件 学报 
 JOURNALOFSOFTWARE 
 1999 年 　 第 10 卷 　 第 10 期 　 Vol.10 　 No.10 　 1999 
 
 
 
 一种 面向 作业 的 快速 调度 算法 
 黄启春 　 陈奇 　 俞瑞钊 
 
 摘要 　 面向 作业 的 调度 ( joborientedscheduling , 简称 JOS ) 在 实际 作业 车间 ( jobshop ) 调度 中 得到 普遍 的 应用 , 它 的 基本 思想 是 将 作业 一个个 地 安排 到 工作 机器 上 . 该文 提出 了 一种 基于 计算机 JOS 系统 的 快速 调度 算法 , 该 算法 指定 作业 操作 的 可行 调度 起始 和 结束 时间 以 正排 工序 或逆排 工序 方式 将 它们 安排 到 有限 能力 的 工作 机器 上 . 通过 记录 和 修改 每一 机器 有效 时间槽 的 办法 来 减少 操作 在 每 一 机器 上 搜索 可行 时间槽 的 时间 , 从而 大大提高 了 计算 效率 . 实际 系统 应用 表明 , 此 算法 对于 大规模 调度 具有 很强 的 优越性 . 
 关键词 　 Joborientedscheduling ( JOS ) , 启发式 算法 , 时间槽 , JobShop 调度 . 
 中图法 分类号 　 TP393 
 AFastJobOrientedSchedulingAlgorithm 
 HUANGQi - chunCHENQiYURui - zhao 
 ( InstituteofArtificialIntelligenceZhejiangUniversityHangzhou310027 ) 
 AbstractJoborientedscheduling ( JOS ) hasbeenthemostcommonlyusedtechniqueinactualjobshopscheduling . Itloadsjobsonebyoneontomachines . Inthispaper , theauthorspresentafastschedulingalgorithmofcomputer - basedJOSsystem , thealgorithmassignsfeasibleschedulestartandfinishtimestotheoperationsofajobbyloadingthemforwardorbackwardontothecapacityconstrainedmachines . Thecomputationtimetofindthefeasibletimeslotonthemachineisreducedbylogandmodifyeachmachine ’ sfeasibletimeslot . Thus , thecomputationalefficiencyissubstantiallyimproved . Experimentaltestingshowsthatthealgorithmhassignificantmeritsforlargesizeproblems . 
 KeywordsJoborientedscheduling ( JOS ) , heuristicsalgorithm , timeslot , jobshopscheduling . 
 　 　 如何 有效 地 解决 调度 问题 是 许多 计算机 在 生产 管理 领域 应用 的 重要 问题 , JobShop 调度 是 其中 一类 典型 的 困难 问题 . 许许多多 的 调度 研究 表明 , 启发式 算法 是 解决 实际 应用 于 作业 车间 调度 的 唯一 有效 的 方法 . 遗传算法 [ 1 ] 、 并行 进化 算法 [ 2 ] 等 算法 已有 不少 算例 , 这些 方法 现在 有 较 多 的 研究 , 也 已 取得 了 较 好 的 效果 , 但 尚未 在 实际 调度 中 得到 应用 . 主流 的 启发式 调度 研究 是 采用 面向 操作 的 启发式 方法 [ 3 , 4 ] , 基于 派送 原则 , 每台 机器 上 的 调度 是 通过 选择 适合 在 该台 机器 上 加工 的 下 一 操作 来 决定 的 , 为了 生成 详细 的 生产 调度 计划 , 一般 采用 仿真 方法 . 基于 仿真 的 系统 有 能力 处理 实际 生产 环境 的 动态性 , 但是 它 存在 许多 需要 解决 的 问题 , 如 计算机 处理 时间 耗费 、 模型 仿真 能力 以及 用户 对 仿真 结果 的 接受程度 等 . 
 　 　 与 面向 操作 的 启发式 方法 不同 , 另一类 启发式 方法 即 面向 作业 的 调度 ( joborientedscheduling , 简称 JOS ) 方法 [ 5 , 6 ] , 它 以 作业 的 方式 进行 调度 , 只有 在 某 一 作业 的 所有 操作 已经 调度 完成 之后 才 考虑 下 一 作业 . JOS 不 采用 仿真 模型 , 生成 详细 的 生产 调度 计划 是 通过 将 作业 一个 接 一个 地 安排 到 不同 的 机器 上 . 这一 方法 同 一般 工业生产 中 实际 应用 的 手工 调度 方法 所 采用 的 甘特图 法 非常 相近 . 甘特图 能 有效 地 用来 监视 生产 活动 过程 . 然而 手工 方法 生成 甘特图 非常 耗费 时间 , 特别 是 对于 那些 大规模 的 生产 调度 , 手工 方法 无法 适应 适时 调度 , 基于 计算机 的 JOS 系统 却 能 很 好地解决 这一 问题 . 
 　 　 本文 介绍 了 一般 作业 车间 调度 问题 的 JOS 模型 特征 及其 调度 处理过程 , 并 提出 一种 基于 时间槽 的 面向 作业 快速 搜索算法 . 
 1 　 面向 作业 的 调度 模型 
 1.1 JOS 模型 
 　 　 下面 给出 一个 反映 JobShop 调度 问题 一般 特征 的 模型 : 
 　 　 . 每个 车间 有 多个 加工 中心 ； 
 　 　 . 每个 加工 中心 有 许多 并行 的 机器 ； 
 　 　 . 每个 加工 中心 必须 处理 许多 作业 ； 
 　 　 . 不同 的 机器 有 不同 的 能力 约束 ； 
 　 　 . 每一 作业 由 一个 需求 序列 ( 操作 ) 组成 ； 
 　 　 . 每种 操作 需要 若干 资源 , 这里 仅 考虑 机器 ； 
 　 　 . 每台 机器 可 用于 不同 类型 的 操作 , 每种 操作 可用 若干 台 机器 ； 
 　 　 . 每种 操作 需 占用 某 机器 一段时间 ； 
 　 　 . 不同 操作 之间 存在 运送 时间 ； 
 　 　 . 不同 作业 有 不同 的 调度 结束 时间 约束 。 
 　 　 对于 某些 问题 可能 还有 其他 约束 , 调度 问题 就是 决定 每一 作业 的 操作 在 指定 机器 上 的 可能 调度 起始 时间 和 结束 时间 . 调度 的 目标 是 , 对 给定 作业 , 要么 让 它 尽可能 早 完成 , 要么 使 它 最靠近 指定 时间 完成 . 
 1.2 调度 处理过程 
 　 　 调度 过程 首先 是 根据 作业 间 的 依赖 关系 决定 作业 的 调度 顺序 , 如 管理 上 的 优先级 、 结束 时间 先后 、 松弛 时间 、 作业 数量 以及 考虑 装配 关系 的 次序 等 . 调度 方法 一般 存在 两种 形式 , 即 正排 工序 法和逆排 工序 法 . 正排 工序 法对 每 一 作业 的 调度 从 第 1 道工序 开始 考虑 调度 的 起始 时间 , 根据 操作过程 间 的 相互 关系 , 每一 操作 被 安排 到 可行 加工 时间 最早 的 机器 上 . 正排 工序 法 的 目的 是 使 作业 最早 完成 . 逆排 工序 法对 每 一 作业 的 调度 从 最后 一道 工序 开始 考虑 调度 的 结束 时间 , 根据 作业 结束 时间 要求 及 操作过程 的 约束 , 每一 操作 被 安排 到 可行 加工 时间 最迟 的 机器 上 . 逆排 工序 法 的 目的 是 使 作业 的 完成 时间 最 接近 指定 的 作业 结束 时间 . 
 　 　 由此 可以 看出 , JOS 算法 的 关键在于 将 不同 的 操作 正排 或逆排 至 给定 能力 约束 的 机器 上 . 计算 每一 操作 在 不同 机器 上 的 调度 起始 时间 和 结束 时间 是 通过 在 给定 的 机器 上 寻找 最早 ( 正排 工序 ) 或 最迟 ( 逆排 工序 ) 的 有效 时间槽 来 完成 的 . 对 某 一 操作 , 要 使 给定 机器 上 的 时间槽 有效 , 必须 满足 以下 条件 : ( a ) 该 时间槽 未 被 别的 操作 占用 ; ( b ) 时间槽 的 大小 必须 大于 或 等于 该 操作 时间 ; ( c ) 该 时间槽 必须 满足 给定 操作 的 所有 约束条件 . 因此 , 调度 过程 的 计算 时间 依赖于 搜索 有效 时间槽 的 步数 , 一般 情况 下 , 在 某 一 机器 上 调度 的 操作 数量 越大 , 随后 调度 的 搜索 步数 就 越 多 . 
 　 　 为了 减少 搜索 时间槽 的 时间 , 我们 对 每 一台 机器 均 建立 了 一个 时间槽 缓冲区 , 在 缓冲区 中 存储 那些 操作 间隙 大于 0 的 时间槽 值 , 调度 过程 就是 不断 搜索 时间槽 缓冲区 , 找到 合适 的 时间槽 后 对 缓冲区 进行 修改 的 过程 . 时间槽 的 修改 过程 存在 3 种 情况 : ( a ) 操作 的 起始 时间 和 结束 时间 均 不 等于 时间槽 的 起始 结束 时间 , 这时 , 时间槽 数将 增加 1 ; ( b ) 操作 的 起始 时间 和 结束 时间 与 时间槽 的 起始 结束 时间 有 一个 是 对应 相等 的 , 则 时间槽 的 数量 不会 改变 而 只是 时间槽 值 发生 改变 ; ( c ) 操作 的 起始 时间 和 结束 时间 均 与 时间槽 的 起始 结束 时间 对应 相等 , 这时 对应 的 时间槽 将 消失 . 很 显然 , 时间槽 的 数量 不会 随着 调度 数量 的 增长 而 增多 , 因此 调度 量 越 大 , 该 算法 所 节省 的 时间 就 越 多 . 
 2 　 算法 
 　 　 对于 一般 的 作业 车间 , 有 I 个 作业 需要 调度 , 每一 作业 i ( i = 1 , 2 , … , I ) 有 Ji 个 操作 , 作业 i 的 每 一 操作 ( i , j ) ( j = 1 , 2 , … , Ji ) 将要 安排 到 可以 加工 该 操作 的 加工 中心 k 的 第 l ( l = 1 , 2 , … , Lk ) 台 机器 上 , 其中 Lk 为 该 加工 中心 的 机器 数 . 调度 的 算法 就是 在 机器 上 寻找 最早 或 最迟 的 有效 时间槽 . i , j , k 之间 的 关系 在 调度 之前 已经 确定 , 即 操作 ( i , j ) 在 指定 的 加工 中心 k 上 进行 加工 , 而 i , j , k 与 l 的 关系 是 通过 调度 过程 计算 来 确定 的 . 
 　 　 我们 首先 给出 正排 工序 算法 , 操作 ( i , j ) 调度 到 机器 ( k , l ) 上 的 调度 起始 和 结束 时间 是 通过 计算 以下 时间段 来 实现 的 . 
 　 　 ( 1 ) 操作 ( i , j ) 可能 的 起始 时间 ( Psti , j , k , l ) . 它 是 由 施与 ( i , j ) 上 的 约束 决定 的 , 主要 包括 : ( a ) 如果 ( i , j ) 为 某 一 作业 的 第 1 道工序 , 则 Psti , j , k , l 为 作业 的 起始 时间 ; ( b ) 如果 ( i , j ) 不是 某一 作业 的 第 1 道工序 , 则 Psti , j , k , l 为 上 一道 工序 的 结束 时间 ; ( c ) 根据 前 一道 工序 的 结束 时间 考虑 优先级 以及 工序 间 的 运输 时间 ; ( d ) 机器 ( k , l ) 的 开工 时间 . 
 　 　 ( 2 ) 操作 ( i , j ) 可能 的 结束 时间 ( Pfti , j , k , l ) . 它 是 由 Psti , j , k , l 加上 操作 ( i , j ) 在 ( k , l ) 上 的 加工 时间 计算 得到 的 . 
 　 　 ( 3 ) 操作 ( i , j ) 在 机器 ( k , l ) ( l = 1 , 2 , … , Lk ) 上 加工 的 可行 起始 和 结束 时间 ( Fsti , j , k , l , Ffti , j , k , l ) . 它 是 根据 时间段 ( Psti , j , k , l , Pfti , j , k , l ) 与 机器 ( k , l ) 上 的 时间槽 进行 比较 后 确定 的 . 
 　 　 ( 4 ) 操作 ( i , j ) 的 调度 结束 时间 ( SFTi , j , k , l ) 是 由 以上 不同 机器 上 的 计算结果 取 最小 的 可行 结束 时间 . 操作 ( i , j ) 的 调度 起始 时间 ( SSTi , j , k , l ) 是 与 调度 结束 时间 相对 应 的 最小 可行 起始 时间 , 这 将 保证 操作 尽可能 早 完成 . 如果 有 两台 或 多台 机器 满足条件 , 则 按 顺序 取 最 前面 的 一台 . 
 　 　 算法 的 效率 决定 于 寻找 可行 的 起始 和 结束 时间 ( Fsti , j , k , l , Ffti , j , k , l ) , 即 找到 与 ( Psti , j , k , l , Pfti , j , k , l ) 相匹配 的 时间槽 , 为此 , 我们 给 每 一台 机器 ( k , l ) 开设 一个 时间槽 缓冲区 存储 不同 的 时间槽 值 . Tssk , l , m 表示 机器 ( k , l ) 上 第 m 个 时间槽 的 起始 时间 , Tfsk , l , m 表示 机器 ( k , l ) 上 第 m 个 时间槽 的 结束 时间 , 其中 m = 1 , 2 , … , n , n 为 时间槽 数 . 
 　 　 下面 , 首先 给出 正排 工序 法 调度 操作 ( i , j ) 到 机器 ( k , l ) 上 的 算法 过程 . 
 　 　 初始 设置 : Psti , j , k , l = Pfti , j , k , l = Fsti , j , k , l = Ffti , j , k , l = SFTi , j , k , l = SSTi , j , k , l = 0 
 　 　 　 　 　 　 　 Tssk , l , m = 0 , Tfsk , l , m = tmax ( tmax 为 一 给定 的 足够 大 的 值 , 根据 系统调度 规模 
 　 　 　 　 　 　 　 来 确定 ) 
 　 　 S1 . 将 机器 ( k , l ) ( l = 1 , 2 , … , Lk ) 按 一定 的 顺序排列 . 
 　 　 S2 . 根据 操作 ( i , j ) 的 约束条件 确定 Psti , j , k , l . 
 　 　 S3 . 通过 以下 步骤 计算 Fsti , j , k , l 和 Ffti , j , k , l . 
 　 　 　 　 S3.1 . 计算 Pfti , j , k , l , 由 Psti , j , k , l 加上 操作 ( i , j ) 在 机器 ( k , l ) 上 的 操作 时间 确定 . 
 　 　 　 　 S3.2 . 如果 l > 1 且 Pfti , j , k , l3Ffti , j , k , l ( l ∈ { 1 , 2 , … , ( l - 1 ) } ) , 说明 该 操作 不 可能 在 这 
 　 　 　 　 　 　 　 台 机器 上 加工 , 返回 S1 , 取 下 一台 机器 重新 计算 , 直到 L = Lk , 否则 执行 S3.3 . 
 　 　 　 　 S3.3 . 寻找 合适 的 时间槽 . 
 　 　 　 　 　 　 　 S3.3 . 1 . 将 时间槽 ( Tssk , l , mTfsk , l , m ) m ∈ ( 1 , 2 , … , n ) 按 时间 顺序 从小到大 排序 . 
 　 　 　 　 　 　 　 S3.3 . 2 . 如果 Pfti , j , k , l > Tfsk , l , m 或 Pfti , j , k , l - Psti , j , k , l > Tfsk , l , m - Tssk , l , m , 
 　 　 　 　 　 　 　 　 　 　 　 说明 该 时间槽 不 合适 , 取 m = m + 1 , 返回 S3.3 . 1 . 
 　 　 　 　 　 　 　 S3.3 . 3 . 如果 Psti , j , k , lTssk , l , m , 则 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 Psti , j , k , l = Tssk , l , m , 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 Pfti , j , k , l = Psti , j , k , l + 操作 ( i , j ) 的 操作 时间 , 
 　 　 S4 . 取 Fsti , j , k , l = Psti , j , k , l , Ffti , j , k , l = Pfti , j , k , l . 
 　 　 S5 . 重复 执行 S1 到 S4 直到 l = Lk . 
 　 　 S6 . 操作 ( i , j ) 的 调度 起始 时间 和 调度 结束 时间 由下式 给出 : 
 　 　 　 　 　 　 　 SFTi , j = SFTi , j , k , p = min { Ffti , j , k , l } , l = 1 , 2 , … , Lk , 
 　 　 　 　 　 　 　 SSTi , j = SSTi , j , k , p = Fsti , j , k , p . 
 其中 操作 ( i , j ) 被 调度 到 机器 ( k , p ) 上 , p ∈ { 1 , 2 , … , Lk } 
 　 　 S7 . 根据 以下 4 种 情况 修改 时间槽 值 : 
 　 　 ( 1 ) 如果 Tssk , l , m = Fsti , j , k , p 且 Tfsk , l , m = Ffti , j , k , p , 则 删除 时间槽 ( Tssk , p , mTfsk , p , m ) ; 
 　 　 ( 2 ) 如果 Tssk , l , m = Fsti , j , k , p , 则 将 时间槽 ( Tssk , p , mTfsk , p , m ) 改为 ( Ffti , j , k , pTfsk , p , m ) ; 
 　 　 ( 3 ) 如果 Tfsk , l , m = Ffti , j , k , p , 则 将 时间槽 ( Tssk , p , mTfsk , p , m ) 改为 ( Tssk , p , mFsti , j , k , p ) ; 
 　 　 ( 4 ) 以上 条件 均 不 满足 , 首先 将 时间槽 ( Tssk , p , mTfsk , p , m ) 改为 ( Tssk , p , mFsti , j , k , p ) , 再增 
 　 　 　 　 加 一个 时间槽 ( Ffti , j , k , pTfsk , p , m ) . 
 　 　 逆排 工序 算法 与 正排 工序 算法 的 基本 思想 是 一样 的 , 只是 计算 过程 是从 工序 逆向 进行 . 例如 , 调度 过程 首先 是 确定 Pfti , j , k , l , 它 由 以下 几种 情况 确定 : ( a ) 如果 工序 ( i , j ) 为 最后 一道 工序 , 则 Pfti , j , k , l 为 作业 的 结束 时间 ; ( b ) 如果 工序 ( i , j ) 不是 最后 一道 工序 , 则 Pfti , j , k , l 为 后 一 工序 的 起始 加工 时间 ; ( c ) 根据 后 一 工序 的 起始 加工 时间 考虑 优先级 及 运送 时间 计算 得到 ; ( d ) 机器 的 工作 结束 时间 . Fsti , j , k , l 和 Ffti , j , k , l 是 每台 机器 上 最迟 的 可行 时间段 ( Psti , j , k , l , Pfti , j , k , l ) 合适 的 时间槽 搜索 过程 变为 : 
 　 　 S3.3 . 1 . 将 时间槽 ( Tssk , l , mTfsk , l , m ) ( m ∈ ( 1 , 2 , … , n ) ) 按 时间 顺序 从大到 小 排序 . 
 　 　 S3.3 . 2 . 如果 Psti , j , k , l < Tssk , l , m 或 Pfti , j , k , l - Psti , j , k , l > Tfsk , l , m - Tssk , l , m , 说明 该时 
 　 　 　 　 　 　 间 槽 不 合适 , 取 m = m - 1 , 返回 S3.3 . 1 . 
 　 　 S3.3 . 3 . 如果 Pfti , j , k , l3Tfsk , l , m , 则 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 Pfti , j , k , l = Tfsk , l , m , 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 Psti , j , k , l = Pfti , j , k , l - 操作 ( i , j ) 的 操作 时间 . 
 操作 ( i , j ) 的 调度 起始 和 结束 时间 由下式 给定 : 
 　 　 　 　 　 　 　 　 　 　 　 　 SFTi , j = SFTi , j , k , p = max { Ffti , j , k , l } , l = 1 , 2 , … , Lk , 
 　 　 　 　 　 　 　 　 　 　 　 　 SSTi , j = SSTi , j , k , p = Fsti , j , k , p . 
 其中 , 操作 ( i , j ) 被 调度 到 机器 ( k , p ) 上 , p ∈ { 1 , 2 , … , Lk } . 
 3 　 应用 实例 比较 分析 
 　 　 在 面向 作业 的 调度 算法 中 , 以 Chung - HsingYeh 所 提出 的 基于 操作 块 的 快速 算法 的 效率 最高 ( 以下 简称 操作 块 算法 ) [ 6 ] . 其 基本 思想 是 将 同一 机器 上 时间 间隙 为 0 的 操作 以 链表 形式 存储 为 一个 块 , 这样 , 在 搜索 有效 时间槽 时 , 通过 搜索 操作 链 避免 了 对 0 时间槽 的 比较 判断 , 从而 缩短 了 搜索 时间 . 其 实现 方式 是 通过 记录 每一 操作 的 紧前 工序 ( dfok , l ( i , j ) ) 和 紧后 工序 ( dpok , l ( i , j ) ) 来 达到 的 . 该 算法 随着 操作 链 的 增大 , 搜索 时间 虽然 不像 一般 算法 那样 呈 级数 增长 , 但 也 必须 耗费 较 多 的 时间 . 
 　 　 本文 提出 的 基于 时间槽 的 快速 算法 ( 以下 简称 时间槽 算法 ) 以 最 直接 的 方式 记录 每 一台 机器 上 的 有效 时间槽 值 , 从而 大大减少 了 搜索 时间 . 该 算法 已经 在 实际 MRP - 系统 运行 中 应用 . 下面 我们 以 某 拖拉机厂 金工 车间 的 生产 调度 过程 为例 , 对 一般 算法 、 操作 块 算法 及 时间槽 算法 的 效率 进行 比较 , 比较 程序 以 关系数据库 存储 调度 信息 数据 , 前端 开发工具 为 Powerbuilder , 后 端 数据库 采用 Sybase , 在 奔腾 200 , 内存 为 32 兆 的 微机 上 运行 . 该 金工 车间 的 最大 作业 数为 99 , 总 操作数 为 1084 , 机器 数为 26 , 分别 取 6 种 不同 的 情况 , 采用 3 种 方法 进行 计算 比较 , 结果 见表 1 . 
 表 1 一般 算法 、 操作 块 算法 与 时间槽 缓冲区 算法 效率 的 比较 
 
 作业 数 操作 ( 工序 ) 数 机器 数 一般 方法 计算 时间 ( s ) 操作 块 算法 计算 时间 ( s ) 时间槽 算法 计算 时间 ( s ) 
 131001316.78113 . 42326.762 
 222002034.31626 . 39733.851 
 414002382.26660 . 93868.748 
 5660023138.202102 . 372101.739 
 7180025234.130161 . 469135.576 
 99108426391.604261 . 069181.197 
 
 　 
 　 　 由表 1 可以 看出 , 当 调度 作业 数 等于 13 , 操作数 等于 100 时 , 操作 块 算法 最快 时间 为 13.423 s , 其次 为 一般 算法 , 耗费 时间 为 16.718 s , 而 时间槽 算法 耗费 时间 最多为 26.762 s , 当 操作数 在 200 ~ 600 之间 时 , 操作 块 算法 与 时间槽 算法 均 比 一般 算法 要 快 , 但 提高 得 不 多 . 操作 块 算法 与 时间槽 算法 效率 相差 不 大 , 而 当 操作数 等于 800 和 1084 时 , 操作 块 算法 的 效率 比 一般 算法 分别 提高 45% 和 50% , 而 时间槽 算法 的 效率 比 一般 算法 分别 提高 73% 和 116% . 这 说明 时间槽 算法 对 大规模 的 调度 具有 很强 的 优越性 . 图 1 是 调度 过程 中 某 车床 的 时间槽 缓冲区 变化 情况 , 该车 床上 调度 的 总 操作数 为 330 , 而 时间槽 数 最大值 仅为 10 , 由此可见 , 调度 过程 中 搜索 有效 时间槽 的 时间 随着 调度 数量 的 增长 不会 有太大 的 增长 . 
 
 图 1 　 时间槽 数随 调度 作业 数 的 增长 情况 
 　 　 以上 表明 , 分析 显示 基于 时间槽 缓冲区 的 快速 算法 从 本质 上 提高 了 一般 JOS 算法 的 效率 . 虽然 随着 调度 规模 的 增大 , 算法 所 需 耗费 的 时间 随之 增长 , 但 它 不再 是 呈 级数 式 增长 , 这一 算法 完全 可以 应用 于 适时 调度 环境 和 大规模 的 调度 系统 . 
 4 　 结论 
 　 　 作业 车间 调度 问题 的 计算 复杂性 发展 了 许多 针对实际 工业生产 调度 的 有效 方法 , 随着 调度 规模 的 增大 以及 考虑 作业 车间 环境 的 动态性 计算机辅助 调度 成为 必然 . 基于 计算机 的 JOS 算法 能够 提供 高质量 的 、 可行 的 调度 计划 而 在 实际 生产 中 得到 应用 . 本文 提出 的 快速 JOS 算法 大大减少 了 计算 处理 时间 , 对 大规模 的 调度 问题 有 更 明显 的 效果 . 
 注释 ： 本文 研究 得到 国家自然科学基金 资助 。 
 作者简介 ： 黄启春 ： 1972 年生 , 博士生 , 主要 研究 领域 为 人工智能 ， ERP . 
 　 　 　 　 　 陈奇 ： 1963 年生 , 副教授 , 主要 研究 领域 为 人工智能 , IDSS , ERP . 　 　 　 　 　 　 　 　 　 
 　 　 　 　 　 俞瑞钊 ： 1937 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 人工智能 , 数据仓库 , 数据挖掘 
 作者 单位 : 浙江大学 人工智能 研究所 杭州 310027 
 参考文献 
 1 　 陈恩红 , 刘贵全 , 蔡 庆生 . 基于 遗传算法 的 Job - Shop 调度 问题 求解 方法 . 软件 学报 , 1998 , 9 ( 2 ) : 
 　 　 39 ～ 143 
 　 　 ( ChenEn - hong , LiuGui - quan , CaiQing - sheng . Ageneticalgorithmbasedjob - shop 
 　 　 schedulingproblemsolvingmethod . JournalofSoftware , 1998 , 9 ( 2 ) : 139 ～ 143 ) 
 2 　 　 方剑 , 席裕庚 . 应用 并行 进化 规划 求解 Job - Shop 调度 问题 . 模式识别 与 人工智能 , 1997 , 10 
 　 　 ( 4 ) : 344 ～ 350 
 　 　 ( FangJian , XiYu - geng . Usingparallelevolutionaryprogrammingtosolvethe 
 　 　 job - shopschedulingproblem . PatternRecognitionandArtificialIntelligence , 
 　 　 1997 , 10 ( 4 ) : 344 ～ 350 ) 
 3 　 SunD , BattaR , LinL . Effectivejobshopschedulingthroughactivechain 
 　 　 manipulation . ComputersandOperationsResearch , 1995 , 22 ( 2 ) : 159 ～ 172 
 4 　 KimYD . Abackwardapproachinlistschedulingalgorithmsformulti - machine 
 　 　 tardinessproblems . ComputersandOperationsResearch , 1995 , 22 ( 3 ) : 307 ～ 319 
 5 　 HastingsNAJ , MarshallPH , WillisRJ . ScheduledbasedMRP : anintegrated 
 　 　 approachtoproductionschedulingandmaterialrequirementsplanning . Journal 
 　 　 oftheOperationalResearchSociety , 1982 , 33 ( 11 ) : 1021 ～ 1029 
 6 　 YeahChung - Hosing . Afastfiniteloadingalgorithmforjoborientedscheduling . 
 　 　 ComputersandOperationsResearch , 1997 , 24 ( 2 ) : 193 ～ 198 
 收稿 日期 ： 1998 - 07 - 06 修稿 日期 ： 1998 - 11 - 10 
