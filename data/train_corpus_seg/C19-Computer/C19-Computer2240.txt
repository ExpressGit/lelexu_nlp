计算机 应用 研究 
 APPLICATIONRESEARCHOFCOMPUTERS 
 2000Vol.17 No.3 P.78 - 79 
 
 
 
 
 Linux 中 基于 缓冲式 多线程 的 文件传输 程序 
 裴开俊 　 张帆 　 朱明富 
 摘 　 要 ： 介绍 文件传输 中 用到 的 HTTP 与 FTP 协议 ， 讲述 如何 利用 多线程 及 缓冲区 编写 文件传输 程序 。 
 关键词 ： HTTPFTP 多线程 缓冲区 
 1 　 引言 
 　 　 现在 ， 免费 操作系统 Linux 使用 范围 越来越 广 ， 由于 性能 稳定 安全 ， 源代码 公开 ， 又 可 自由 获取 免费 的 应用软件 ， Linux 操作系统 得到 了 许多 电脑 爱好者 的 青睐 。 在 电脑 的 应用 中 ， 通过 FTP 和 HTTP 站点 下载 软件 是 很 常见 的 ， 但 如果 连接 该 站点 的 人 很多 ， 下载 的 速度 会 很慢 ， 为 加快 下载速度 ， 通常 利用 多线程 下载 的 方法 。 目前 ， Windows 操作系统 下 的 快速 下载 软件 较 多 ， 如 网络蚂蚁 、 网络 吸血鬼 等 ， 而 基于 Linux 操作系统 的 却 几乎 没有 ， 本文 作者 便 开发 了 一个 缓冲式 多线程 的 文件传输 客户端程序 。 
 2 　 FTP 和 HTTP 协议 介绍 
 2.1 　 FTP 协议 
 　 　 FTP ( 文件传输 协议 ) 类似 于 SMTP ( 简单 邮件 传输 协议 ) 和 POP3 ( 邮局 协议 ) ， 它 也 使用 NTVASCII 命令 串 和 应答 码 ， 但 FTP 使用 两个 TCP 连接 来 完成 文件传输 操作 。 这 两个 TCP 连接 分别 是 控制 连接 和 数据 连接 。 控制 连接 是 一 典型 的 客户 / 服务器 设置 ， TCP 服务器 在 一周 知 端口 ( 一般 是 端口 21 ) 执行 被动 打开 ， 并 等待 客户 连接 。 相应 地 ， TCP 客户 也 在 这 一 端口 与 TCP 服务器 联系 ， 在 程序 协调 下 完成 一个 典型 的 TCP 连接 。 控制 连接 在 整个 TCP 处理过程 中 保持 主动 状态 ， 客户 和 服务器 通过 控制 连接 交换 NVTASCII 命令 串及 应答 码 。 TCP 建立 了 一个 分离 的 数据 连接 来 进行 文件传输 操作 。 图 1 显示 了 一个 TCP 操作 的 典型 配置 。 
 
 图 1 　 FTP 操作 的 典型 配置 
 　 　 文件传输 协议 包括 三十 多条 基于 FTP 程序 用来 完成 文件传送 操作 的 命令 。 这些 命令 分为 三类 ： 访问控制 命令 、 传送 参数 命令 及 服务 命令 。 访问控制 命令 传送 诸如 向 服务器 标识 用户 身份 或者 是 告诉 服务器 用户 期望 访问 的 位置 ( 或 目录 ) 的 信息 。 传送 参数 命令 允许 客户 定义 FTP 选择 ： 文件类型 、 文件格式 、 文件 结构 、 传送模式 。 FTP 命令 定义 了 用户 期望 执行 的 文件传送 操作 。 下面 仅举 几个 本 程序 主要 用到 的 命令 。 
 　 　 USER ( 用户名 ) ： 当 用户 访问 一个 FTP 站点 时 必须 提供 制定 的 用户名 和 口令 ， USER 命令 向 服务器发送 用户名 。 
 　 　 PASS ( 口令 ) ： 该 命令 向 服务器发送 用户 口令 。 
 　 　 CWD ( 改变 工作 目录 ) ： 在 FTP 服务器 上 对 一个 文件 进行 操作 ， 必须 进入 该 文件 所在 的 目录 ， 否则 服务器 会 告诉 你 文件 不 存在 。 CWD 命令 可以 使 用户 转 到 远程 主机 上 的 不同 目录 。 
 　 　 PASV ( 被动 ) ： 正常 情况 下 ， FTP 客户 告诉 服务器 与 客户 主机 的 哪个 端口 连接 ， 然后 服务器 启动 数据通道 的 TCP 连接 。 不过 ， 客户 可以 用 PASV 命令 来 让 服务器 的 数据传输 过程 在 一个 数据 口 上 ( 不是 缺省 的 数据 口 ) 上 侦听 并 等待 连接 ， 而 不是 在 传送 命令 的 接收 上 启动 一个 连接 。 
 　 　 REST ( 重启动 ) ： 这 是 本 程序 中 用到 的 最 重要 的 命令 ， 它 可以 让 用户 从文件 中间 某 一部分 开始 下载 。 RETR ( 检索 ) ： 本 命令 用来 下载 程序 。 
 2.2 HTTP 协议 
 　 　 同 FTP 协议 相比 ， HTTP 协议 要 简单 一些 ， 客户 同 服务器 HTTP 端口 连接 后 ， 向 服务器 送 GET 和 HOST 命令 就 可以 下载 文件 ， 本 程序 主要 用到 的 命令 有 ： 
 　 　 GET ： 发送 下载 请求 。 
 　 　 HOST ： 同 GET 命令 联用 ， 告诉 要 下载 文件 所在 的 服务器 地址 。 
 　 　 RANGE ： 下载 文件 中 的 某 一段 。 
 3 　 程序结构 
 3.1 配置文件 ( $ HOME / . ftp . config ) 
 　 　 1 ) 下载 线程 数 ( NUMOFHREAD ) ， 下载 时开 的 线程 数 ， 1 ～ 10 ， 缺省 5 。 
 　 　 2 ) 缓冲区 大小 ( SIZEOFBUF ) ， 下载 时 对应 每个 线程 开 的 缓冲区 ， 1 ～ l024 ( K ) ， 缺省 64 ( K ) 。 
 　 　 3 ) 缓冲区 数 ( NUMOFBUF ) ， 缓冲区 的 数量 ， 1 ～ l00 ， 缺省 为 10 。 
 　 　 4 ) 日志 文件 ( LOGFILE ) ， 日志 文件 位置 ， 缺省 为 . / ftp . log 。 
 　 　 5 ) 缓冲区 刷新 线程 等待时间 ( FLUSHTIME ) ， 1 ～ l024 ( ms ) ， 缺省 100 ( ms ) 。 
 3.2 数据结构 
 　 　 由于 各 线程 工作 独立 ， 它们 所处 的 状态 也 不 相同 ， 往 一个 线程 传递 多个 参数 比较 麻烦 ， 较 好 的 解决 方法 是 建立 结构 。 每个 缓冲区 和 下载 线程 的 参数 对应 一个 结构 链表 。 同时 ， 缓冲区 和 下载 线程 结构 写 有 它们 的 状态 ， 管理 线程 可 根据 状态 协调 工作 。 
 　 　 1 ) 缓冲区 数据结构 
 typedefstruct { 
 　 DLBUFFER * prebuffer ； 　 　 　 　 　 　 　 　 　 / * 上 一个 缓冲区 * / 
 　 longbufstatus ； 　 　 　 　 　 　 　 　 　 　 　 / * 缓冲区 状态 * / 
 　 char * p _ buffer ； 　 　 　 　 　 　 　 　 　 　 　 / * 缓冲区 指针 * / 
 　 DLBUFFER * nextbuffer ； 　 　 　 　 　 　 　 　 / * 下 一个 缓冲区 * / 
 } DLBUFFER ； 
 　 　 2 ) 下载 线程 对应 的 数据结构 
 typedefstruct { 
 　 STCTHREAD * nextthread ； 　 　 　 　 　 　 / * 下 一个 线程 * / 
 　 longthreadstatus ； 　 　 　 　 　 　 　 　 / * 线程 状态 * / 
 　 longtotalbytes ； 　 　 　 　 　 　 　 　 　 / * 总 字节数 * / 
 　 longdlbytes ； 　 　 　 　 　 　 　 　 　 　 / * 已经 完成 的 字节数 * / 
 　 char * rmthost ； 　 　 　 　 　 　 　 　 　 　 / * 远程 主机名 * / 
 　 char * filename ； 　 　 　 　 　 　 　 　 　 / * 文件名 * / 
 　 longstartdl ； 　 　 　 　 　 　 　 　 　 　 / * 开始 下载 的 文件 位置 * / 
 　 DLBUFFER * p _ buffer ； 　 　 　 　 　 　 　 / * 对应 的 缓冲区 指针 * / 
 　 int * p _ socket ； 　 　 　 　 　 　 　 　 　 / * 线程 对应 的 socket 端口 * / 
 　 int * p _ dsocket ； 　 　 　 　 　 　 　 　 　 / * ifftp , datasocket * / 
 　 intprotocol ； 　 　 　 　 　 　 　 　 　 / * httporftp * / 
 } STCTHREAD ； 
 3.3 　 程序 中 的 多线程 
 　 　 为了 提高 下载速度 ， 本 程序 采用 了 缓冲式 多线程 连入 服务器 并行 下载 文件 各段 的 方法 。 主要 工作 由 三种 线程 完成 ： 
 　 　 1 ) 下载 线程 ( DLT ， Downloadthread ) 
 　 　 建立 Socket 联接 ， 根据 任务 由 指定 的 文件 位置 将 数据 填充 到 缓冲区 里 。 对于 HTTP 协议 ， 只 需 读取 向 服务器 发 “ Range ” 命令 后 获取 的 返回 内容 即可 ， 对于 FTP 协议 ， 由于 不能 直接 获取 文件 中 的 某 一块 ， 要 先 向 服务器发送 “ REST ” 命令 ， 从文件 中 的 某 一 位置 开始 下载 ， 读取 制定 的 长度 后 ， 立即 将 连接 服务器 FTP 数据 端口 的 Socket 关闭 ， 然后 将 线程 的 状态 设置 为 空闲 。 在 管理 线程 中 ， 服务器 FTP 数据 端口 将 重新 连接 。 
 　 　 2 ) 缓冲区 刷新 线程 ( BFT ， Bufferflushthread ) 
 　 　 将 填满 的 缓冲区 里 的 数据 刷新 到 硬盘 上 。 每 过 一定 的 时间 ( FLUSHTIME ) 检查 一遍 缓冲区 ， 如 遇到 完成 任务 的 下载 线程 ， 则 执行 刷新 操作 。 之所以 开 缓冲区 刷新 线程 ， 而 不 直接 在 下载 线程 中将 缓冲区 的 数据 刷新 到 硬盘 上 ， 是 为了 避免 几个 下载 线程 同时 对 硬盘 上 的 一个 文件 进行 操作 ， 这样 会 造成 文件 读写 错误 ， 下载 线程 下载 完 文件 一块 后 ， 就 去 下载 另外 一部分 ， 而 由 一个 缓冲区 刷新 线程 负责 所有 的 客户端 文件 操作 ， 就 避免 了 以上 问题 的 出现 。 
 　 　 3 ) 管理 线程 ( MGT ， Managethread ) 
 　 　 负责 开新 的 下载 线程 ， 写 日志 ， 并 分派任务 给 新 线程 。 
 　 　 管理 线程 将 下载 文件 分成 几段 ， 然后 命令 各个 下载 线程 独立 同 服务器 相连接 ， 每个 下载 线程 负责 下载 制定 的 一块 文件 ， 由 缓冲区 刷新 线程 将 这些 数据 块 写 到 客户端 的 文件 中 去 ， 管理 线程 就是 协调 这些 线程 有序 地 工作 。 管理 线程 不停 地 监视 各 下载 线程 和 缓冲区 的 状态 。 下载 线程 的 状态 有 空闲 、 连接 、 已 连接 、 下载 中 和 下载 完毕 等 状态 ， 缓冲区 有 空闲 、 下载 中 和 下载 完毕 等 状态 。 当一 下载 线程 下载 完毕 后 ， 管理 线程 看 有没有 空闲 的 缓冲区 ， 如 有 ， 则 让 该 线程 下载 一段 文件 放在 空闲 的 缓冲区 中 ， 另外 ， 如 有 下载 完 的 缓冲区 ， 则 让 缓冲区 刷新 线程 将 该 缓冲区 的 内容 刷新 到 硬盘 上 。 对于 未 连接 的 下载 线程 ， 管理 线程 还要 负责 连接 。 如果 管理 线程 发现 所有 文件 段 都 下载 完毕 ， 就 关闭 其它 线程 ， 退出 程序 。 
 3.4 程序 主流程 
 　 　 1 ) 确定 连入 服务器 的 方式 ， 即 客户 是 直接 连入 服务器 ， 还是 通过 代理 连接 服务器 ， 如是 后者 ， 则 须 调用 代理 连接 处理函数 。 
 　 　 2 ) 确定 缓冲区 数目 
 　 　 首先 获得 下载 文件 的 大小 。 对于 FTP 协议 ， 向 服务器 控制 端口 发送 SIZE 命令 可 获得 文件大小 ， 对于 HTTP 协议 ， 先 向 服务器 发 GET 命令 ， 然后 读取 返回 的 表头 部分 ， 其中 “ Range - Type ” 所在 行 就 含有 文件大小 。 由于 通过 配置 参数 可知 缓冲区 长度 ， 用 文件大小 除以 缓冲区 长度 即可 获得 缓冲区 数目 。 
 　 　 3 ) 读取 配置 参数 ， 分配 缓冲区 空间 。 
 　 　 4 ) 打开 管理 线程 ， 在 管理 线程 中 打开 日志 文件 ， 将 下载 文件 分成 若干段 ， 分配 下载 参数 链表 。 
 　 　 5 ) 打开 缓冲区 刷新 线程 。 
 　 　 6 ) 管理 线程 协调 各 线程 工作 ， 如 发现 文件 下载 完毕 ， 则 关闭 Socket 连接 和 各 线程 并 退出 程序 。 
 3.5 　 运行 环境 
 　 　 本 程序 有 两种 运行 环境 ： Shell 终端 和 XWindow 。 在 Shell 环境 下 ， 用户 要 输入 下载 文件 的 协议 ( FTP 或 HTTP ) ， 服务器 地址 及 文件 路径 和 名称 。 可 直接 输入 URL ， 例如 ftp : / / 202.114 . 2.1 / pub / unix / samba - 2.0 . 3 . tar . gz 。 在 XWindow 环境 下 ， 程序 进入 窗口 界面 ， 操作 与 MicrosoftWindows 中 的 常用 下载 程序 基本相同 。 
 　 　 XWindow 下 的 界面 用 GTK ( GIMPToolkit ) 开发 ， GTK 基本上 是 物件 导向 应用软件 程式设计 界面 ( API ) ， 将 Xlib 功能 包装 起来 。 用 GTK 编写 XWindow 程序 比 普通 的 Motif 编程 方便 、 效率高 。 
 裴开俊 ( 华中理工大学 武汉 430074 ) 
 张帆 ( 华中理工大学 武汉 430074 ) 
 朱明富 ( 华中理工大学 武汉 430074 ) 
 参考文献 
 1Internet 网络 编程 . 北京 ： 机械 工业 出版社 
 2RFC765 : FILETRANSFERPROTOCOL ( FTP ) 
 3RFC2068 : HypertextTransferProtocol - HTTP / 1.1 
 收稿 日期 ： 1999 年 9 月 20 日 
