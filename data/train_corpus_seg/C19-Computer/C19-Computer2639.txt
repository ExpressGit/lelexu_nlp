软件 学报 
 JOURNALOFSOFTWARE 
 1999 年 第 10 卷 第 8 期 Vol.10 No.81999 
 
 
 
 双 粒度 协议 下 基于 hint 的 启发式 缓存 替换算法 
 王建勇 　 祝明发 　 徐志伟 
 摘要 　 合作 式 缓存 技术 是 提高 机群文件 系统 性能 的 关键技术 之一 . s2fs ( scalablesingle - imagefilesystem ) 是 一个 单一 映像 机群文件 系统 原型 , 它 利用 双 粒度 协议 实现 了 符合 严格 UNIX 语义 的 合作 式 缓存 . 该文 为 s2fs 设计 了 基于 hint 的 启发式 缓存 替换算法 , 并 为 其 建立 了 性能 分析模型 . 分析 结果表明 , 同 现有 的 合作 式 缓存 替换算法 N - chance 相比 , 启发式 算法 几乎 在 所有 情况 下 都 有效 地 降低 了 I / O 的 响应 时间 . 
 关键词 　 启发式 缓存 替换算法 , N - chance 算法 , 双 粒度 协议 , s2fs ( scalablesingle - imagefilesystem ) , 合作 式 缓存 . 
 中图法 分类号 　 TP316 
 Hint - basedHeuristicCacheReplacementAlgorithmunderDual - granularityProtocol 
 WANGJian - yong1 , 3ZHUMing - fa2 , 3XUZhi - wei2 , 3 
 1 ( DepartmentofComputerScienceandTechnologyBeijingUniversityBeijing100871 ) 
 2 ( NationalResearchCenterforIntelligentComputingSystemsBeijing100080 ) 
 3 ( InstituteofComputingTechnologyTheChineseAcademyofSciencesBeijing100080 ) 
 Abstract 　 Cooperativecachingisoneofthekeytechnologiesusedtoimprovetheperformanceofaclusterfilesystem . s2fs ( scalablesingle - imagefilesystem ) , asingle - imageclusterfilesystemprototype , usesdual - granularitycachecoherenceprotocolinordertoimplementefficientcooperativecachingwhichmeetstheneedsforstrictUNIX - semantics . Inthispaper , ahint - basedheuristiccachereplacementalgorithmunders2fs ' dual - granularityprotocolisproposed , andtheanalyticalmodelsareestablishedforheuristicalgorithmandoneoftheexistingcoordinatedalgorithm — — N - chance . TheanalyticalresultsshowthattheheuristicalgorithmcaneffectivelyreducetheI / OresponsetimecomparedwithN - chancealgorithmalmostineachcase . 
 Keywords 　 Heuristiccachereplacementalgorithm , N - chancealgorithm , dual - granularityprotocol , s2fs ( scalablesingle - imagefilesystem ) , cooperativecaching . 
 　 　 随着 越来越 多 的 分布式系统 利用 高性能 网络 将 各 计算 节点 连接起来 , 远程 内存 正 日益 成为 一种 新型 的 内存 结构 层次 , 因为 通过 高带宽 、 低 时延 的 网络 对 远程 内存 的 访问 要 比 本地 磁盘 快得多 . 这种 远程 缓存 结构 ( remotecachingarchitecture ) ［ 1 ］ 强调 了 各 存储 层次 （ 即 本地 内存 、 远程 内存 和 磁盘 ） 之间 性能 上 的 差异 . 由于 它 允许 系统 中 所有 节点 互相 存取 各自 的 本地 内存 以 充分利用 远程 内存 , 这种 对称 式 结构 显然 不同于 传统 的 客户 / 服务器 模型 , 被 许多 文献 ［ 2 , 3 ］ 称为 合作 式 缓存 ( cooperativecaching ) . 
 　 　 国家 智能 中心 正在 研制 的 机群文件 系统 — — COSMOS . 为了 保证 在 提供 单一 系统 映像 功能 的 同时 , 达到 提高 I / O 可扩展性 的 目的 , 也 采用 了 合作 式 缓存 等 技术 . 目前 , COSMOS 系统 的 原型 已 开发 完毕 , 为了 与 未来 成熟 的 COSMOS 系统 相 区别 , 我们 称 目前 的 COSMOS 原型 系统 为 s2fs ( ScalableSingle - imageFileSystem ) . 
 1s2fs 及其 双 粒度 协议 
 1.1 s2fs — — 一个 可 扩展 的 单一 映像 文件系统 
 　 　 s2fs 是 基于 AIX 操作系统 实现 的 全局 文件系统 , 它 具备 了 严格 的 单一 映像 功能 , 实现 了 unix 文件共享 语义 , 并 在 不 改动 AIX 核心 的 前提 下 , 保证 了 与 unix 应用程序 的 完全 二进制 兼容 . 另外 , s2fs 为了 获得 较 好 的 可扩展性 和 I / O 性能 , 它 还 实现 了 合作 式 缓存 、 并行 分布式 的 元 数据管理 及 并行 存储 功能 . 
 　 　 s2fs 由 核心 相关 层 和 主体 两 部分 组成 . s2fs 的 核心层 是 在 虚拟 文件系统 一级 中 实现 的 , 它 主要 是 接收 来自 逻辑 文件系统 的 I / O 请求 . s2fs 的 用户 层 由 3 类 用户 级 daemon 构成 , 它们 协调 工作 , 共同完成 与 s2fs 相关 的 I / O 操作 . 这 3 类 daemon 被 分别 称为 客户 （ client ） 、 管理器 （ manager ） 和 存储器 （ storage ） . 应用程序 发出 与 s2fs 相关 的 系统 调用 , 经由 逻辑 文件系统 和 虚拟 文件系统 , I / O 请求 传给 s2fs 的 本地 客户 , 若 I / O 请求 不能 由 本地 客户 得到 满足 , 则 转发给 管理器 , 由 管理器 通知 相应 的 客户 或 存储器 来 完成 具体 的 文件 操作 , 把 结果 转发给 本地 客户 , 然后 经过 虚拟 文件系统 和 逻辑 文件系统 把 结果 返回 给 应用程序 . 图 1 给出 了 s2fs 系统 的 组织 结构 . 
 
 图 1 　 s2fs 系统 透视图 
 1.2 双 粒度 协议 
 　 　 在 分布式文件系统 中 , 粗粒度 的 缓存 一致性 协议 容易 造成 数据 读写 的 “ 假 共享 ” 问题 , 而 在 细粒度 一级 来 维护 缓存 一致性 , 则 会 给 服务器 带来 太多 的 负担 , 并 产生 过多 的 不必要 的 开销 . 在 粗粒度 和 细粒度 两个 级别 上 维护 缓存 一致性 就 可以 弥补 双方 各自 的 不足之处 , 因而 我们 为 s2fs 设计 并 实现 了 双 粒度 协议 . 事实上 , 相对 于单 粒度 协议 而言 , 双 粒度 协议 有 下列 好处 ： ( 1 ) 降低 了 因 维护 缓存 一致性 而 引起 的 服务器端 的 工作 负载 ； ( 2 ) 能够 减少 客户 ／ 服务器 间 的 通信 ； ( 3 ) 更为重要 的 是 , 它 能够 提供 某些 hint 信息 , 文件系统 可以 利用 这些 hint 信息 进一步 缓和 服务器 的 负担 及 网络 开销 . 
 　 　 s2fs 是 在 块 和 文件 两个 粒度 上 维护 缓存 一致性 的 . 与 xFS 类似 , s2fs 在 块 一级 是 利用 读 ／ 写 令牌 来 维护 缓存 一致性 的 , 这里 就 不再 赘述 . 在 文件 一级 , s2fs 利用 回调 ( callback ) 机制 来 维护 缓存 一致性 . 当 一个 客户 打开 一个 文件 , 并且 不 存在 并发 的 共享 写 ( concurrentwrite - sharing ) 时 , 管理器 就 赋予 该 客户 一个 被 打开 文件 的 回调 , 并 允诺 当 其他 客户 以 冲突 方式 打开 该 文件 时 , 它会 通知 该 客户 放弃 回调 ( callbackbreak ) . 当 由于 其他 客户 关闭 某个 以写 方式 打开 的 文件 而 使 该 文件 不再 处于 写 共享 状态 时 , 管理器 又 会 重新 赋予 目前 正 处于 打开 该 文件 状态 的 客户 一个 回调 . 在 实现 s2fs 的 双 粒度 协议 时 , 回调 状态 是 存放 在 一个 回调 结构 中 的 , 在 该 结构 中 还 记录 了 文件 的 索引 号 、 目前 正 处于 打开 该 文件 状态 的 客户 数目 、 文件 长度 及 文件 在 磁盘 上 的 位置 （ 如 存储 分组 的 组号 及 起始 节点 号 ） 等 . 这些 信息 不仅 能够 降低 块 的 定位 ( blocklookup ) , 维护 缓存 一致性 的 开销 , 而且 可以 作为 hint 用于 缓存 替换 , 以 提高 I / O 操作 的 性能 . 
 2 启发式 缓存 替换算法 
 2.1 相关 研究 
 　 　 合作 式 缓存 为 文件系统 的 存储 层次 引入 了 一个 新 的 层次 , 即 远程 客户 内存 . 不同 的 客户 缓存 算法 以 不同 的 方式 管理 这 一新 的 存储 层次 . DaulinM . D . 等 人 在 文献 ［ 3 ］ 中 阐述 了 几种 主要 的 合作 式 缓存 算法 , 其中 N - chance 转发 算法 是 最为 现实 可行 的 、 也 是 性能 最好 的 合作 式 缓存 算法 . 该 算法 根据 客户 的 I / O 行为 动态 地 调整 被 合作 式 管理 的 那 部分 缓存 的 大小 . 它 的 主要 思想 是 , 优先 缓存 孤本 缓存 块 （ 即 整个 系统 的 缓存 中 只有 这样 一个 副本 ） . 当 一个 客户 替换 一个 孤本 时 不是 直接 把 它 扔掉 , 而是 随机 地 选择 另 一个 客户 , 把 该 孤本 转发给 它 , 并且 允许 该 孤本 最多 有 N 次 转发 机会 . 在 实现 N - chance 算法 时 , 通常 要 附加 一些 限制 措施 以 防止 “ 涟漪 ” 效应 , 即 被 转发 的 孤本 又 引起 另 一个 孤本 的 转发 等等 . 
 2.2 启发式 缓存 替换算法 
 　 　 虽然 N - chance 算法 利用 孤本 优先 策略 , 减少 了 系统 缓存 中同 一块 缓存 的 拷贝 数目 , 相对 地 扩大 了 系统 有效 缓存 的 空间 , 但 它 仍 有 不足之处 ： ( 1 ) 每次 发生 缓存 替换 时 , 若 被 替换 块 不是 其他 客户 转发 过来 的 孤本 , 客户 都 要 询问 管理器 , 以 判断 被 替换 块 是否 为 孤本 , 因而 增加 了 网络 开销 和 替换 的 响应 时间 ； ( 2 ) 在 转发 孤本 缓存 块 时 , 此 算法 是 随机 地 选择 将要 接收 孤本 的 目的 客户 , 没有 考虑 到 系统 中 各个 客户 的 存取 模式 （ 如 近期 存取 被 转发 孤本 的 概率 ） 及 状态 （ 如 空闲 程度 ） ； ( 3 ) 不 加 区别 地 转发 所有 的 孤本 . 事实上 , 有些 孤本 缓存 块 在 近期 甚至 将 永远 不会 被 存取 , 对 这些 孤本 的 转发 变得 毫无意义 . 
 　 　 我们 设计 的 启发式 缓存 替换算法 （ 以下 简称 为 启发式 算法 ） 维护 并 利用 某些 hint 信息 , 克服 了 N - chance 算法 的 上述 缺点 , 是 一种 增强型 的 N - chance 算法 . 启发式 算法 所 基于 的 hint 信息 有 的 来自 双 粒度 协议 , 如 在 某 客户端 某个 文件 是否 处于 打开 状态 、 是否 处于 共享 打开 状态 等等 , 这些 hint 信息 不 需要 启发式 算法 做 额外 的 工作 . 还有 一类 hint 信息 是 关于 缓存 块 是否 为 孤本 的 , 由 客户 和 管理器 共同 来 维护 . 在 实现 启发式 算法 时 , 我们 为 客户端 的 缓存 状态表 增加 了 一项 — — 有效 缓存 块 的 孤本 状态 标志 ncbc ( numberofcacheblockcopies ) , 其值 为 1 时 , 表示 为 孤本 ; 其值 为 2 时 , 表示 系统 中有 该 缓存 块 的 多个 缓存 拷贝 . 由于 客户端 进行 缓存 替换 时 只 关心 被 替换 块 是否 为 孤本 , 因而 ncbc 标志 就 足以 满足 缓存 替换 的 要求 , 至于 系统 中 某 缓存 块 的 具体 拷贝 数目 则 是 由 管理器 为 维护 缓存 一致性 而 记录 的 . ncbc 的 具体 维护 方法 如下 ： 
 　 　 * 某 缓存 块 第 1 次 （ 从 存储器 的 磁盘 上 ） 读 / 写 到 本地 缓存 中 时 , 其 ncbc 置 为 孤本 状态 （ 即 ncbc = 1 ） ； 
 　 　 * 当 客户 之间 转发 数据 块 时 , 双方 各自 的 ncbc 置 为 2 , 表示 系统 中有 多个 （ ≥ 2 ） 拷贝 ； 
 　 　 * 当 一个 客户 执行 完写 操作 后 , 管理器 将 被 写 数据 块 在 其他 客户端 的 缓存 块拷贝 变为 无效 , 同时 , 本地 的 被 写 数据 块 变为 孤本 状态 （ ncbc = 1 ） ； 
 　 　 * 当 由于 某个 客户 执行 缓存 替换 , 使得 整个 系统 中 某块 缓存 的 拷贝 数目 由 2 变为 1 时 , 管理器 通知 拥有 该 孤本 缓存 块 的 客户 , 使该 数据 块 的 ncbc 置 为 孤本 状态 （ ncbc = 1 ） . 
 　 　 假设 某一 时刻 , 系统 中 的 第 i 个 客户 的 第 j 块 被选为 被 替换 对象 , 我们 把 它 标记 为 bij , 并 将 bij 所属 的 文件 标记 为 f , 则 此时 bij 所处 的 状态 可能 有 ： 
 　 　 A : bij 是 由 其他 客户 转发 来 的 孤本 ； 
 　 　 　 　 A.1 : bij 尚未 被 转发 N 次 ； 
 　 　 　 　 A.2 : bij 已 被 转发 N 次 ； 
 　 　 B : 目前 无 任何 客户 处于 打开 f 的 状态 , 这 意味着 bij 近期 （ 甚至 永远 将 ） 不会 被 引用 ； 
 　 　 C : f 正 处于 打开 状态 ； 
 　 　 　 　 C.1 : 只有 本地 客户 打开 了 f ； 
 　 　 　 　 C.2 : 系统 中有 k ( k ≥ 2 ) 个 客户 处于 打开 f 的 状态 ； 
 　 　 　 　 　 　 C.2 . 1 : bij 的 ncbc 等于 1 ； 
 　 　 　 　 　 　 C.2 . 2 : bij 的 ncbc 等于 2 . 
 　 　 在 我们 的 启发式 算法 中 , 当 bij 处于 A.2 , B 或 C.2 . 2 这 3 种 状态 之一 时 , 无需 转发 , 而是 直接 把 bij 丢弃 ； 当 bij 处于 状态 A.1 或 C.1 时 , 客户 i 随机 地 选择 另 一个 客户 X , 把 bij 转发给 X ； 当 bij 处于 C.2 . 1 状态 时 , 客户 i 首先 告诉 管理器 它 目前 要 转发 替换 块 bij , 管理器 修改 完 缓存 状态表 后 向 客户 i 发送 应答 消息 , 应答 消息 中 包含 了 将要 接收 bij 的 目的 客户 Y , 其中 Y 为 一个 正在 使用 f 的 客户 （ 即 处于 打开 f 的 状态 ） . 客户 i 收到 应答 后 把 bij 转发给 客户 Y . 由于 启发式 算法 基于 hint 信息 , 客户 自己 就 能 判断 出 bij 是否 为 孤本 , 无需 与 管理器 联系 , 因而 同 N - chance 算法 相比 , 在 B 及 C 状态 下 , 启发式 算法 能够 节省 一对 网络 传输 , 又 由于 启发式 算法 能够 根据 客户 本地 的 回调 结构 来 判断 被 替换 文件 目前 是否 有 客户 正在 使用 , 若 没有 客户 使用 （ 即 处于 B 状态 ） , 即使 bij 为 孤本 也 不 转发 , 因而 使得 系统 中 合作 式 缓存 可以 用来 存放 更 多 的 有效 数据 块 . 另外 , 虽然 在 C.2 . 1 状态 下 需要 征求 管理器 的 意见 , 浪费 了 一对 网络 传输 , 但 却 增加 了 该 转发 后 孤本 的 本地 缓存 命中率 . 
 3 分析模型 
 　 　 为了 评价 启发式 算法 的 性能 , 我们 为 启发式 算法 及 N - chance 算法 建立 了 分析模型 , 以便 对 二者 的 性能 进行 比较 . 为了 简单 起 见 , 我们 的 分析模型 只 针对 读 操作 的 响应 时间 , 这样 做 是 合理 的 , 因为 系统 中读 操作 所 占 的 比例 较大 , 是 影响 系统 性能 的 主要 因素 . 
 　 　 假设 一次 读 操作 在 不同 的 存储 层次 可 得到 满足 的 概率 分别 为 ： 本地 缓存 命中率 Pl , 远程 命中率 Pr 及 磁盘 命中率 Pd , 请求 在 不同 存储 层次 得到 满足 的 响应 时间 分别 为 Tl , Tr 和 Td , 缓存 替换 所用 时间 为 T 替换 , 读 操作 的 平均 响应 时间 为 T 响应 , 则 下列 公式 成立 . 
 Pl + Pr + Pd = 1 , 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 1 ) 
 T 响应 = Pl × Tl + Pr × Tr + Pd × Td + ( 1 - Pl ) × T 替换 . 　 　 　 　 　 　 　 　 　 　 ( 2 ) 
 　 　 下面 是 缓存 替换 时 影响 性能 的 几个 主要参数 . 
 　 　 Rct : 合作 式 缓存 （ 即 用于 存放 其他 客户 转发 来 的 孤本 的 缓存 ） 占 整个 客户端 缓存 的 比例 ； 
 　 　 Rnl : 近期 不会 被 引用 的 缓存 块 占 本地 缓存 （ 即 不 包含 合作 式 缓存 ） 的 比例 ； 
 　 　 Pso : 文件 处于 共享 打开 状态 的 概率 ； 
 　 　 Psgl : 本地 缓存 中 处于 共享 打开 状态 的 文件 的 缓存 块 是 孤本 （ 即 其 ncbc = 1 ） 的 概率 ； 
 　 　 Pk2 : 本地 客户 处于 打开 f 的 状态 , 且 系统 中有且 仅 有 两个 客户 处于 打开 f 状态 的 概率 ； 
 　 　 Psr : 数据 块 共享 读 的 概率 , 即 客户 i 把 孤本 bij 转发给 客户 Y ( 其中 客户 i 和 Y 都 处于 打开 f 的 状态 ) 后 , 又 被 客户 Y 本地 读 命中 的 概率 ； 
 　 　 N : N - chance 算法 下 远程 缓存 命中率 Pr 与 本地 缓存 命中率 Pl 的 比值 , 即 下式 成立 , 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 3 ) 
 　 　 当 在 N - chance 算法 下 发生 缓存 替换 , 并且 被 替换 块 bij 不是 由 其他 客户 转发 来 的 孤本 时 , 本地 客户 都 要 向 管理器 发送 消息 以 询问 bij 是否 为 孤本 , 因而 共 需要 两次 请求 / 应答 网络 传输 . 假设 一次 网络 传输 的 时间 （ 这里 指 的 是 消息 时延 ） 为 Thop , 则 N - chance 算法 下 的 替换 开销 为 
 TN 替换 = ( 1 - Rct ) × ( 2 × Thop ) . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 4 ) 
 将式 ( 1 ) 、 ( 3 ) 及 ( 4 ) 代入 式 ( 2 ) 后 得到 N - chance 算法 下 的 1 次读 操作 的 响应 时间 为 
 TN - chance = ( T1 - Td + N × ( Tr - Td ) - 2 × ( 1 - Rct ) × Thop ) × Pl + Td + 2 × ( 1 - Rct ) × Thop . 　 　 　 ( 5 ) 
 　 　 我们 用 PA , PB , PC , PC1 , PC2 , PC21 和 PC22 分别 表示 缓存 替换 时 被 替换 块 处于 状态 A , B , C , C.1 , C.2 , C.2 . 1 和 C.2 . 2 的 概率 , 根据 2.2 节中 被 替换 块 状态 及本节 中 影响 性能 的 主要参数 的 定义 , 下列 公式 成立 . 
 PB + PC = 1 - Rct , 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 6 ) 
 PC = ( PB + PC ) × ( 1 - Rnl ) = ( 1 - Rct ) × ( 1 - Rnl ) , 　 　 　 　 　 　 　 　 　 　 ( 7 ) 
 PC1 = PC × ( 1 - Pso ) , 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 8 ) 
 PC2 = PC × Pso , 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 9 ) 
 PC21 = PC2 × Psgl , 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 10 ) 
 PC22 = PC2 × ( 1 - Psgl ) . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 11 ) 
 　 　 当 在 启发式 算法 下 进行 缓存 替换 且 bij 处于 状态 C.2 . 1 时 , 会 引起 两次 网络 传输 , 而 处于 C.2 . 2 状态 且 在 k = 2 时 , 管理器 应 通知 某个 客户 使 其 缓存 块 变为 孤本 , 引起 1 次 网络 传输 , 故 在 启发式 算法 下 的 替换 开销 为 
 T 替换 = PC21 × 2 × Thop + PC22 × Pk2 × Thop . 　 　 　 　 　 　 　 　 　 　 　 ( 12 ) 
 　 　 令 Pl 启 和 Pr 启 分别 为 启发式 算法 下 的 本地 及 远程 缓存 命中率 . 同 N - chance 算法 相比 , 启发式 算法 在 状态 C.2 . 1 下 转发 孤本 时 能够 增加 本地 命中率 , 但 不会 改变 总 的 缓存 命中率 ( 包括 本地 和 远程 ) , 所以 下列 公式 成立 . 
 Pl 启 + Pr 启 = Pl + Pr , 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 13 ) 
 Pl 启 = Pl + PC21 × Psr . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 14 ) 
 将式 ( 3 ) 、 式 ( 6 ) ～ ( 14 ) 代入 式 ( 2 ) 后 可 得到 
 T 启发 = TN - chance + ( Tl - Tr ) × ( 1 - Pl ) × ( 1 - Rct ) × ( 1 - Rnl ) × Pso × Psgl × Psr + ( 1 - Pl ) × ( 1 - Rct ) × Thop × 
 ( ( 1 - ( 1 - Rct ) × ( 1 - Rnl ) × Pso × Psgl × Psr ) × ( 1 - Rnl ) × Pso × ( 2 × Psgl + ( 1 - Psgl ) × Pk2 ) - 2 ) . 
 ( 15 ) 
 4 性能 评价 
 　 　 由于 在 s2fs 系统 所 基于 的 平台 中 , 各个 节点 之间 是 用 10Mbit / s 以太网 互连 的 , 因而 我们 关于 系统配置 的 某些 基本 假设 取自 文献 ［ 3 ］ 中 关于 以太网 的 数据 ： 缓存 块 的 大小 为 8Kbytes , 本地 内存 的 存取时间 为 250 μ s , 网络 时延 Thop = 200 μ s , 单块 数据 的 传输 时间 为 6250 μ s , 从 磁盘 读取 一块 数据 的 时间 为 14800 μ s , 那么 , Tl = 0.25 ms . 与 文献 ［ 3 ］ 不同 的 是 , 本文 中 的 Tr = 7.1 ms , Td = 21.9 ms . 因为 在 我们 的 系统 中 元 数据 的 管理 与 数据 的 存储 和 缓存 是 分开 的 , 从 远程 缓存 或 磁盘 上 存取数据 要用 3 次 网络 传输 . 
 　 　 对于 影响 读 操作 响应 时间 的 参数 的 取值 我们 是 这样 处理 的 ： 对 每个 参数 都 取 3 组值 , 即下 限值 、 标准值 和 上 限值 . 参数 Rct , Pl , N , Rnl , Pso 及 Pk2 是从 文献 ［ 4 , 5 ］ 分析 得来 的 . 另外 , Pl 和 N 是 一块 取值 的 , 因为 二者 是 相关 的 , 当 Pl 变大时 , N 往往 会 变小 ; 当 Pl 变 小时 , N 往往 会 变大 . 对于 Psr 和 Psgl , 我们 分别 取 10% , 50% 和 90% 作为 其下 限值 、 标准值 及 上 限值 . 这些 影响 性能 的 主要参数 的 取值 情况 见表 1 . 
 表 1 某些 影响 系统 性能 的 参数 取值 范围 
 
 　 RctPl , NRnlPsoPk2PsrPsgl 
 下 限值 0.050 . 67 , 0.2120 . 050.400 . 020.100 . 10 
 标准值 0.300 . 78 , 0.180 . 150.650 . 060.500 . 50 
 上 限值 0.550 . 94 , 0.040 . 250.900 . 100.900 . 90 
 
 
 　 　 我们 将 参数 Rct , Pl , N , Rnl , Pso , Pk2 , Psr 和 Psgl 不同 取值 的 组合 代入 公式 ( 5 ) 和 ( 15 ) , 可以 分别 得到 在 N - chance 算法 和 启发式 算法 下 , 一次 读 操作 的 响应 时间 . 分析 结果表明 , 当 这些 参数 取 各种 不同 的 值时 , 读 操作 的 响应 时间 在 启发式 算法 下 比 在 N - chance 算法 下 都 有 不同 程度 的 降低 . 例如 , 当 这些 参数 都 取 标准值 时 , 启发式 算法 相对 于 N - chance 算法 , 其读 操作 的 响应 时间 能够 降低 6.4% ； 当 Rct , Rnl 及 Pk2 取下 限值 , Pl , N 取 标准值 , Pso , Psr 和 Psgl 取上 限值 时 , 在 启发式 算法 下 , 读 操作 的 响应 时间 降低 了 34.885% ； 即使 在 最坏 情况 下 , 即 Rct , Pl , Rnl 及 Pk2 取上 限值 , Pso , N , Psr 和 Psgl 取下 限值 时 , 启发式 算法 相对 于 N - chance 算法 , 也 能够 使读 操作 的 响应 时间 降低 1.085% . 图 2 即 说明 了 这 一点 . 
 
 图 2 　 两种 算法 的 性能 比较 
 　 　 图 3 考察 了 当 Rct , Pl 及 N 取 标准值 , Rnl , Pso , Pk2 , Psr 和 Psgl 取 不同 的 值 时 对 启发式 算法 的 影响 . 从图 3 中 可以 看出 , Pso , Psr 和 Psgl 取值 越大 , 启发式 算法 对 读 操作 响应 时间 的 改进 也 越 大 . 反之 , Rnl 和 Pk2 取值 越大 , 启发式 算法 对 读 操作 响应 时间 的 改进 越小 , 但 影响 程度 不大 . 另外 , 图 3 也 说明 了 不论 Rnl , Pso , Pk2 , Psr 和 Psgl 取 什么 值 , 在 降低 I / O 的 响应 时间 方面 , 启发式 算法 都 优于 N - chance 算法 . 
 
 图 3 　 Rnl , Pso , Pk2 , Psr 及 Psgl 的 取值 对 启发式 算法 的 影响 
 5 结论 
 　 　 本文 在 s2fs 系统 的 双 粒度 协议 基础 上 , 提出 了 一种 基于 hint 的 启发式 合作 缓存 替换算法 , 用 分析模型 说明 了 启发式 算法 比 现有 的 N - chance 算法 在 降低 I / O 的 响应 时间 方面 有 进一步 的 改善 . 今后 , 我们 将 在 s2fs 系统 中 具体 实现 启发式 算法 , 并用 实际 的 应用 来 测试 启发式 算法 对 I / O 性能 的 改进 . 
 注 ： 本文 研究 得到 国家自然科学基金 和 国家 863 高科技 项目 基金 资助 . 
 本文 通讯联系 人 ： 王建勇 , 北京 100871 , 北京大学 计算机科学 与 技术 系 网络 分布 与 系统 研究室 
 作者简介 ： 王建勇 , 1969 年生 , 博士生 , 主要 研究 领域 为 并行 / 分布 处理 . 
 祝明发 , 1945 年生 , 博士 , 研究员 , 博士生 导师 , 主要 研究 领域 为 高性能 计算机系统 与 网络 . 
 徐志伟 , 1956 年生 , 博士 , 研究员 , 博士生 导师 , 主要 研究 领域 为 并行 计算机系统 . 
 作者 单位 ： 王建勇 　 北京大学 计算机科学 与 技术 系 北京 100871 
 祝明发 　 徐志伟 　 国家 智能 计算机 研究 与 开发 中心 北京 100080 
 王建勇 　 祝明发 　 徐志伟 　 中国科学院计算技术研究所 　 北京 　 100080 
 参考文献 
 　 1 　 LeffAvraham , WolfJoelL , YuPhilipS . Replicationalgorithmsinaremotecachingarchitecture . IEEETransactionsonParallelandDistributedSystems , 1993 , 4 ( 11 ) : 1185 ～ 1204 
 　 2 　 AndersonTEetal . Serverlessnetworkfilesystems . ACMTransactionsonComputerSystems , 1996 , 14 ( 1 ) : 41 ～ 79 
 　 3 　 DahlinMDetal . Cooperativecaching : usingremoteclientmemorytoimprovefilesystemperformance . In : Proceedingsofthe1stSymposiumonOperatingSystemsDesignandImplementation . Berkeley , CA : USENIXAssociation , 1994.276 ～ 280 
 　 4 　 BakerMGetal . Measurementsofadistributedfilesystem . ACMOperatingSystemsReview , 1991 , 25 ( 5 ) : 198 ～ 212 
 　 5 　 BlazeMA . Cachinginlarge - scaledistributedfilesystems ［ Ph . D . Thesis ］ . DepartmentofComputerScience , PrincetonUniversity , 1993 
 本文 1998 - 07 - 20 收到 原稿 , 1998 - 09 - 07 收到 修改稿 
