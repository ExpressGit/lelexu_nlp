宇航学 报 
 JOURNALOFASTRONAUTICS 
 1998 年 第 19 卷 第 1 期 No1Vol.91998 科技期刊 
 
 　 软件可靠性 修改 的 Schneidewind 
 增长 模型 的 特性 分析 
 宋晓秋 
 ( 北京 计算机 应用 和 仿真技术 研究所 * 北京 142 信箱 213 分箱 2 号 * 100854 ) 
 　 　 摘 　 要 　 本文 对 软件可靠性 修改 的 Schneidewind 增长 模型 进行 了 详细 的 数值 特性 分析 , 剖析 了 该 模型 的 参数 解 结构 , 从而 构造 了 模型 参数估计 的 高效 求解 算法 , 并 进行 了 相应 的 数值 实验 。 
 　 　 主题词 　 软件工程 　 软件可靠性 　 可靠性 模型 
 ANALYSISONNUMERICALCHARACTERISTIC 
 OFMODIFIEDSCHNEIDEWIND ’ SSOFTWARE 
 RELIABILITYGROWTHMODEL 
 SongXiaoqiu 
 ( BeijingInstituteofComputerApplicationandSimulationTechnology * Beijing * 100854 ) 
 　 　 Abstract 　 Inthispaper , thenumericalcharacteristicofmodifiedSchneidewind ' ssoftwarereliabilitygrowthmodelisanalyzedindetail , thereforeanefficientevaluationalgorithmisconstructedbasedonthetheoryofthismodel ' sparametersolution , andsomecorrespondingnumericalexperimentsaretestedforthismodel . 
 　 　 Keywords 　 Softwareengineering 　 Softwarereliability 　 Reliabilitymodel 
 1 　 引 　 言 
 　 　 Jelinski 和 Moranda 在 1972 年 给出 的 软件可靠性 增长 的 JM 模型 , 其 基本 思想 是 假设 软件 当前 的 故障率 正比 于 错误 残留 数 , 在 一个 错误 被 修改 到 下 一个 错误 被 发现 的 时间段 内 故障率 保持 为 常数 , 每当 一个 错误 被 修改 后 , 故障率 都 降低 一 固定值 , 即 每个 错误 对 故障率 改善 的 影响 是 相同 的 。 这种 假设 虽然 在 某些 情况 下 具有 一定 的 代表性 , 但 在 许多 情况 下 却是 不 符合 客观 实际 的 。 IBM 的 Adams 在 1980 年 和 1984 年 的 两篇 研究 报告 中 总结 IBM 典型 软件 的 缺陷 时 指出 : 有 的 大 缺陷 的 MTBF 为 一年 半 , 而 大量 小 缺陷 的 MTBF 可达 1500 年 , 有 的 更 可达 5000 年 , 它们 相差 2 ～ 3 个 数量级 。 一般来讲 , 当 软件 的 故障率 λ ( t ) 大时 , 缺陷 易于 暴露 , 因此 d λ ( t ) / dt 应负 得 多一些 。 Schneidewind 基于 此 , 假设 在 不太长 的 时间 区间 内 , d λ ( t ) / dt = - β λ ( t ) , 其解 为 λ ( t ) = α e - β t 。 在 原始 的 Schneidewind 模型 中 , 把 时间 区间 从 t = 0 起 分为 等 长时间 间隔 , 第 i 个 区间 的 λ i = α e - β ( i - 1 ) Δ t , i = 1 , 2 , … , k , 利用 在 第 i 个 区间 内 发现 并 纠正 的 故障 统计 数 , 依据 最大 似然 法求 出 模型 参数估计 α 和 β , 于是 在 最后 一个 区间 内即 第 k 个 区间 的 故障率 λ k = α e - β ( k - 1 ) Δ t 。 
 　 　 我们 注意 到 , 原始 的 Schneidewind 模型 只 利用 到 了 每个 时间 区间 内 的 错误 发现 并 纠正 的 总统 计数 , 而 未 利用 到 每 一 错误 发现 并 纠正 的 具体 时刻 , 因此 原始 统计数据 的 信息 并未 利用 充分 。 
 　 　 何国 伟在 文献 ［ 1 ］ 中 , 使用 Schneidewind 的 d λ ( t ) ／ dt = - β λ ( t ) 这一 简明 的 工程 假设 , 充分利用 每一 错误 发现 并 纠正 的 具体 时刻 信息 , 给出 了 一种 新 的 软件可靠性 增长 模型 , 即 修改 的 Schneidewind 模型 : 
 　 　 设 第 i 个 错误 被 发现 并 纠正 的 时刻 为 ti , i = 1 , 2 , … , k , 则 类似 JM 模型 的 推导 方法 , 得到 α 和 β 的 最大 似然 估计 满足 如下 非 线性方程组 
 
 ( 1 ) 
 于是 在 时刻 tk 时 的 故障率 估计值 为 λ ( tk ) = α e - β tk 。 
 　 　 我们 可以 看出 方程组 ( 1 ) 是 关于 α 和 β 的 非 线性方程组 , 本文 着重 分析 该 方程组 的 解 结构 , 在 此基础 上 构造 出 实用 高效 的 模型 参数估计 数值 算法 , 并 进行 一些 相应 的 数值 实验 。 
 2 　 参数 解 特性 分析 
 　 　 将 方程组 ( 1 ) 中 的 α 消元 得到 关于 β 的 单个 方程 
 
 记 
 
 ( 2 ) 
 设 x = e - β , 代入 ( 2 ) 式 得到 
 
 ( 3 ) 
 由于 发现 修改 错误 的 时间 ti 通常 是 采用 整 单位 数 ( 如秒 、 分 、 日 、 月 、 年 等 ) 来 统计 的 , 所以 可以 假设 ti ∈ N 。 令 ni = ti - t0 , 得到 
 
 ( 4 ) 
 由前 假设 x ＞ 0 , 所以 g ( x ) = 0 等价 于 
 
 ( 5 ) 
 的 求根 问题 。 
 　 　 定理 1 　 p ( x ) 在 ( 0 , + ∞ ) 内有且 只有 一个 根 。 
 　 　 证明 　 因为 t0 ＜ t1 ＜ t2 ＜ … ＜ tk - 1 , 由 
 
 可知 , 0 ＜ l ＜ k - 1 , a0 ＞ 0 , a1 ＞ 0 , … , al ≥ 0 , al + 1 ＜ 0 , al + 2 ＜ 0 , … , ak - 1 ＜ 0 , 所以 
 
 即 在 ( 0 , + ∞ ) 上 为 减 函数 , 又 知 
 
 所以 在 ［ 0 , + ∞ ) 上 有 且 只有 一根 x1 , 且 
 
 所以 在 ( 0 , x1 ) 上 为 增函数 , 在 ( x1 , + ∞ ) 上 为 减 函数 , 又 知 
 
 所以 在 ［ x1 , + ∞ ) 上 有 且 只有 一根 x2 , 且 
 
 由 归纳法 假设 , 设 nl + 1 - m ＞ 0 , xm - 1 ≥ 0 
 　 在 ［ xm - 1 , + ∞ ) 上 有 具 只有 一根 xm , 且 
 
 可知 在 ( 0 , xm ) 上 为 增函数 , 在 ( xm , + ∞ ) 上 为 减 函数 , 又 知 
 
 所以 在 ［ xm , + ∞ ) 上 有 且 只有 一根 xm + 1 , 且 
 
 由 归纳法 可知 , 当 nl + 1 - m = 1 时 得出 : 在 ［ 0 , + ∞ ) 上 有 且 只有 一根 , 又 因 p ( 0 ) = a0 ＞ 0 , 所以 p ( x ) 在 ( 0 , + ∞ ) 内有且 只有 一个 根 。 
 　 　 由 软件可靠性 故障率 的 含义 可知 , 当 故障率 呈上升 趋势 时 显然 是 所 不 期望 的 , 一旦 软件可靠性 的 评估 结果 为 故障率 单调 上升 , 说明 软件 本身 还 没 资格 到 软件可靠性 评估 这一 阶段 。 故障率 不 增即 为 β 大于 等于 0 , 对于 p ( x ) 即 为 根 小于 等于 1 。 
 　 　 定理 2 　 如果 p ( 1 ) ＞ 0 , 则 p ( x ) 在 ( 1 , + ∞ ) 上 必有 一根 。 
 　 　 证明 　 因为 p ( 1 ) ＞ 0 , p ( + ∞ ) = - ∞ , 所以 p ( x ) 在 ( 1 , + ∞ ) 上 必有 一根 。 
 　 　 由 定理 2 可知 , 软件 故障率 不增 的 条件 为 : 
 
 　 　 依据 上述 模型 参数 解 结构 的 分析 结果 , 我们 可以 方便 地 构造 出 参数估计 的 数值 求解 算法 。 
 3 　 数值 算法 
 　 　 我们 不难看出 , 关于 α 和 β 的 非 线性方程组 ( 1 ) 的 一般性 数值 求解 并非易事 。 
 　 　 首先 , 方程组 ( 1 ) 的 非线性 很强 。 如果 用 诸如 简单 迭代法 、 牛顿 迭代法 等 进行 数值 求解 将 遇到 初值 如何 选取 的 问题 。 往往 初值 的 近似 性 不好 将会 导致 迭代法 的 发散 。 如果 我们 用 诸如 区间 迭代法 等 具有 全局 收敛 的 方法 进行 数值 求解 , 往往 在 求解 的 速度 和 效率 上 付出 很大 的 代价 。 
 　 　 其次 , 无论 用 哪 一种 通用 数值 方法 , 如果 求解 出 β 小于 0 都 是 无 意义 的 。 而 一般 通用 算法 对 β 求出 后 再作 结论 的 做法 将 浪费 大量 的 时间 。 
 　 　 求解 非 线性方程组 效率 最高 的 方法 当然 是 针对 方程组 的 具体 特点 构造 针对性 的 数值 算法 。 下面 我们 结合 上 节 对模型 参数 解 结构 的 分析 结果 , 给出 具有 针对性 的 高效 数值 求解 算法 。 我们 之所以 称其为 高效 是因为 : 首先 , 它 不 需 初值 , 任何 情况 下 都 会 给出 满足 精度 要求 的 数值 解 ; 其次 , 对 故障率 单调 上升 的 情况 是 直接 代数式 判别 , 而 无需 迭代 求解 ; 最后 , 它 所 具有 的 ［ 0 , 1 ］ 区间 上 二分法 量级 的 寻根 速度 将 是 386 微机 上 都 可 接受 的 速度 。 
 　 　 算法 1 
 　 　 设 xl = 0 , xr = 1 , ex 为 针对 自变量 x 而 给定 的 误差 精度 控制 值 , ey 为 针对 函数 值 变量 y 而 给定 的 误差 精度 控制 值 。 
 　 　 步 1 : 计算 
 　 　 　 　 如果 q ＞ 0 , 则 说明 故障率 单调 上升 , 终止 计算 
 　 　 　 　 如果 q = 0 , 则 root = 1 , 转步 4 
 　 　 　 　 如果 q ＜ 0 , 则 转步 2 
 　 　 步 2 : 令 , 计算 
 　 　 　 　 如果 p ( xm ) ＞ ey , 则 xl = xm , 转步 3 
 　 　 　 　 如果 - ey ≤ p ( xm ) ≤ ey , 则 root = xm , 转步 4 
 　 　 　 　 如果 p ( xm ) ＜ - ey , 则 xr = xm , 转步 3 
 　 　 步 3 : 如果 | xl - xr | ≤ ex , 令 , 转步 4 
 如果 | xl - xr | ＞ ex , 转步 2 
 　 　 步 4 : β = - ln ( root ) 
 
 终止 计算 
 4 　 数值 实验 
 　 　 例 1 　 我们 采用 美国 海军 舰队 计算机 程序设计 中心 ( U . S . NavyFleetComputerProgrammingCenter ) 的 海军 战术 数据系统 NTDS ( NavalTacticalDataSystem ) 开发 过程 中 的 错误 统计数据 ( 只取 制造 阶段 的 数据 ) 。 错误 统计数据 见表 1 , 评估 结果 见表 2 , 故障率 图见 图 1 。 
 表 1 　 错误 统计数据 ( 时间 单位 : 日 ) 
 
 序号 间隔时间 累计 时间 序号 间隔时间 累计 时间 
 19914987 
 2122115491 
 3113216192 
 443617395 
 574318398 
 6245196104 
 7550201105 
 88582111116 
 95632233149 
 10770237156 
 111712491247 
 12677252249 
 13178261250 
 
 表 2 　 评估 结果 
 
 初始 故障率 α 0.1817663 
 影响 故障率 比例 常数 β 0.00585515 
 参数 精度 ( 方程组 残量 的 欧氏 范数 ) 0.00055641 
 当前 故障率 ( t = 250 ) 0.04205873 
 平均 故障 前 时间 ( MTBF ) 23.77678384 
 下 一 故障 可能 时间 273.77678384 
 
 　 　 评估 的 结果表明 , 该 软件系统 的 平均 故障 前 时间 ( MTBF ) 约 为 24 日 , 即 软件 离 正式 交付 尚有 一定 距离 , 仍 需 进一步 的 测试 。 实际 中 该软件 在 进一步 的 测试 中 又 发现 了 5 个 错误 。 
 　 　 例 2 　 我们 采用 装甲兵 工程学院 的 某 软件测试 例子 ( 只取 前 16 个 数据 ) 。 错误 统计数据 见表 3 , 评估 结果 见表 4 , 故障率 图见 图 2 。 
 表 3 　 错误 统计数据 ( 时间 单位 : 秒 ) 
 
 序号 间隔时间 累计 时间 序号 间隔时间 累计 时间 
 11193389 
 21210190 
 3131130120 
 4581222142 
 54121313155 
 624361422177 
 76421577254 
 81456167261 
 
 表 4 　 评估 结果 
 
 初始 故障率 α 0.14065864 
 影响 故障率 比例 常数 β 0.00899166 
 参数 精度 ( 方程组 残量 的 欧氏 范数 ) 0.00008883 
 当前 故障率 ( t = 250 ) 0.01345717 
 平均 故障 前 时间 ( MTBF ) 74.30983110 
 下 一 故障 可能 时间 335.30983110 
 
 
 
 图 1 　 故障率 图 
 
 
 图 2 　 故障率 图 
 评估 的 结果表明 , 该 软件系统 的 平均 故障 前 时间 ( MTBF ) 约 为 74 秒 , 即 软件 离 正式 交付 尚有 一定 距离 , 仍 需 进一步 的 测试 。 实际 中 该软件 在 继续 进行 的 测试 中 下 一个 错误 的 发现 时间 为 300 秒 , 与 评估 预计 的 335 秒 相差 35 秒 , 所以 修改 的 Schneidewind 模型 对此 软件系统 基本 适用 。 
 参考文献 
 1 　 何国 伟 . 软件 的 MTBF 及其 验证 试验 . 电子产品 可靠性 与 环境 试验 , 1995 , ( 1 ) 
 2 　 徐仁佐 等 . 软件可靠性 模型 及 应用 . 清华大学出版社 和 广西 科学技术 出版社 , 1994 年 
 3 　 国外 软件可靠性 资料汇编 . 全国 军事 技术装备 可靠性 标准化 技术 委员会 , R . M . S 译文 选 10 , 1994 年 9 月 
 本文 于 1996 年 5 月 28 日 收到 
 　 　 * 该项 研究 得到 国防科工委 基础 研究 基金 资助 
